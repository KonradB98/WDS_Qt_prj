
WDS_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c33c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800c4e0  0800c4e0  0001c4e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c888  0800c888  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800c888  0800c888  0001c888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c890  0800c890  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c890  0800c890  0001c890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c894  0800c894  0001c894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800c898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d5c  20000350  0800cbe8  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020ac  0800cbe8  000220ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016869  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003321  00000000  00000000  00036be9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea8  00000000  00000000  00039f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d40  00000000  00000000  0003adb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019c49  00000000  00000000  0003baf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f6f8  00000000  00000000  00055741  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a157  00000000  00000000  00064e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eef90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dbc  00000000  00000000  000ef00c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c4c4 	.word	0x0800c4c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	0800c4c4 	.word	0x0800c4c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f94d 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f006 fa34 	bl	8007438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f965 	bl	80012ca <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f92d 	bl	8001276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000118 	.word	0x20000118
 8001034:	20000004 	.word	0x20000004
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000004 	.word	0x20000004
 8001060:	2000037c 	.word	0x2000037c

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000037c 	.word	0x2000037c

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_Delay+0x40>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000004 	.word	0x20000004

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff3e 	bl	8001108 <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff8e 	bl	80011b4 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5d 	bl	8001160 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff31 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa2 	bl	800121c <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e159      	b.n	80015b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	429a      	cmp	r2, r3
 800131a:	f040 8148 	bne.w	80015ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d00b      	beq.n	800133e <HAL_GPIO_Init+0x5a>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001332:	2b11      	cmp	r3, #17
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b12      	cmp	r3, #18
 800133c:	d130      	bne.n	80013a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f003 0201 	and.w	r2, r3, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0xfc>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b12      	cmp	r3, #18
 80013de:	d123      	bne.n	8001428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	08da      	lsrs	r2, r3, #3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3208      	adds	r2, #8
 80013e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	69b9      	ldr	r1, [r7, #24]
 8001424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0203 	and.w	r2, r3, #3
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80a2 	beq.w	80015ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <HAL_GPIO_Init+0x2e4>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a55      	ldr	r2, [pc, #340]	; (80015c8 <HAL_GPIO_Init+0x2e4>)
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <HAL_GPIO_Init+0x2e4>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001486:	4a51      	ldr	r2, [pc, #324]	; (80015cc <HAL_GPIO_Init+0x2e8>)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a48      	ldr	r2, [pc, #288]	; (80015d0 <HAL_GPIO_Init+0x2ec>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x202>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a47      	ldr	r2, [pc, #284]	; (80015d4 <HAL_GPIO_Init+0x2f0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x1fe>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a46      	ldr	r2, [pc, #280]	; (80015d8 <HAL_GPIO_Init+0x2f4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x1fa>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a45      	ldr	r2, [pc, #276]	; (80015dc <HAL_GPIO_Init+0x2f8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x1f6>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a44      	ldr	r2, [pc, #272]	; (80015e0 <HAL_GPIO_Init+0x2fc>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x1f2>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e008      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014d6:	2307      	movs	r3, #7
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014da:	2303      	movs	r3, #3
 80014dc:	e004      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014de:	2302      	movs	r3, #2
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_Init+0x204>
 80014e6:	2300      	movs	r3, #0
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	f002 0203 	and.w	r2, r2, #3
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4093      	lsls	r3, r2
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f8:	4934      	ldr	r1, [pc, #208]	; (80015cc <HAL_GPIO_Init+0x2e8>)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001506:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800152a:	4a2e      	ldr	r2, [pc, #184]	; (80015e4 <HAL_GPIO_Init+0x300>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001554:	4a23      	ldr	r2, [pc, #140]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_GPIO_Init+0x300>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800157e:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a8:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <HAL_GPIO_Init+0x300>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3301      	adds	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	f67f aea2 	bls.w	8001300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015bc:	bf00      	nop
 80015be:	3724      	adds	r7, #36	; 0x24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40013800 	.word	0x40013800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020800 	.word	0x40020800
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40013c00 	.word	0x40013c00

080015e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f806 	bl	8001618 <HAL_GPIO_EXTI_Callback>
  }
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40013c00 	.word	0x40013c00

08001618 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e11f      	b.n	8001882 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d106      	bne.n	800165c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f005 fd0c 	bl	8007074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2224      	movs	r2, #36	; 0x24
 8001660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001682:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001692:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001694:	f002 fd38 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 8001698:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4a7b      	ldr	r2, [pc, #492]	; (800188c <HAL_I2C_Init+0x25c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d807      	bhi.n	80016b4 <HAL_I2C_Init+0x84>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4a7a      	ldr	r2, [pc, #488]	; (8001890 <HAL_I2C_Init+0x260>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	bf94      	ite	ls
 80016ac:	2301      	movls	r3, #1
 80016ae:	2300      	movhi	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	e006      	b.n	80016c2 <HAL_I2C_Init+0x92>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4a77      	ldr	r2, [pc, #476]	; (8001894 <HAL_I2C_Init+0x264>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	bf94      	ite	ls
 80016bc:	2301      	movls	r3, #1
 80016be:	2300      	movhi	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0db      	b.n	8001882 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4a72      	ldr	r2, [pc, #456]	; (8001898 <HAL_I2C_Init+0x268>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	0c9b      	lsrs	r3, r3, #18
 80016d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4a64      	ldr	r2, [pc, #400]	; (800188c <HAL_I2C_Init+0x25c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d802      	bhi.n	8001704 <HAL_I2C_Init+0xd4>
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3301      	adds	r3, #1
 8001702:	e009      	b.n	8001718 <HAL_I2C_Init+0xe8>
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800170a:	fb02 f303 	mul.w	r3, r2, r3
 800170e:	4a63      	ldr	r2, [pc, #396]	; (800189c <HAL_I2C_Init+0x26c>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	3301      	adds	r3, #1
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	430b      	orrs	r3, r1
 800171e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800172a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4956      	ldr	r1, [pc, #344]	; (800188c <HAL_I2C_Init+0x25c>)
 8001734:	428b      	cmp	r3, r1
 8001736:	d80d      	bhi.n	8001754 <HAL_I2C_Init+0x124>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1e59      	subs	r1, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fbb1 f3f3 	udiv	r3, r1, r3
 8001746:	3301      	adds	r3, #1
 8001748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174c:	2b04      	cmp	r3, #4
 800174e:	bf38      	it	cc
 8001750:	2304      	movcc	r3, #4
 8001752:	e04f      	b.n	80017f4 <HAL_I2C_Init+0x1c4>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d111      	bne.n	8001780 <HAL_I2C_Init+0x150>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1e58      	subs	r0, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	440b      	add	r3, r1
 800176a:	fbb0 f3f3 	udiv	r3, r0, r3
 800176e:	3301      	adds	r3, #1
 8001770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf0c      	ite	eq
 8001778:	2301      	moveq	r3, #1
 800177a:	2300      	movne	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	e012      	b.n	80017a6 <HAL_I2C_Init+0x176>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1e58      	subs	r0, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6859      	ldr	r1, [r3, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	0099      	lsls	r1, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	fbb0 f3f3 	udiv	r3, r0, r3
 8001796:	3301      	adds	r3, #1
 8001798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf0c      	ite	eq
 80017a0:	2301      	moveq	r3, #1
 80017a2:	2300      	movne	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_I2C_Init+0x17e>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e022      	b.n	80017f4 <HAL_I2C_Init+0x1c4>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10e      	bne.n	80017d4 <HAL_I2C_Init+0x1a4>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1e58      	subs	r0, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6859      	ldr	r1, [r3, #4]
 80017be:	460b      	mov	r3, r1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	440b      	add	r3, r1
 80017c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c8:	3301      	adds	r3, #1
 80017ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d2:	e00f      	b.n	80017f4 <HAL_I2C_Init+0x1c4>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1e58      	subs	r0, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	0099      	lsls	r1, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	6809      	ldr	r1, [r1, #0]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69da      	ldr	r2, [r3, #28]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001822:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6911      	ldr	r1, [r2, #16]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68d2      	ldr	r2, [r2, #12]
 800182e:	4311      	orrs	r1, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	430b      	orrs	r3, r1
 8001836:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2220      	movs	r2, #32
 800186e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	000186a0 	.word	0x000186a0
 8001890:	001e847f 	.word	0x001e847f
 8001894:	003d08ff 	.word	0x003d08ff
 8001898:	431bde83 	.word	0x431bde83
 800189c:	10624dd3 	.word	0x10624dd3

080018a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	4608      	mov	r0, r1
 80018aa:	4611      	mov	r1, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	4603      	mov	r3, r0
 80018b0:	817b      	strh	r3, [r7, #10]
 80018b2:	460b      	mov	r3, r1
 80018b4:	813b      	strh	r3, [r7, #8]
 80018b6:	4613      	mov	r3, r2
 80018b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018ba:	f7ff fbd3 	bl	8001064 <HAL_GetTick>
 80018be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	f040 80d9 	bne.w	8001a80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2319      	movs	r3, #25
 80018d4:	2201      	movs	r2, #1
 80018d6:	496d      	ldr	r1, [pc, #436]	; (8001a8c <HAL_I2C_Mem_Write+0x1ec>)
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 fc7b 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80018e4:	2302      	movs	r3, #2
 80018e6:	e0cc      	b.n	8001a82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_I2C_Mem_Write+0x56>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e0c5      	b.n	8001a82 <HAL_I2C_Mem_Write+0x1e2>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b01      	cmp	r3, #1
 800190a:	d007      	beq.n	800191c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800192a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2221      	movs	r2, #33	; 0x21
 8001930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2240      	movs	r2, #64	; 0x40
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a3a      	ldr	r2, [r7, #32]
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800194c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4a4d      	ldr	r2, [pc, #308]	; (8001a90 <HAL_I2C_Mem_Write+0x1f0>)
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800195e:	88f8      	ldrh	r0, [r7, #6]
 8001960:	893a      	ldrh	r2, [r7, #8]
 8001962:	8979      	ldrh	r1, [r7, #10]
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	4603      	mov	r3, r0
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 fab6 	bl	8001ee0 <I2C_RequestMemoryWrite>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d052      	beq.n	8001a20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e081      	b.n	8001a82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 fcfc 	bl	8002380 <I2C_WaitOnTXEFlagUntilTimeout>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00d      	beq.n	80019aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	2b04      	cmp	r3, #4
 8001994:	d107      	bne.n	80019a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06b      	b.n	8001a82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d11b      	bne.n	8001a20 <HAL_I2C_Mem_Write+0x180>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d017      	beq.n	8001a20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1aa      	bne.n	800197e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 fce8 	bl	8002402 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00d      	beq.n	8001a54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d107      	bne.n	8001a50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e016      	b.n	8001a82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e000      	b.n	8001a82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a80:	2302      	movs	r3, #2
  }
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	00100002 	.word	0x00100002
 8001a90:	ffff0000 	.word	0xffff0000

08001a94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08c      	sub	sp, #48	; 0x30
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	817b      	strh	r3, [r7, #10]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	813b      	strh	r3, [r7, #8]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001aae:	f7ff fad9 	bl	8001064 <HAL_GetTick>
 8001ab2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b20      	cmp	r3, #32
 8001abe:	f040 8208 	bne.w	8001ed2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2319      	movs	r3, #25
 8001ac8:	2201      	movs	r2, #1
 8001aca:	497b      	ldr	r1, [pc, #492]	; (8001cb8 <HAL_I2C_Mem_Read+0x224>)
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 fb81 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e1fb      	b.n	8001ed4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_I2C_Mem_Read+0x56>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e1f4      	b.n	8001ed4 <HAL_I2C_Mem_Read+0x440>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d007      	beq.n	8001b10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2222      	movs	r2, #34	; 0x22
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2240      	movs	r2, #64	; 0x40
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4a5b      	ldr	r2, [pc, #364]	; (8001cbc <HAL_I2C_Mem_Read+0x228>)
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b52:	88f8      	ldrh	r0, [r7, #6]
 8001b54:	893a      	ldrh	r2, [r7, #8]
 8001b56:	8979      	ldrh	r1, [r7, #10]
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	4603      	mov	r3, r0
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 fa50 	bl	8002008 <I2C_RequestMemoryRead>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e1b0      	b.n	8001ed4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d113      	bne.n	8001ba2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	623b      	str	r3, [r7, #32]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	623b      	str	r3, [r7, #32]
 8001b8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e184      	b.n	8001eac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d11b      	bne.n	8001be2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e164      	b.n	8001eac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d11b      	bne.n	8001c22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bf8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	e144      	b.n	8001eac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c38:	e138      	b.n	8001eac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	f200 80f1 	bhi.w	8001e26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d123      	bne.n	8001c94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 fc17 	bl	8002484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e139      	b.n	8001ed4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c92:	e10b      	b.n	8001eac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d14e      	bne.n	8001d3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4906      	ldr	r1, [pc, #24]	; (8001cc0 <HAL_I2C_Mem_Read+0x22c>)
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fa94 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e10e      	b.n	8001ed4 <HAL_I2C_Mem_Read+0x440>
 8001cb6:	bf00      	nop
 8001cb8:	00100002 	.word	0x00100002
 8001cbc:	ffff0000 	.word	0xffff0000
 8001cc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d38:	e0b8      	b.n	8001eac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d40:	2200      	movs	r2, #0
 8001d42:	4966      	ldr	r1, [pc, #408]	; (8001edc <HAL_I2C_Mem_Read+0x448>)
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 fa45 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0bf      	b.n	8001ed4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	494f      	ldr	r1, [pc, #316]	; (8001edc <HAL_I2C_Mem_Read+0x448>)
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 fa17 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e091      	b.n	8001ed4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	3b01      	subs	r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e24:	e042      	b.n	8001eac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 fb2a 	bl	8002484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e04c      	b.n	8001ed4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d118      	bne.n	8001eac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f47f aec2 	bne.w	8001c3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e000      	b.n	8001ed4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001ed2:	2302      	movs	r3, #2
  }
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3728      	adds	r7, #40	; 0x28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	00010004 	.word	0x00010004

08001ee0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	4608      	mov	r0, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	817b      	strh	r3, [r7, #10]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	813b      	strh	r3, [r7, #8]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f95c 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e05f      	b.n	8001ffc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f3c:	897b      	ldrh	r3, [r7, #10]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	6a3a      	ldr	r2, [r7, #32]
 8001f50:	492c      	ldr	r1, [pc, #176]	; (8002004 <I2C_RequestMemoryWrite+0x124>)
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f995 	bl	8002282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e04c      	b.n	8001ffc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7a:	6a39      	ldr	r1, [r7, #32]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 f9ff 	bl	8002380 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00d      	beq.n	8001fa4 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d107      	bne.n	8001fa0 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e02b      	b.n	8001ffc <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d105      	bne.n	8001fb6 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001faa:	893b      	ldrh	r3, [r7, #8]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	611a      	str	r2, [r3, #16]
 8001fb4:	e021      	b.n	8001ffa <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fb6:	893b      	ldrh	r3, [r7, #8]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc6:	6a39      	ldr	r1, [r7, #32]
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f9d9 	bl	8002380 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00d      	beq.n	8001ff0 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d107      	bne.n	8001fec <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e005      	b.n	8001ffc <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ff0:	893b      	ldrh	r3, [r7, #8]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	00010002 	.word	0x00010002

08002008 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af02      	add	r7, sp, #8
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	4608      	mov	r0, r1
 8002012:	4611      	mov	r1, r2
 8002014:	461a      	mov	r2, r3
 8002016:	4603      	mov	r3, r0
 8002018:	817b      	strh	r3, [r7, #10]
 800201a:	460b      	mov	r3, r1
 800201c:	813b      	strh	r3, [r7, #8]
 800201e:	4613      	mov	r3, r2
 8002020:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002030:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002040:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	2200      	movs	r2, #0
 800204a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f8c0 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00c      	beq.n	8002074 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0a9      	b.n	80021c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002074:	897b      	ldrh	r3, [r7, #10]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002082:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	6a3a      	ldr	r2, [r7, #32]
 8002088:	4951      	ldr	r1, [pc, #324]	; (80021d0 <I2C_RequestMemoryRead+0x1c8>)
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f8f9 	bl	8002282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e096      	b.n	80021c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b2:	6a39      	ldr	r1, [r7, #32]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f963 	bl	8002380 <I2C_WaitOnTXEFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d107      	bne.n	80020d8 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e075      	b.n	80021c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d105      	bne.n	80020ee <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020e2:	893b      	ldrh	r3, [r7, #8]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	611a      	str	r2, [r3, #16]
 80020ec:	e021      	b.n	8002132 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020ee:	893b      	ldrh	r3, [r7, #8]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fe:	6a39      	ldr	r1, [r7, #32]
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f93d 	bl	8002380 <I2C_WaitOnTXEFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00d      	beq.n	8002128 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b04      	cmp	r3, #4
 8002112:	d107      	bne.n	8002124 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002122:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e04f      	b.n	80021c8 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002128:	893b      	ldrh	r3, [r7, #8]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002134:	6a39      	ldr	r1, [r7, #32]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f922 	bl	8002380 <I2C_WaitOnTXEFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00d      	beq.n	800215e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	2b04      	cmp	r3, #4
 8002148:	d107      	bne.n	800215a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002158:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e034      	b.n	80021c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800216c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	2200      	movs	r2, #0
 8002176:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f82a 	bl	80021d4 <I2C_WaitOnFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00c      	beq.n	80021a0 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800219a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e013      	b.n	80021c8 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021a0:	897b      	ldrh	r3, [r7, #10]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	6a3a      	ldr	r2, [r7, #32]
 80021b4:	4906      	ldr	r1, [pc, #24]	; (80021d0 <I2C_RequestMemoryRead+0x1c8>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f863 	bl	8002282 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	00010002 	.word	0x00010002

080021d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e4:	e025      	b.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d021      	beq.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ee:	f7fe ff39 	bl	8001064 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d302      	bcc.n	8002204 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d116      	bne.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f043 0220 	orr.w	r2, r3, #32
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e023      	b.n	800227a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d10d      	bne.n	8002258 <I2C_WaitOnFlagUntilTimeout+0x84>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4013      	ands	r3, r2
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	bf0c      	ite	eq
 800224e:	2301      	moveq	r3, #1
 8002250:	2300      	movne	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	e00c      	b.n	8002272 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	43da      	mvns	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4013      	ands	r3, r2
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf0c      	ite	eq
 800226a:	2301      	moveq	r3, #1
 800226c:	2300      	movne	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	461a      	mov	r2, r3
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	429a      	cmp	r2, r3
 8002276:	d0b6      	beq.n	80021e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002290:	e051      	b.n	8002336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a0:	d123      	bne.n	80022ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2220      	movs	r2, #32
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f043 0204 	orr.w	r2, r3, #4
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e046      	b.n	8002378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d021      	beq.n	8002336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f2:	f7fe feb7 	bl	8001064 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d302      	bcc.n	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d116      	bne.n	8002336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f043 0220 	orr.w	r2, r3, #32
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e020      	b.n	8002378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10c      	bne.n	800235a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4013      	ands	r3, r2
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	e00b      	b.n	8002372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	43da      	mvns	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4013      	ands	r3, r2
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d18d      	bne.n	8002292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800238c:	e02d      	b.n	80023ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f8ce 	bl	8002530 <I2C_IsAcknowledgeFailed>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e02d      	b.n	80023fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d021      	beq.n	80023ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a6:	f7fe fe5d 	bl	8001064 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d302      	bcc.n	80023bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d116      	bne.n	80023ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f043 0220 	orr.w	r2, r3, #32
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e007      	b.n	80023fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f4:	2b80      	cmp	r3, #128	; 0x80
 80023f6:	d1ca      	bne.n	800238e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800240e:	e02d      	b.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f88d 	bl	8002530 <I2C_IsAcknowledgeFailed>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e02d      	b.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002426:	d021      	beq.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002428:	f7fe fe1c 	bl	8001064 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	429a      	cmp	r2, r3
 8002436:	d302      	bcc.n	800243e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d116      	bne.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e007      	b.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b04      	cmp	r3, #4
 8002478:	d1ca      	bne.n	8002410 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002490:	e042      	b.n	8002518 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b10      	cmp	r3, #16
 800249e:	d119      	bne.n	80024d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0210 	mvn.w	r2, #16
 80024a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e029      	b.n	8002528 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d4:	f7fe fdc6 	bl	8001064 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d302      	bcc.n	80024ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d116      	bne.n	8002518 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f043 0220 	orr.w	r2, r3, #32
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e007      	b.n	8002528 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	2b40      	cmp	r3, #64	; 0x40
 8002524:	d1b5      	bne.n	8002492 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002546:	d11b      	bne.n	8002580 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002550:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f043 0204 	orr.w	r2, r3, #4
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800258e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002590:	b08f      	sub	sp, #60	; 0x3c
 8002592:	af0a      	add	r7, sp, #40	; 0x28
 8002594:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e10f      	b.n	80027c0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f005 f944 	bl	8007848 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2203      	movs	r2, #3
 80025c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f001 febb 	bl	800435a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	687e      	ldr	r6, [r7, #4]
 80025ec:	466d      	mov	r5, sp
 80025ee:	f106 0410 	add.w	r4, r6, #16
 80025f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002602:	1d33      	adds	r3, r6, #4
 8002604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002606:	6838      	ldr	r0, [r7, #0]
 8002608:	f001 fd92 	bl	8004130 <USB_CoreInit>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2202      	movs	r2, #2
 8002616:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0d0      	b.n	80027c0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f001 fea9 	bl	800437c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e04a      	b.n	80026c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	333d      	adds	r3, #61	; 0x3d
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	333c      	adds	r3, #60	; 0x3c
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	b298      	uxth	r0, r3
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	3342      	adds	r3, #66	; 0x42
 800266c:	4602      	mov	r2, r0
 800266e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	333f      	adds	r3, #63	; 0x3f
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	3344      	adds	r3, #68	; 0x44
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3348      	adds	r3, #72	; 0x48
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	3350      	adds	r3, #80	; 0x50
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	3301      	adds	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d3af      	bcc.n	8002630 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	e044      	b.n	8002760 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002718:	7bfa      	ldrb	r2, [r7, #15]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	3301      	adds	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	d3b5      	bcc.n	80026d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	687e      	ldr	r6, [r7, #4]
 8002772:	466d      	mov	r5, sp
 8002774:	f106 0410 	add.w	r4, r6, #16
 8002778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800277a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800277c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800277e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002780:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002784:	e885 0003 	stmia.w	r5, {r0, r1}
 8002788:	1d33      	adds	r3, r6, #4
 800278a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	f001 fe1f 	bl	80043d0 <USB_DevInit>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e00d      	b.n	80027c0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 fe5e 	bl	800547a <USB_DevDisconnect>

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_PCD_Start+0x1c>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e020      	b.n	8002826 <HAL_PCD_Start+0x5e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d109      	bne.n	8002808 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d005      	beq.n	8002808 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f002 fe1c 	bl	800544a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f001 fd8e 	bl	8004338 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800282e:	b590      	push	{r4, r7, lr}
 8002830:	b08d      	sub	sp, #52	; 0x34
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f002 fec3 	bl	80055d0 <USB_GetMode>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 839d 	bne.w	8002f8c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f002 fe27 	bl	80054aa <USB_ReadInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8393 	beq.w	8002f8a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f002 fe1e 	bl	80054aa <USB_ReadInterrupts>
 800286e:	4603      	mov	r3, r0
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b02      	cmp	r3, #2
 8002876:	d107      	bne.n	8002888 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f002 0202 	and.w	r2, r2, #2
 8002886:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f002 fe0c 	bl	80054aa <USB_ReadInterrupts>
 8002892:	4603      	mov	r3, r0
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b10      	cmp	r3, #16
 800289a:	d161      	bne.n	8002960 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0210 	bic.w	r2, r2, #16
 80028aa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f003 020f 	and.w	r2, r3, #15
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4413      	add	r3, r2
 80028c8:	3304      	adds	r3, #4
 80028ca:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	0c5b      	lsrs	r3, r3, #17
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d124      	bne.n	8002922 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d035      	beq.n	8002950 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	6a38      	ldr	r0, [r7, #32]
 80028f8:	f002 fc84 	bl	8005204 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002908:	441a      	add	r2, r3
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800291a:	441a      	add	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	619a      	str	r2, [r3, #24]
 8002920:	e016      	b.n	8002950 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	0c5b      	lsrs	r3, r3, #17
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	2b06      	cmp	r3, #6
 800292c:	d110      	bne.n	8002950 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002934:	2208      	movs	r2, #8
 8002936:	4619      	mov	r1, r3
 8002938:	6a38      	ldr	r0, [r7, #32]
 800293a:	f002 fc63 	bl	8005204 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800294a:	441a      	add	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0210 	orr.w	r2, r2, #16
 800295e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fda0 	bl	80054aa <USB_ReadInterrupts>
 800296a:	4603      	mov	r3, r0
 800296c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002970:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002974:	d16e      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fda6 	bl	80054d0 <USB_ReadDevAllOutEpInterrupt>
 8002984:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002986:	e062      	b.n	8002a4e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d057      	beq.n	8002a42 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f002 fdcb 	bl	8005538 <USB_ReadDevOutEPInterrupt>
 80029a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ba:	461a      	mov	r2, r3
 80029bc:	2301      	movs	r3, #1
 80029be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fdb0 	bl	8003528 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029de:	461a      	mov	r2, r3
 80029e0:	2308      	movs	r3, #8
 80029e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 feaa 	bl	8003740 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a02:	461a      	mov	r2, r3
 8002a04:	2310      	movs	r3, #16
 8002a06:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2320      	movs	r3, #32
 8002a22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a40:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	3301      	adds	r3, #1
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d199      	bne.n	8002988 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fd26 	bl	80054aa <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a68:	f040 80c0 	bne.w	8002bec <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 fd47 	bl	8005504 <USB_ReadDevAllInEpInterrupt>
 8002a76:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a7c:	e0b2      	b.n	8002be4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80a7 	beq.w	8002bd8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f002 fd6d 	bl	8005574 <USB_ReadDevInEPInterrupt>
 8002a9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d057      	beq.n	8002b56 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	2201      	movs	r2, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69f9      	ldr	r1, [r7, #28]
 8002ac2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2301      	movs	r3, #1
 8002ada:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d132      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3348      	adds	r3, #72	; 0x48
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4403      	add	r3, r0
 8002b04:	3344      	adds	r3, #68	; 0x44
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4419      	add	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4403      	add	r3, r0
 8002b18:	3348      	adds	r3, #72	; 0x48
 8002b1a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d113      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x31c>
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	3350      	adds	r3, #80	; 0x50
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d108      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b42:	461a      	mov	r2, r3
 8002b44:	2101      	movs	r1, #1
 8002b46:	f002 fd75 	bl	8005634 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f004 fefa 	bl	800794a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2308      	movs	r3, #8
 8002b70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2310      	movs	r3, #16
 8002b8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2340      	movs	r3, #64	; 0x40
 8002ba8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fc1b 	bl	800340e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	3301      	adds	r3, #1
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f47f af49 	bne.w	8002a7e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f002 fc5a 	bl	80054aa <USB_ReadInterrupts>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c00:	d122      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d108      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fe26 	bl	800387c <HAL_PCDEx_LPM_Callback>
 8002c30:	e002      	b.n	8002c38 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f004 fef6 	bl	8007a24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 fc2c 	bl	80054aa <USB_ReadInterrupts>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c5c:	d112      	bne.n	8002c84 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d102      	bne.n	8002c74 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f004 feb2 	bl	80079d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c82:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f002 fc0e 	bl	80054aa <USB_ReadInterrupts>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c98:	f040 80c7 	bne.w	8002e2a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2110      	movs	r1, #16
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 fcee 	bl	8004698 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc0:	e056      	b.n	8002d70 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cd4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce6:	0151      	lsls	r1, r2, #5
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	440a      	add	r2, r1
 8002cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cf4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d06:	0151      	lsls	r1, r2, #5
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	440a      	add	r2, r1
 8002d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d22:	461a      	mov	r2, r3
 8002d24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d3a:	0151      	lsls	r1, r2, #5
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	440a      	add	r2, r1
 8002d40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5a:	0151      	lsls	r1, r2, #5
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	440a      	add	r2, r1
 8002d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d3a3      	bcc.n	8002cc2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d016      	beq.n	8002dc4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002da6:	f043 030b 	orr.w	r3, r3, #11
 8002daa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dbc:	f043 030b 	orr.w	r3, r3, #11
 8002dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc2:	e015      	b.n	8002df0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dd6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002dda:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dea:	f043 030b 	orr.w	r3, r3, #11
 8002dee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dfe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e14:	461a      	mov	r2, r3
 8002e16:	f002 fc0d 	bl	8005634 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f002 fb3b 	bl	80054aa <USB_ReadInterrupts>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e3e:	d124      	bne.n	8002e8a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fbd1 	bl	80055ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f001 fc83 	bl	800475a <USB_GetDevSpeed>
 8002e54:	4603      	mov	r3, r0
 8002e56:	461a      	mov	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681c      	ldr	r4, [r3, #0]
 8002e60:	f001 f946 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 8002e64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f001 f9c0 	bl	80041f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f004 fd90 	bl	800799a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f002 fb0b 	bl	80054aa <USB_ReadInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f004 fd6d 	bl	800797e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f002 0208 	and.w	r2, r2, #8
 8002eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f002 faf6 	bl	80054aa <USB_ReadInterrupts>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ec8:	d10f      	bne.n	8002eea <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f004 fdc5 	bl	8007a64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ee8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f002 fadb 	bl	80054aa <USB_ReadInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002efe:	d10f      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	4619      	mov	r1, r3
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f004 fd98 	bl	8007a40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f002 fac0 	bl	80054aa <USB_ReadInterrupts>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d10a      	bne.n	8002f4c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f004 fda6 	bl	8007a88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f002 faaa 	bl	80054aa <USB_ReadInterrupts>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d115      	bne.n	8002f8c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f004 fd96 	bl	8007aa4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	e000      	b.n	8002f8c <HAL_PCD_IRQHandler+0x75e>
      return;
 8002f8a:	bf00      	nop
    }
  }
}
 8002f8c:	3734      	adds	r7, #52	; 0x34
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd90      	pop	{r4, r7, pc}

08002f92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_PCD_SetAddress+0x1a>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e013      	b.n	8002fd4 <HAL_PCD_SetAddress+0x42>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f002 fa1a 	bl	80053fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	4608      	mov	r0, r1
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	70fb      	strb	r3, [r7, #3]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	803b      	strh	r3, [r7, #0]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	da0f      	bge.n	8003022 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 020f 	and.w	r2, r3, #15
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	3338      	adds	r3, #56	; 0x38
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	3304      	adds	r3, #4
 8003018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	705a      	strb	r2, [r3, #1]
 8003020:	e00f      	b.n	8003042 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	f003 020f 	and.w	r2, r3, #15
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	3304      	adds	r3, #4
 800303a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	b2da      	uxtb	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800304e:	883a      	ldrh	r2, [r7, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	78ba      	ldrb	r2, [r7, #2]
 8003058:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	785b      	ldrb	r3, [r3, #1]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800306c:	78bb      	ldrb	r3, [r7, #2]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d102      	bne.n	8003078 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_PCD_EP_Open+0xaa>
 8003082:	2302      	movs	r3, #2
 8003084:	e00e      	b.n	80030a4 <HAL_PCD_EP_Open+0xc8>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68f9      	ldr	r1, [r7, #12]
 8003094:	4618      	mov	r0, r3
 8003096:	f001 fb85 	bl	80047a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80030a2:	7afb      	ldrb	r3, [r7, #11]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	da0f      	bge.n	80030e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	f003 020f 	and.w	r2, r3, #15
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	3338      	adds	r3, #56	; 0x38
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	4413      	add	r3, r2
 80030d4:	3304      	adds	r3, #4
 80030d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	705a      	strb	r2, [r3, #1]
 80030de:	e00f      	b.n	8003100 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 020f 	and.w	r2, r3, #15
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	3304      	adds	r3, #4
 80030f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_PCD_EP_Close+0x6e>
 8003116:	2302      	movs	r3, #2
 8003118:	e00e      	b.n	8003138 <HAL_PCD_EP_Close+0x8c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68f9      	ldr	r1, [r7, #12]
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fbc3 	bl	80048b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	460b      	mov	r3, r1
 800314e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003150:	7afb      	ldrb	r3, [r7, #11]
 8003152:	f003 020f 	and.w	r2, r3, #15
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	3304      	adds	r3, #4
 8003168:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2200      	movs	r2, #0
 8003180:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003182:	7afb      	ldrb	r3, [r7, #11]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	b2da      	uxtb	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d102      	bne.n	800319c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800319c:	7afb      	ldrb	r3, [r7, #11]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	f001 fe9e 	bl	8004ef4 <USB_EP0StartXfer>
 80031b8:	e008      	b.n	80031cc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	461a      	mov	r2, r3
 80031c6:	6979      	ldr	r1, [r7, #20]
 80031c8:	f001 fc50 	bl	8004a6c <USB_EPStartXfer>
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	f003 020f 	and.w	r2, r3, #15
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80031f8:	681b      	ldr	r3, [r3, #0]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	460b      	mov	r3, r1
 8003214:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003216:	7afb      	ldrb	r3, [r7, #11]
 8003218:	f003 020f 	and.w	r2, r3, #15
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	3338      	adds	r3, #56	; 0x38
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4413      	add	r3, r2
 800322a:	3304      	adds	r3, #4
 800322c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2201      	movs	r2, #1
 8003244:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003246:	7afb      	ldrb	r3, [r7, #11]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	b2da      	uxtb	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d102      	bne.n	8003260 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003260:	7afb      	ldrb	r3, [r7, #11]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	6979      	ldr	r1, [r7, #20]
 8003278:	f001 fe3c 	bl	8004ef4 <USB_EP0StartXfer>
 800327c:	e008      	b.n	8003290 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	6979      	ldr	r1, [r7, #20]
 800328c:	f001 fbee 	bl	8004a6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	f003 020f 	and.w	r2, r3, #15
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d901      	bls.n	80032b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e050      	b.n	800335a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da0f      	bge.n	80032e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 020f 	and.w	r2, r3, #15
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	3338      	adds	r3, #56	; 0x38
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	3304      	adds	r3, #4
 80032d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	705a      	strb	r2, [r3, #1]
 80032de:	e00d      	b.n	80032fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	3304      	adds	r3, #4
 80032f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_PCD_EP_SetStall+0x82>
 8003318:	2302      	movs	r3, #2
 800331a:	e01e      	b.n	800335a <HAL_PCD_EP_SetStall+0xc0>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68f9      	ldr	r1, [r7, #12]
 800332a:	4618      	mov	r0, r3
 800332c:	f001 ff93 	bl	8005256 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	b2d9      	uxtb	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800334a:	461a      	mov	r2, r3
 800334c:	f002 f972 	bl	8005634 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	f003 020f 	and.w	r2, r3, #15
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	d901      	bls.n	8003380 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e042      	b.n	8003406 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003384:	2b00      	cmp	r3, #0
 8003386:	da0f      	bge.n	80033a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	f003 020f 	and.w	r2, r3, #15
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	3338      	adds	r3, #56	; 0x38
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	3304      	adds	r3, #4
 800339e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	705a      	strb	r2, [r3, #1]
 80033a6:	e00f      	b.n	80033c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	f003 020f 	and.w	r2, r3, #15
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	3304      	adds	r3, #4
 80033c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_PCD_EP_ClrStall+0x86>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e00e      	b.n	8003406 <HAL_PCD_EP_ClrStall+0xa4>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68f9      	ldr	r1, [r7, #12]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 ff9b 	bl	8005332 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b08a      	sub	sp, #40	; 0x28
 8003412:	af02      	add	r7, sp, #8
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	3338      	adds	r3, #56	; 0x38
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	3304      	adds	r3, #4
 8003434:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	429a      	cmp	r2, r3
 8003440:	d901      	bls.n	8003446 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e06c      	b.n	8003520 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	429a      	cmp	r2, r3
 800345a:	d902      	bls.n	8003462 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3303      	adds	r3, #3
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800346a:	e02b      	b.n	80034c4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	429a      	cmp	r2, r3
 8003480:	d902      	bls.n	8003488 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	3303      	adds	r3, #3
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	68d9      	ldr	r1, [r3, #12]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	4603      	mov	r3, r0
 80034a6:	6978      	ldr	r0, [r7, #20]
 80034a8:	f001 fe77 	bl	800519a <USB_WritePacket>

    ep->xfer_buff  += len;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	441a      	add	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	699a      	ldr	r2, [r3, #24]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	441a      	add	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d809      	bhi.n	80034ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d203      	bcs.n	80034ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1be      	bne.n	800346c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d811      	bhi.n	800351e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	2201      	movs	r2, #1
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	43db      	mvns	r3, r3
 8003514:	6939      	ldr	r1, [r7, #16]
 8003516:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800351a:	4013      	ands	r3, r2
 800351c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3720      	adds	r7, #32
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	333c      	adds	r3, #60	; 0x3c
 8003540:	3304      	adds	r3, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b01      	cmp	r3, #1
 800355c:	f040 80a0 	bne.w	80036a0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d015      	beq.n	8003596 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a72      	ldr	r2, [pc, #456]	; (8003738 <PCD_EP_OutXfrComplete_int+0x210>)
 800356e:	4293      	cmp	r3, r2
 8003570:	f240 80dd 	bls.w	800372e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80d7 	beq.w	800372e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358c:	461a      	mov	r2, r3
 800358e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003592:	6093      	str	r3, [r2, #8]
 8003594:	e0cb      	b.n	800372e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d009      	beq.n	80035b4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ac:	461a      	mov	r2, r3
 80035ae:	2320      	movs	r3, #32
 80035b0:	6093      	str	r3, [r2, #8]
 80035b2:	e0bc      	b.n	800372e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f040 80b7 	bne.w	800372e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a5d      	ldr	r2, [pc, #372]	; (8003738 <PCD_EP_OutXfrComplete_int+0x210>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d90f      	bls.n	80035e8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035de:	461a      	mov	r2, r3
 80035e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035e4:	6093      	str	r3, [r2, #8]
 80035e6:	e0a2      	b.n	800372e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035fa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	0159      	lsls	r1, r3, #5
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	440b      	add	r3, r1
 8003604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800360e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4403      	add	r3, r0
 800361e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003622:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4403      	add	r3, r0
 8003646:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4419      	add	r1, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4403      	add	r3, r0
 800365c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003660:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d114      	bne.n	8003692 <PCD_EP_OutXfrComplete_int+0x16a>
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d108      	bne.n	8003692 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800368a:	461a      	mov	r2, r3
 800368c:	2101      	movs	r1, #1
 800368e:	f001 ffd1 	bl	8005634 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f004 f93b 	bl	8007914 <HAL_PCD_DataOutStageCallback>
 800369e:	e046      	b.n	800372e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a26      	ldr	r2, [pc, #152]	; (800373c <PCD_EP_OutXfrComplete_int+0x214>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d124      	bne.n	80036f2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036be:	461a      	mov	r2, r3
 80036c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036c4:	6093      	str	r3, [r2, #8]
 80036c6:	e032      	b.n	800372e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036de:	461a      	mov	r2, r3
 80036e0:	2320      	movs	r3, #32
 80036e2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f004 f912 	bl	8007914 <HAL_PCD_DataOutStageCallback>
 80036f0:	e01d      	b.n	800372e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d114      	bne.n	8003722 <PCD_EP_OutXfrComplete_int+0x1fa>
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d108      	bne.n	8003722 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800371a:	461a      	mov	r2, r3
 800371c:	2100      	movs	r1, #0
 800371e:	f001 ff89 	bl	8005634 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	4619      	mov	r1, r3
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f004 f8f3 	bl	8007914 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	4f54300a 	.word	0x4f54300a
 800373c:	4f54310a 	.word	0x4f54310a

08003740 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	333c      	adds	r3, #60	; 0x3c
 8003758:	3304      	adds	r3, #4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d90e      	bls.n	8003794 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378c:	461a      	mov	r2, r3
 800378e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003792:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f004 f8ab 	bl	80078f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d90c      	bls.n	80037bc <PCD_EP_OutSetupPacket_int+0x7c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d108      	bne.n	80037bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037b4:	461a      	mov	r2, r3
 80037b6:	2101      	movs	r1, #1
 80037b8:	f001 ff3c 	bl	8005634 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	4f54300a 	.word	0x4f54300a

080037cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	70fb      	strb	r3, [r7, #3]
 80037d8:	4613      	mov	r3, r2
 80037da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d107      	bne.n	80037fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80037ea:	883b      	ldrh	r3, [r7, #0]
 80037ec:	0419      	lsls	r1, r3, #16
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	629a      	str	r2, [r3, #40]	; 0x28
 80037f8:	e028      	b.n	800384c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	4413      	add	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003808:	2300      	movs	r3, #0
 800380a:	73fb      	strb	r3, [r7, #15]
 800380c:	e00d      	b.n	800382a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	3340      	adds	r3, #64	; 0x40
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	4413      	add	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	3301      	adds	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	3b01      	subs	r3, #1
 8003830:	429a      	cmp	r2, r3
 8003832:	d3ec      	bcc.n	800380e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003834:	883b      	ldrh	r3, [r7, #0]
 8003836:	0418      	lsls	r0, r3, #16
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6819      	ldr	r1, [r3, #0]
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	3b01      	subs	r3, #1
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	4302      	orrs	r2, r0
 8003844:	3340      	adds	r3, #64	; 0x40
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	460b      	mov	r3, r1
 8003864:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	887a      	ldrh	r2, [r7, #2]
 800386c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e25b      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d075      	beq.n	800399e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038b2:	4ba3      	ldr	r3, [pc, #652]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d00c      	beq.n	80038d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038be:	4ba0      	ldr	r3, [pc, #640]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d112      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ca:	4b9d      	ldr	r3, [pc, #628]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d6:	d10b      	bne.n	80038f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d8:	4b99      	ldr	r3, [pc, #612]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d05b      	beq.n	800399c <HAL_RCC_OscConfig+0x108>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d157      	bne.n	800399c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e236      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f8:	d106      	bne.n	8003908 <HAL_RCC_OscConfig+0x74>
 80038fa:	4b91      	ldr	r3, [pc, #580]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a90      	ldr	r2, [pc, #576]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e01d      	b.n	8003944 <HAL_RCC_OscConfig+0xb0>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x98>
 8003912:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a8a      	ldr	r2, [pc, #552]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b88      	ldr	r3, [pc, #544]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a87      	ldr	r2, [pc, #540]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e00b      	b.n	8003944 <HAL_RCC_OscConfig+0xb0>
 800392c:	4b84      	ldr	r3, [pc, #528]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a83      	ldr	r2, [pc, #524]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	4b81      	ldr	r3, [pc, #516]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a80      	ldr	r2, [pc, #512]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 800393e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fd fb8a 	bl	8001064 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003954:	f7fd fb86 	bl	8001064 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	; 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e1fb      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	4b76      	ldr	r3, [pc, #472]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0xc0>
 8003972:	e014      	b.n	800399e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fd fb76 	bl	8001064 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800397c:	f7fd fb72 	bl	8001064 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1e7      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398e:	4b6c      	ldr	r3, [pc, #432]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0xe8>
 800399a:	e000      	b.n	800399e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d063      	beq.n	8003a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039aa:	4b65      	ldr	r3, [pc, #404]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b6:	4b62      	ldr	r3, [pc, #392]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d11c      	bne.n	80039fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c2:	4b5f      	ldr	r3, [pc, #380]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d116      	bne.n	80039fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	4b5c      	ldr	r3, [pc, #368]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_RCC_OscConfig+0x152>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d001      	beq.n	80039e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e1bb      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e6:	4b56      	ldr	r3, [pc, #344]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4952      	ldr	r1, [pc, #328]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	e03a      	b.n	8003a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a04:	4b4f      	ldr	r3, [pc, #316]	; (8003b44 <HAL_RCC_OscConfig+0x2b0>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0a:	f7fd fb2b 	bl	8001064 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a12:	f7fd fb27 	bl	8001064 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e19c      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a24:	4b46      	ldr	r3, [pc, #280]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a30:	4b43      	ldr	r3, [pc, #268]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4940      	ldr	r1, [pc, #256]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]
 8003a44:	e015      	b.n	8003a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a46:	4b3f      	ldr	r3, [pc, #252]	; (8003b44 <HAL_RCC_OscConfig+0x2b0>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fd fb0a 	bl	8001064 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a54:	f7fd fb06 	bl	8001064 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e17b      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a66:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d030      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d016      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a86:	4b30      	ldr	r3, [pc, #192]	; (8003b48 <HAL_RCC_OscConfig+0x2b4>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fd faea 	bl	8001064 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a94:	f7fd fae6 	bl	8001064 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e15b      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa6:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x200>
 8003ab2:	e015      	b.n	8003ae0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab4:	4b24      	ldr	r3, [pc, #144]	; (8003b48 <HAL_RCC_OscConfig+0x2b4>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aba:	f7fd fad3 	bl	8001064 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac2:	f7fd facf 	bl	8001064 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e144      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80a0 	beq.w	8003c2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af2:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	4a0e      	ldr	r2, [pc, #56]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0e:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_OscConfig+0x2b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d121      	bne.n	8003b6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <HAL_RCC_OscConfig+0x2b8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a07      	ldr	r2, [pc, #28]	; (8003b4c <HAL_RCC_OscConfig+0x2b8>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b36:	f7fd fa95 	bl	8001064 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	e011      	b.n	8003b62 <HAL_RCC_OscConfig+0x2ce>
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800
 8003b44:	42470000 	.word	0x42470000
 8003b48:	42470e80 	.word	0x42470e80
 8003b4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b50:	f7fd fa88 	bl	8001064 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e0fd      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b62:	4b81      	ldr	r3, [pc, #516]	; (8003d68 <HAL_RCC_OscConfig+0x4d4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d106      	bne.n	8003b84 <HAL_RCC_OscConfig+0x2f0>
 8003b76:	4b7d      	ldr	r3, [pc, #500]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7a:	4a7c      	ldr	r2, [pc, #496]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6713      	str	r3, [r2, #112]	; 0x70
 8003b82:	e01c      	b.n	8003bbe <HAL_RCC_OscConfig+0x32a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d10c      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x312>
 8003b8c:	4b77      	ldr	r3, [pc, #476]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	4a76      	ldr	r2, [pc, #472]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003b92:	f043 0304 	orr.w	r3, r3, #4
 8003b96:	6713      	str	r3, [r2, #112]	; 0x70
 8003b98:	4b74      	ldr	r3, [pc, #464]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a73      	ldr	r2, [pc, #460]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba4:	e00b      	b.n	8003bbe <HAL_RCC_OscConfig+0x32a>
 8003ba6:	4b71      	ldr	r3, [pc, #452]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	4a70      	ldr	r2, [pc, #448]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb2:	4b6e      	ldr	r3, [pc, #440]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4a6d      	ldr	r2, [pc, #436]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003bb8:	f023 0304 	bic.w	r3, r3, #4
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d015      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc6:	f7fd fa4d 	bl	8001064 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bcc:	e00a      	b.n	8003be4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7fd fa49 	bl	8001064 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e0bc      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be4:	4b61      	ldr	r3, [pc, #388]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ee      	beq.n	8003bce <HAL_RCC_OscConfig+0x33a>
 8003bf0:	e014      	b.n	8003c1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf2:	f7fd fa37 	bl	8001064 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf8:	e00a      	b.n	8003c10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bfa:	f7fd fa33 	bl	8001064 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e0a6      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c10:	4b56      	ldr	r3, [pc, #344]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1ee      	bne.n	8003bfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c1c:	7dfb      	ldrb	r3, [r7, #23]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d105      	bne.n	8003c2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c22:	4b52      	ldr	r3, [pc, #328]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	4a51      	ldr	r2, [pc, #324]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8092 	beq.w	8003d5c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c38:	4b4c      	ldr	r3, [pc, #304]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 030c 	and.w	r3, r3, #12
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d05c      	beq.n	8003cfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d141      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4c:	4b48      	ldr	r3, [pc, #288]	; (8003d70 <HAL_RCC_OscConfig+0x4dc>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c52:	f7fd fa07 	bl	8001064 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fd fa03 	bl	8001064 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e078      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6c:	4b3f      	ldr	r3, [pc, #252]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	019b      	lsls	r3, r3, #6
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	085b      	lsrs	r3, r3, #1
 8003c90:	3b01      	subs	r3, #1
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	061b      	lsls	r3, r3, #24
 8003c9c:	4933      	ldr	r1, [pc, #204]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca2:	4b33      	ldr	r3, [pc, #204]	; (8003d70 <HAL_RCC_OscConfig+0x4dc>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fd f9dc 	bl	8001064 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd f9d8 	bl	8001064 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e04d      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc2:	4b2a      	ldr	r3, [pc, #168]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x41c>
 8003cce:	e045      	b.n	8003d5c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <HAL_RCC_OscConfig+0x4dc>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd6:	f7fd f9c5 	bl	8001064 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fd f9c1 	bl	8001064 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e036      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf0:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCC_OscConfig+0x44a>
 8003cfc:	e02e      	b.n	8003d5c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e029      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d0a:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <HAL_RCC_OscConfig+0x4d8>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d11c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d115      	bne.n	8003d58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d32:	4013      	ands	r3, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d10d      	bne.n	8003d58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d106      	bne.n	8003d58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	42470060 	.word	0x42470060

08003d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0cc      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d88:	4b68      	ldr	r3, [pc, #416]	; (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d90c      	bls.n	8003db0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b65      	ldr	r3, [pc, #404]	; (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b63      	ldr	r3, [pc, #396]	; (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0b8      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d020      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dc8:	4b59      	ldr	r3, [pc, #356]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	4a58      	ldr	r2, [pc, #352]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de0:	4b53      	ldr	r3, [pc, #332]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4a52      	ldr	r2, [pc, #328]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dec:	4b50      	ldr	r3, [pc, #320]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	494d      	ldr	r1, [pc, #308]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d044      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d119      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e07f      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d107      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e32:	4b3f      	ldr	r3, [pc, #252]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e06f      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e42:	4b3b      	ldr	r3, [pc, #236]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e067      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e52:	4b37      	ldr	r3, [pc, #220]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f023 0203 	bic.w	r2, r3, #3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4934      	ldr	r1, [pc, #208]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e64:	f7fd f8fe 	bl	8001064 <HAL_GetTick>
 8003e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e6c:	f7fd f8fa 	bl	8001064 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e04f      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e82:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 020c 	and.w	r2, r3, #12
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d1eb      	bne.n	8003e6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e94:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d20c      	bcs.n	8003ebc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b22      	ldr	r3, [pc, #136]	; (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e032      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4916      	ldr	r1, [pc, #88]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	490e      	ldr	r1, [pc, #56]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003efa:	f000 f821 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8003efe:	4601      	mov	r1, r0
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <HAL_RCC_ClockConfig+0x1c0>)
 8003f0c:	5cd3      	ldrb	r3, [r2, r3]
 8003f0e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f12:	4a09      	ldr	r2, [pc, #36]	; (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd f85e 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023c00 	.word	0x40023c00
 8003f30:	40023800 	.word	0x40023800
 8003f34:	0800c550 	.word	0x0800c550
 8003f38:	20000118 	.word	0x20000118
 8003f3c:	20000000 	.word	0x20000000

08003f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f56:	4b63      	ldr	r3, [pc, #396]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d007      	beq.n	8003f72 <HAL_RCC_GetSysClockFreq+0x32>
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d008      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x38>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f040 80b4 	bne.w	80040d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f6c:	4b5e      	ldr	r3, [pc, #376]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f6e:	60bb      	str	r3, [r7, #8]
       break;
 8003f70:	e0b3      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f72:	4b5e      	ldr	r3, [pc, #376]	; (80040ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f74:	60bb      	str	r3, [r7, #8]
      break;
 8003f76:	e0b0      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f78:	4b5a      	ldr	r3, [pc, #360]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f82:	4b58      	ldr	r3, [pc, #352]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d04a      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8e:	4b55      	ldr	r3, [pc, #340]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	099b      	lsrs	r3, r3, #6
 8003f94:	f04f 0400 	mov.w	r4, #0
 8003f98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	ea03 0501 	and.w	r5, r3, r1
 8003fa4:	ea04 0602 	and.w	r6, r4, r2
 8003fa8:	4629      	mov	r1, r5
 8003faa:	4632      	mov	r2, r6
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	f04f 0400 	mov.w	r4, #0
 8003fb4:	0154      	lsls	r4, r2, #5
 8003fb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003fba:	014b      	lsls	r3, r1, #5
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	1b49      	subs	r1, r1, r5
 8003fc2:	eb62 0206 	sbc.w	r2, r2, r6
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	f04f 0400 	mov.w	r4, #0
 8003fce:	0194      	lsls	r4, r2, #6
 8003fd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fd4:	018b      	lsls	r3, r1, #6
 8003fd6:	1a5b      	subs	r3, r3, r1
 8003fd8:	eb64 0402 	sbc.w	r4, r4, r2
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	00e2      	lsls	r2, r4, #3
 8003fe6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fea:	00d9      	lsls	r1, r3, #3
 8003fec:	460b      	mov	r3, r1
 8003fee:	4614      	mov	r4, r2
 8003ff0:	195b      	adds	r3, r3, r5
 8003ff2:	eb44 0406 	adc.w	r4, r4, r6
 8003ff6:	f04f 0100 	mov.w	r1, #0
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	0262      	lsls	r2, r4, #9
 8004000:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004004:	0259      	lsls	r1, r3, #9
 8004006:	460b      	mov	r3, r1
 8004008:	4614      	mov	r4, r2
 800400a:	4618      	mov	r0, r3
 800400c:	4621      	mov	r1, r4
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f04f 0400 	mov.w	r4, #0
 8004014:	461a      	mov	r2, r3
 8004016:	4623      	mov	r3, r4
 8004018:	f7fc fe3e 	bl	8000c98 <__aeabi_uldivmod>
 800401c:	4603      	mov	r3, r0
 800401e:	460c      	mov	r4, r1
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	e049      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004024:	4b2f      	ldr	r3, [pc, #188]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	099b      	lsrs	r3, r3, #6
 800402a:	f04f 0400 	mov.w	r4, #0
 800402e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	ea03 0501 	and.w	r5, r3, r1
 800403a:	ea04 0602 	and.w	r6, r4, r2
 800403e:	4629      	mov	r1, r5
 8004040:	4632      	mov	r2, r6
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	f04f 0400 	mov.w	r4, #0
 800404a:	0154      	lsls	r4, r2, #5
 800404c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004050:	014b      	lsls	r3, r1, #5
 8004052:	4619      	mov	r1, r3
 8004054:	4622      	mov	r2, r4
 8004056:	1b49      	subs	r1, r1, r5
 8004058:	eb62 0206 	sbc.w	r2, r2, r6
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	f04f 0400 	mov.w	r4, #0
 8004064:	0194      	lsls	r4, r2, #6
 8004066:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800406a:	018b      	lsls	r3, r1, #6
 800406c:	1a5b      	subs	r3, r3, r1
 800406e:	eb64 0402 	sbc.w	r4, r4, r2
 8004072:	f04f 0100 	mov.w	r1, #0
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	00e2      	lsls	r2, r4, #3
 800407c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004080:	00d9      	lsls	r1, r3, #3
 8004082:	460b      	mov	r3, r1
 8004084:	4614      	mov	r4, r2
 8004086:	195b      	adds	r3, r3, r5
 8004088:	eb44 0406 	adc.w	r4, r4, r6
 800408c:	f04f 0100 	mov.w	r1, #0
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	02a2      	lsls	r2, r4, #10
 8004096:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800409a:	0299      	lsls	r1, r3, #10
 800409c:	460b      	mov	r3, r1
 800409e:	4614      	mov	r4, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	4621      	mov	r1, r4
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f04f 0400 	mov.w	r4, #0
 80040aa:	461a      	mov	r2, r3
 80040ac:	4623      	mov	r3, r4
 80040ae:	f7fc fdf3 	bl	8000c98 <__aeabi_uldivmod>
 80040b2:	4603      	mov	r3, r0
 80040b4:	460c      	mov	r4, r1
 80040b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	3301      	adds	r3, #1
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	60bb      	str	r3, [r7, #8]
      break;
 80040d2:	e002      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040d6:	60bb      	str	r3, [r7, #8]
      break;
 80040d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040da:	68bb      	ldr	r3, [r7, #8]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e4:	40023800 	.word	0x40023800
 80040e8:	00f42400 	.word	0x00f42400
 80040ec:	007a1200 	.word	0x007a1200

080040f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <HAL_RCC_GetHCLKFreq+0x14>)
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000118 	.word	0x20000118

08004108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800410c:	f7ff fff0 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 8004110:	4601      	mov	r1, r0
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	0a9b      	lsrs	r3, r3, #10
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4a03      	ldr	r2, [pc, #12]	; (800412c <HAL_RCC_GetPCLK1Freq+0x24>)
 800411e:	5cd3      	ldrb	r3, [r2, r3]
 8004120:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40023800 	.word	0x40023800
 800412c:	0800c560 	.word	0x0800c560

08004130 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004130:	b084      	sub	sp, #16
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	f107 001c 	add.w	r0, r7, #28
 800413e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	2b01      	cmp	r3, #1
 8004146:	d122      	bne.n	800418e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800415c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004172:	2b01      	cmp	r3, #1
 8004174:	d105      	bne.n	8004182 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f001 fab4 	bl	80056f0 <USB_CoreReset>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]
 800418c:	e01a      	b.n	80041c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f001 faa8 	bl	80056f0 <USB_CoreReset>
 80041a0:	4603      	mov	r3, r0
 80041a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80041a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38
 80041b6:	e005      	b.n	80041c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d10b      	bne.n	80041e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f043 0206 	orr.w	r2, r3, #6
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f043 0220 	orr.w	r2, r3, #32
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041ee:	b004      	add	sp, #16
 80041f0:	4770      	bx	lr
	...

080041f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	4613      	mov	r3, r2
 8004200:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d165      	bne.n	80042d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4a41      	ldr	r2, [pc, #260]	; (8004310 <USB_SetTurnaroundTime+0x11c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d906      	bls.n	800421e <USB_SetTurnaroundTime+0x2a>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4a40      	ldr	r2, [pc, #256]	; (8004314 <USB_SetTurnaroundTime+0x120>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d802      	bhi.n	800421e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004218:	230f      	movs	r3, #15
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e062      	b.n	80042e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4a3c      	ldr	r2, [pc, #240]	; (8004314 <USB_SetTurnaroundTime+0x120>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d906      	bls.n	8004234 <USB_SetTurnaroundTime+0x40>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4a3b      	ldr	r2, [pc, #236]	; (8004318 <USB_SetTurnaroundTime+0x124>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d802      	bhi.n	8004234 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800422e:	230e      	movs	r3, #14
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e057      	b.n	80042e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4a38      	ldr	r2, [pc, #224]	; (8004318 <USB_SetTurnaroundTime+0x124>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d906      	bls.n	800424a <USB_SetTurnaroundTime+0x56>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4a37      	ldr	r2, [pc, #220]	; (800431c <USB_SetTurnaroundTime+0x128>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d802      	bhi.n	800424a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004244:	230d      	movs	r3, #13
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e04c      	b.n	80042e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4a33      	ldr	r2, [pc, #204]	; (800431c <USB_SetTurnaroundTime+0x128>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d906      	bls.n	8004260 <USB_SetTurnaroundTime+0x6c>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4a32      	ldr	r2, [pc, #200]	; (8004320 <USB_SetTurnaroundTime+0x12c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d802      	bhi.n	8004260 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800425a:	230c      	movs	r3, #12
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	e041      	b.n	80042e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4a2f      	ldr	r2, [pc, #188]	; (8004320 <USB_SetTurnaroundTime+0x12c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d906      	bls.n	8004276 <USB_SetTurnaroundTime+0x82>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4a2e      	ldr	r2, [pc, #184]	; (8004324 <USB_SetTurnaroundTime+0x130>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d802      	bhi.n	8004276 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004270:	230b      	movs	r3, #11
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	e036      	b.n	80042e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4a2a      	ldr	r2, [pc, #168]	; (8004324 <USB_SetTurnaroundTime+0x130>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d906      	bls.n	800428c <USB_SetTurnaroundTime+0x98>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4a29      	ldr	r2, [pc, #164]	; (8004328 <USB_SetTurnaroundTime+0x134>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d802      	bhi.n	800428c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004286:	230a      	movs	r3, #10
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	e02b      	b.n	80042e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4a26      	ldr	r2, [pc, #152]	; (8004328 <USB_SetTurnaroundTime+0x134>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d906      	bls.n	80042a2 <USB_SetTurnaroundTime+0xae>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4a25      	ldr	r2, [pc, #148]	; (800432c <USB_SetTurnaroundTime+0x138>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d802      	bhi.n	80042a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800429c:	2309      	movs	r3, #9
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	e020      	b.n	80042e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4a21      	ldr	r2, [pc, #132]	; (800432c <USB_SetTurnaroundTime+0x138>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d906      	bls.n	80042b8 <USB_SetTurnaroundTime+0xc4>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4a20      	ldr	r2, [pc, #128]	; (8004330 <USB_SetTurnaroundTime+0x13c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d802      	bhi.n	80042b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80042b2:	2308      	movs	r3, #8
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	e015      	b.n	80042e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <USB_SetTurnaroundTime+0x13c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d906      	bls.n	80042ce <USB_SetTurnaroundTime+0xda>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4a1c      	ldr	r2, [pc, #112]	; (8004334 <USB_SetTurnaroundTime+0x140>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d802      	bhi.n	80042ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80042c8:	2307      	movs	r3, #7
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e00a      	b.n	80042e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042ce:	2306      	movs	r3, #6
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e007      	b.n	80042e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042da:	2309      	movs	r3, #9
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	e001      	b.n	80042e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042e0:	2309      	movs	r3, #9
 80042e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	029b      	lsls	r3, r3, #10
 80042f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80042fc:	431a      	orrs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	00d8acbf 	.word	0x00d8acbf
 8004314:	00e4e1bf 	.word	0x00e4e1bf
 8004318:	00f423ff 	.word	0x00f423ff
 800431c:	0106737f 	.word	0x0106737f
 8004320:	011a499f 	.word	0x011a499f
 8004324:	01312cff 	.word	0x01312cff
 8004328:	014ca43f 	.word	0x014ca43f
 800432c:	016e35ff 	.word	0x016e35ff
 8004330:	01a6ab1f 	.word	0x01a6ab1f
 8004334:	01e847ff 	.word	0x01e847ff

08004338 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f043 0201 	orr.w	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 0201 	bic.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d106      	bne.n	80043a8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	60da      	str	r2, [r3, #12]
 80043a6:	e00b      	b.n	80043c0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	60da      	str	r2, [r3, #12]
 80043ba:	e001      	b.n	80043c0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e003      	b.n	80043c8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80043c0:	2032      	movs	r0, #50	; 0x32
 80043c2:	f7fc fe5b 	bl	800107c <HAL_Delay>

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043d0:	b084      	sub	sp, #16
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043ea:	2300      	movs	r3, #0
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	e009      	b.n	8004404 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	3340      	adds	r3, #64	; 0x40
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	2200      	movs	r2, #0
 80043fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	3301      	adds	r3, #1
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b0e      	cmp	r3, #14
 8004408:	d9f2      	bls.n	80043f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800440a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d11c      	bne.n	800444a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800441e:	f043 0302 	orr.w	r3, r3, #2
 8004422:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
 8004448:	e00b      	b.n	8004462 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004468:	461a      	mov	r2, r3
 800446a:	2300      	movs	r3, #0
 800446c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004474:	4619      	mov	r1, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447c:	461a      	mov	r2, r3
 800447e:	680b      	ldr	r3, [r1, #0]
 8004480:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10c      	bne.n	80044a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d104      	bne.n	8004498 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800448e:	2100      	movs	r1, #0
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f949 	bl	8004728 <USB_SetDevSpeed>
 8004496:	e008      	b.n	80044aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004498:	2101      	movs	r1, #1
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f944 	bl	8004728 <USB_SetDevSpeed>
 80044a0:	e003      	b.n	80044aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044a2:	2103      	movs	r1, #3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f93f 	bl	8004728 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044aa:	2110      	movs	r1, #16
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f8f3 	bl	8004698 <USB_FlushTxFifo>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f911 	bl	80046e4 <USB_FlushRxFifo>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d2:	461a      	mov	r2, r3
 80044d4:	2300      	movs	r3, #0
 80044d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044de:	461a      	mov	r2, r3
 80044e0:	2300      	movs	r3, #0
 80044e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	461a      	mov	r2, r3
 80044ec:	2300      	movs	r3, #0
 80044ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044f0:	2300      	movs	r3, #0
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	e043      	b.n	800457e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004508:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800450c:	d118      	bne.n	8004540 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004520:	461a      	mov	r2, r3
 8004522:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	e013      	b.n	8004552 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004536:	461a      	mov	r2, r3
 8004538:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e008      	b.n	8004552 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454c:	461a      	mov	r2, r3
 800454e:	2300      	movs	r3, #0
 8004550:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455e:	461a      	mov	r2, r3
 8004560:	2300      	movs	r3, #0
 8004562:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004570:	461a      	mov	r2, r3
 8004572:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004576:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	3301      	adds	r3, #1
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	429a      	cmp	r2, r3
 8004584:	d3b7      	bcc.n	80044f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	e043      	b.n	8004614 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800459e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045a2:	d118      	bne.n	80045d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b6:	461a      	mov	r2, r3
 80045b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e013      	b.n	80045e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045cc:	461a      	mov	r2, r3
 80045ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	e008      	b.n	80045e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	461a      	mov	r2, r3
 80045e4:	2300      	movs	r3, #0
 80045e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	461a      	mov	r2, r3
 80045f6:	2300      	movs	r3, #0
 80045f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004606:	461a      	mov	r2, r3
 8004608:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800460c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	3301      	adds	r3, #1
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	429a      	cmp	r2, r3
 800461a:	d3b7      	bcc.n	800458c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800462a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800462e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800463c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	2b00      	cmp	r3, #0
 8004642:	d105      	bne.n	8004650 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f043 0210 	orr.w	r2, r3, #16
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699a      	ldr	r2, [r3, #24]
 8004654:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <USB_DevInit+0x2c4>)
 8004656:	4313      	orrs	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800465c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f043 0208 	orr.w	r2, r3, #8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800466e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d107      	bne.n	8004684 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800467c:	f043 0304 	orr.w	r3, r3, #4
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004684:	7dfb      	ldrb	r3, [r7, #23]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004690:	b004      	add	sp, #16
 8004692:	4770      	bx	lr
 8004694:	803c3800 	.word	0x803c3800

08004698 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	f043 0220 	orr.w	r2, r3, #32
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3301      	adds	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a09      	ldr	r2, [pc, #36]	; (80046e0 <USB_FlushTxFifo+0x48>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d901      	bls.n	80046c4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e006      	b.n	80046d2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d0f0      	beq.n	80046b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	00030d40 	.word	0x00030d40

080046e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2210      	movs	r2, #16
 80046f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3301      	adds	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a09      	ldr	r2, [pc, #36]	; (8004724 <USB_FlushRxFifo+0x40>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d901      	bls.n	8004708 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e006      	b.n	8004716 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b10      	cmp	r3, #16
 8004712:	d0f0      	beq.n	80046f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	00030d40 	.word	0x00030d40

08004728 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004748:	4313      	orrs	r3, r2
 800474a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800475a:	b480      	push	{r7}
 800475c:	b087      	sub	sp, #28
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0306 	and.w	r3, r3, #6
 8004772:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d102      	bne.n	8004780 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]
 800477e:	e00a      	b.n	8004796 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d002      	beq.n	800478c <USB_GetDevSpeed+0x32>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b06      	cmp	r3, #6
 800478a:	d102      	bne.n	8004792 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800478c:	2302      	movs	r3, #2
 800478e:	75fb      	strb	r3, [r7, #23]
 8004790:	e001      	b.n	8004796 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004792:	230f      	movs	r3, #15
 8004794:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004796:	7dfb      	ldrb	r3, [r7, #23]
}
 8004798:	4618      	mov	r0, r3
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	785b      	ldrb	r3, [r3, #1]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d13a      	bne.n	8004836 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	2101      	movs	r1, #1
 80047d2:	fa01 f303 	lsl.w	r3, r1, r3
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	68f9      	ldr	r1, [r7, #12]
 80047da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047de:	4313      	orrs	r3, r2
 80047e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d155      	bne.n	80048a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	78db      	ldrb	r3, [r3, #3]
 8004812:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004814:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	059b      	lsls	r3, r3, #22
 800481a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800481c:	4313      	orrs	r3, r2
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	e036      	b.n	80048a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	2101      	movs	r1, #1
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	68f9      	ldr	r1, [r7, #12]
 8004850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004854:	4313      	orrs	r3, r2
 8004856:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d11a      	bne.n	80048a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	78db      	ldrb	r3, [r3, #3]
 8004888:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800488a:	430b      	orrs	r3, r1
 800488c:	4313      	orrs	r3, r2
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800489a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d161      	bne.n	8004994 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048e6:	d11f      	bne.n	8004928 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	0151      	lsls	r1, r2, #5
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	440a      	add	r2, r1
 80048fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004902:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004906:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004922:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004926:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	2101      	movs	r1, #1
 800493a:	fa01 f303 	lsl.w	r3, r1, r3
 800493e:	b29b      	uxth	r3, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	68f9      	ldr	r1, [r7, #12]
 8004944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004948:	4013      	ands	r3, r2
 800494a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	b29b      	uxth	r3, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	68f9      	ldr	r1, [r7, #12]
 8004968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800496c:	4013      	ands	r3, r2
 800496e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	0159      	lsls	r1, r3, #5
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	440b      	add	r3, r1
 8004986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498a:	4619      	mov	r1, r3
 800498c:	4b35      	ldr	r3, [pc, #212]	; (8004a64 <USB_DeactivateEndpoint+0x1b0>)
 800498e:	4013      	ands	r3, r2
 8004990:	600b      	str	r3, [r1, #0]
 8004992:	e060      	b.n	8004a56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049aa:	d11f      	bne.n	80049ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	0151      	lsls	r1, r2, #5
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	440a      	add	r2, r1
 80049c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	0151      	lsls	r1, r2, #5
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	440a      	add	r2, r1
 80049e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	2101      	movs	r1, #1
 80049fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004a02:	041b      	lsls	r3, r3, #16
 8004a04:	43db      	mvns	r3, r3
 8004a06:	68f9      	ldr	r1, [r7, #12]
 8004a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a16:	69da      	ldr	r2, [r3, #28]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	2101      	movs	r1, #1
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a30:	4013      	ands	r3, r2
 8004a32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	0159      	lsls	r1, r3, #5
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	440b      	add	r3, r1
 8004a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <USB_DeactivateEndpoint+0x1b4>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	ec337800 	.word	0xec337800
 8004a68:	eff37800 	.word	0xeff37800

08004a6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	; 0x28
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	785b      	ldrb	r3, [r3, #1]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	f040 815c 	bne.w	8004d46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d132      	bne.n	8004afc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	0151      	lsls	r1, r2, #5
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	440a      	add	r2, r1
 8004aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ab4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ab8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ad8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af4:	0cdb      	lsrs	r3, r3, #19
 8004af6:	04db      	lsls	r3, r3, #19
 8004af8:	6113      	str	r3, [r2, #16]
 8004afa:	e074      	b.n	8004be6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b16:	0cdb      	lsrs	r3, r3, #19
 8004b18:	04db      	lsls	r3, r3, #19
 8004b1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	0151      	lsls	r1, r2, #5
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	440a      	add	r2, r1
 8004b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	6959      	ldr	r1, [r3, #20]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	440b      	add	r3, r1
 8004b58:	1e59      	subs	r1, r3, #1
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b62:	04d9      	lsls	r1, r3, #19
 8004b64:	4b9d      	ldr	r3, [pc, #628]	; (8004ddc <USB_EPStartXfer+0x370>)
 8004b66:	400b      	ands	r3, r1
 8004b68:	69b9      	ldr	r1, [r7, #24]
 8004b6a:	0148      	lsls	r0, r1, #5
 8004b6c:	69f9      	ldr	r1, [r7, #28]
 8004b6e:	4401      	add	r1, r0
 8004b70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b74:	4313      	orrs	r3, r2
 8004b76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8e:	69b9      	ldr	r1, [r7, #24]
 8004b90:	0148      	lsls	r0, r1, #5
 8004b92:	69f9      	ldr	r1, [r7, #28]
 8004b94:	4401      	add	r1, r0
 8004b96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	78db      	ldrb	r3, [r3, #3]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d11f      	bne.n	8004be6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004bc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004be4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d14b      	bne.n	8004c84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	461a      	mov	r2, r3
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	78db      	ldrb	r3, [r3, #3]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d128      	bne.n	8004c62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d110      	bne.n	8004c42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	e00f      	b.n	8004c62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e12f      	b.n	8004ee4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ca2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	78db      	ldrb	r3, [r3, #3]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d015      	beq.n	8004cd8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8117 	beq.w	8004ee4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ccc:	69f9      	ldr	r1, [r7, #28]
 8004cce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	634b      	str	r3, [r1, #52]	; 0x34
 8004cd6:	e105      	b.n	8004ee4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d110      	bne.n	8004d0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	e00f      	b.n	8004d2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	68d9      	ldr	r1, [r3, #12]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	781a      	ldrb	r2, [r3, #0]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	b298      	uxth	r0, r3
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fa2b 	bl	800519a <USB_WritePacket>
 8004d44:	e0ce      	b.n	8004ee4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	0151      	lsls	r1, r2, #5
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	440a      	add	r2, r1
 8004d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d60:	0cdb      	lsrs	r3, r3, #19
 8004d62:	04db      	lsls	r3, r3, #19
 8004d64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d126      	bne.n	8004de0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da8:	69b9      	ldr	r1, [r7, #24]
 8004daa:	0148      	lsls	r0, r1, #5
 8004dac:	69f9      	ldr	r1, [r7, #28]
 8004dae:	4401      	add	r1, r0
 8004db0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004db4:	4313      	orrs	r3, r2
 8004db6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dd6:	6113      	str	r3, [r2, #16]
 8004dd8:	e036      	b.n	8004e48 <USB_EPStartXfer+0x3dc>
 8004dda:	bf00      	nop
 8004ddc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4413      	add	r3, r2
 8004dea:	1e5a      	subs	r2, r3, #1
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	8afb      	ldrh	r3, [r7, #22]
 8004e06:	04d9      	lsls	r1, r3, #19
 8004e08:	4b39      	ldr	r3, [pc, #228]	; (8004ef0 <USB_EPStartXfer+0x484>)
 8004e0a:	400b      	ands	r3, r1
 8004e0c:	69b9      	ldr	r1, [r7, #24]
 8004e0e:	0148      	lsls	r0, r1, #5
 8004e10:	69f9      	ldr	r1, [r7, #28]
 8004e12:	4401      	add	r1, r0
 8004e14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	8af9      	ldrh	r1, [r7, #22]
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e38:	69b9      	ldr	r1, [r7, #24]
 8004e3a:	0148      	lsls	r0, r1, #5
 8004e3c:	69f9      	ldr	r1, [r7, #28]
 8004e3e:	4401      	add	r1, r0
 8004e40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e44:	4313      	orrs	r3, r2
 8004e46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d10d      	bne.n	8004e6a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	68d9      	ldr	r1, [r3, #12]
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	460a      	mov	r2, r1
 8004e68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	78db      	ldrb	r3, [r3, #3]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d128      	bne.n	8004ec4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d110      	bne.n	8004ea4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	0151      	lsls	r1, r2, #5
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	440a      	add	r2, r1
 8004e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e00f      	b.n	8004ec4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ede:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ee2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	1ff80000 	.word	0x1ff80000

08004ef4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	f040 80cd 	bne.w	80050b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d132      	bne.n	8004f84 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	0151      	lsls	r1, r2, #5
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	440a      	add	r2, r1
 8004f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	0151      	lsls	r1, r2, #5
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	440a      	add	r2, r1
 8004f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7c:	0cdb      	lsrs	r3, r3, #19
 8004f7e:	04db      	lsls	r3, r3, #19
 8004f80:	6113      	str	r3, [r2, #16]
 8004f82:	e04e      	b.n	8005022 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	0151      	lsls	r1, r2, #5
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	440a      	add	r2, r1
 8004f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9e:	0cdb      	lsrs	r3, r3, #19
 8004fa0:	04db      	lsls	r3, r3, #19
 8004fa2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	0151      	lsls	r1, r2, #5
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	440a      	add	r2, r1
 8004fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fc6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	695a      	ldr	r2, [r3, #20]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d903      	bls.n	8004fdc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005008:	691a      	ldr	r2, [r3, #16]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005012:	6939      	ldr	r1, [r7, #16]
 8005014:	0148      	lsls	r0, r1, #5
 8005016:	6979      	ldr	r1, [r7, #20]
 8005018:	4401      	add	r1, r0
 800501a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800501e:	4313      	orrs	r3, r2
 8005020:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d11e      	bne.n	8005066 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d009      	beq.n	8005044 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503c:	461a      	mov	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	440a      	add	r2, r1
 800505a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e092      	b.n	800518c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	440a      	add	r2, r1
 800507c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005080:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005084:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d07e      	beq.n	800518c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	2101      	movs	r1, #1
 80050a0:	fa01 f303 	lsl.w	r3, r1, r3
 80050a4:	6979      	ldr	r1, [r7, #20]
 80050a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050aa:	4313      	orrs	r3, r2
 80050ac:	634b      	str	r3, [r1, #52]	; 0x34
 80050ae:	e06d      	b.n	800518c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ca:	0cdb      	lsrs	r3, r3, #19
 80050cc:	04db      	lsls	r3, r3, #19
 80050ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050f2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800511e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005122:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800513a:	6939      	ldr	r1, [r7, #16]
 800513c:	0148      	lsls	r0, r1, #5
 800513e:	6979      	ldr	r1, [r7, #20]
 8005140:	4401      	add	r1, r0
 8005142:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005146:	4313      	orrs	r3, r2
 8005148:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d10d      	bne.n	800516c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d009      	beq.n	800516c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	68d9      	ldr	r1, [r3, #12]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	460a      	mov	r2, r1
 800516a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	0151      	lsls	r1, r2, #5
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	440a      	add	r2, r1
 8005182:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005186:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800518a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800519a:	b480      	push	{r7}
 800519c:	b089      	sub	sp, #36	; 0x24
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	4611      	mov	r1, r2
 80051a6:	461a      	mov	r2, r3
 80051a8:	460b      	mov	r3, r1
 80051aa:	71fb      	strb	r3, [r7, #7]
 80051ac:	4613      	mov	r3, r2
 80051ae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80051b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d11a      	bne.n	80051f6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051c0:	88bb      	ldrh	r3, [r7, #4]
 80051c2:	3303      	adds	r3, #3
 80051c4:	089b      	lsrs	r3, r3, #2
 80051c6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051c8:	2300      	movs	r3, #0
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	e00f      	b.n	80051ee <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	031a      	lsls	r2, r3, #12
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051da:	461a      	mov	r2, r3
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3304      	adds	r3, #4
 80051e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	3301      	adds	r3, #1
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d3eb      	bcc.n	80051ce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3724      	adds	r7, #36	; 0x24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005204:	b480      	push	{r7}
 8005206:	b089      	sub	sp, #36	; 0x24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	4613      	mov	r3, r2
 8005210:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	3303      	adds	r3, #3
 800521e:	089b      	lsrs	r3, r3, #2
 8005220:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	e00b      	b.n	8005240 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	601a      	str	r2, [r3, #0]
    pDest++;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	3304      	adds	r3, #4
 8005238:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	3301      	adds	r3, #1
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	429a      	cmp	r2, r3
 8005246:	d3ef      	bcc.n	8005228 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005248:	69fb      	ldr	r3, [r7, #28]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3724      	adds	r7, #36	; 0x24
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	785b      	ldrb	r3, [r3, #1]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d12c      	bne.n	80052cc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	db12      	blt.n	80052aa <USB_EPSetStall+0x54>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00f      	beq.n	80052aa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052a8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e02b      	b.n	8005324 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	db12      	blt.n	8005304 <USB_EPSetStall+0xae>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00f      	beq.n	8005304 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005302:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	440a      	add	r2, r1
 800531a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005322:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d128      	bne.n	80053a0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	440a      	add	r2, r1
 8005364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005368:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800536c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	78db      	ldrb	r3, [r3, #3]
 8005372:	2b03      	cmp	r3, #3
 8005374:	d003      	beq.n	800537e <USB_EPClearStall+0x4c>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	78db      	ldrb	r3, [r3, #3]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d138      	bne.n	80053f0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	440a      	add	r2, r1
 8005394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e027      	b.n	80053f0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	0151      	lsls	r1, r2, #5
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	440a      	add	r2, r1
 80053b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	78db      	ldrb	r3, [r3, #3]
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d003      	beq.n	80053d0 <USB_EPClearStall+0x9e>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	78db      	ldrb	r3, [r3, #3]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d10f      	bne.n	80053f0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	460b      	mov	r3, r1
 8005408:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800541c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005420:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005438:	4313      	orrs	r3, r2
 800543a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005464:	f023 0302 	bic.w	r3, r3, #2
 8005468:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800546a:	2003      	movs	r0, #3
 800546c:	f7fb fe06 	bl	800107c <HAL_Delay>

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005494:	f043 0302 	orr.w	r3, r3, #2
 8005498:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800549a:	2003      	movs	r0, #3
 800549c:	f7fb fdee 	bl	800107c <HAL_Delay>

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4013      	ands	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054c2:	68fb      	ldr	r3, [r7, #12]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4013      	ands	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	0c1b      	lsrs	r3, r3, #16
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	b29b      	uxth	r3, r3
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005548:	78fb      	ldrb	r3, [r7, #3]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005566:	68bb      	ldr	r3, [r7, #8]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005596:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	fa22 f303 	lsr.w	r3, r2, r3
 80055a4:	01db      	lsls	r3, r3, #7
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4013      	ands	r3, r2
 80055c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055c2:	68bb      	ldr	r3, [r7, #8]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f003 0301 	and.w	r3, r3, #1
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005606:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800561e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005622:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	460b      	mov	r3, r1
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	333c      	adds	r3, #60	; 0x3c
 800564a:	3304      	adds	r3, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4a26      	ldr	r2, [pc, #152]	; (80056ec <USB_EP0_OutStart+0xb8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d90a      	bls.n	800566e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005668:	d101      	bne.n	800566e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	e037      	b.n	80056de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	461a      	mov	r2, r3
 8005676:	2300      	movs	r3, #0
 8005678:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800568c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569c:	f043 0318 	orr.w	r3, r3, #24
 80056a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80056b6:	7afb      	ldrb	r3, [r7, #11]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d10f      	bne.n	80056dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	461a      	mov	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80056da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	4f54300a 	.word	0x4f54300a

080056f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3301      	adds	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4a13      	ldr	r2, [pc, #76]	; (8005754 <USB_CoreReset+0x64>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e01b      	b.n	8005746 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	daf2      	bge.n	80056fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f043 0201 	orr.w	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3301      	adds	r3, #1
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a09      	ldr	r2, [pc, #36]	; (8005754 <USB_CoreReset+0x64>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e006      	b.n	8005746 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b01      	cmp	r3, #1
 8005742:	d0f0      	beq.n	8005726 <USB_CoreReset+0x36>

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	00030d40 	.word	0x00030d40

08005758 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005764:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005768:	f002 fcc2 	bl	80080f0 <malloc>
 800576c:	4603      	mov	r3, r0
 800576e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d105      	bne.n	8005782 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800577e:	2302      	movs	r3, #2
 8005780:	e066      	b.n	8005850 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	7c1b      	ldrb	r3, [r3, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d119      	bne.n	80057c6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005792:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005796:	2202      	movs	r2, #2
 8005798:	2181      	movs	r1, #129	; 0x81
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f002 f9f7 	bl	8007b8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057aa:	2202      	movs	r2, #2
 80057ac:	2101      	movs	r1, #1
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f002 f9ed 	bl	8007b8e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2210      	movs	r2, #16
 80057c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80057c4:	e016      	b.n	80057f4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057c6:	2340      	movs	r3, #64	; 0x40
 80057c8:	2202      	movs	r2, #2
 80057ca:	2181      	movs	r1, #129	; 0x81
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f002 f9de 	bl	8007b8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057d8:	2340      	movs	r3, #64	; 0x40
 80057da:	2202      	movs	r2, #2
 80057dc:	2101      	movs	r1, #1
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f002 f9d5 	bl	8007b8e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2210      	movs	r2, #16
 80057f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057f4:	2308      	movs	r3, #8
 80057f6:	2203      	movs	r2, #3
 80057f8:	2182      	movs	r1, #130	; 0x82
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f002 f9c7 	bl	8007b8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	7c1b      	ldrb	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005834:	2101      	movs	r1, #1
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f002 fa98 	bl	8007d6c <USBD_LL_PrepareReceive>
 800583c:	e007      	b.n	800584e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005844:	2340      	movs	r3, #64	; 0x40
 8005846:	2101      	movs	r1, #1
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f002 fa8f 	bl	8007d6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005868:	2181      	movs	r1, #129	; 0x81
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f002 f9b5 	bl	8007bda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005876:	2101      	movs	r1, #1
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f002 f9ae 	bl	8007bda <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005886:	2182      	movs	r1, #130	; 0x82
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f002 f9a6 	bl	8007bda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00e      	beq.n	80058c6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058b8:	4618      	mov	r0, r3
 80058ba:	f002 fc21 	bl	8008100 <free>
    pdev->pClassData = NULL;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058e0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d03a      	beq.n	8005970 <USBD_CDC_Setup+0xa0>
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	f040 8097 	bne.w	8005a2e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	88db      	ldrh	r3, [r3, #6]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d029      	beq.n	800595c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	b25b      	sxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	da11      	bge.n	8005936 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800591e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	88d2      	ldrh	r2, [r2, #6]
 8005924:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005926:	6939      	ldr	r1, [r7, #16]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	88db      	ldrh	r3, [r3, #6]
 800592c:	461a      	mov	r2, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f001 fa9d 	bl	8006e6e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005934:	e082      	b.n	8005a3c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	785a      	ldrb	r2, [r3, #1]
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	88db      	ldrh	r3, [r3, #6]
 8005944:	b2da      	uxtb	r2, r3
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800594c:	6939      	ldr	r1, [r7, #16]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	88db      	ldrh	r3, [r3, #6]
 8005952:	461a      	mov	r2, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 fab6 	bl	8006ec6 <USBD_CtlPrepareRx>
    break;
 800595a:	e06f      	b.n	8005a3c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	7850      	ldrb	r0, [r2, #1]
 8005968:	2200      	movs	r2, #0
 800596a:	6839      	ldr	r1, [r7, #0]
 800596c:	4798      	blx	r3
    break;
 800596e:	e065      	b.n	8005a3c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	785b      	ldrb	r3, [r3, #1]
 8005974:	2b0b      	cmp	r3, #11
 8005976:	d84f      	bhi.n	8005a18 <USBD_CDC_Setup+0x148>
 8005978:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <USBD_CDC_Setup+0xb0>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	080059b1 	.word	0x080059b1
 8005984:	08005a27 	.word	0x08005a27
 8005988:	08005a19 	.word	0x08005a19
 800598c:	08005a19 	.word	0x08005a19
 8005990:	08005a19 	.word	0x08005a19
 8005994:	08005a19 	.word	0x08005a19
 8005998:	08005a19 	.word	0x08005a19
 800599c:	08005a19 	.word	0x08005a19
 80059a0:	08005a19 	.word	0x08005a19
 80059a4:	08005a19 	.word	0x08005a19
 80059a8:	080059d9 	.word	0x080059d9
 80059ac:	08005a01 	.word	0x08005a01
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d107      	bne.n	80059ca <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80059ba:	f107 030c 	add.w	r3, r7, #12
 80059be:	2202      	movs	r2, #2
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 fa53 	bl	8006e6e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80059c8:	e030      	b.n	8005a2c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 f9dd 	bl	8006d8c <USBD_CtlError>
        ret = USBD_FAIL;
 80059d2:	2303      	movs	r3, #3
 80059d4:	75fb      	strb	r3, [r7, #23]
      break;
 80059d6:	e029      	b.n	8005a2c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d107      	bne.n	80059f2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80059e2:	f107 030f 	add.w	r3, r7, #15
 80059e6:	2201      	movs	r2, #1
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f001 fa3f 	bl	8006e6e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80059f0:	e01c      	b.n	8005a2c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 f9c9 	bl	8006d8c <USBD_CtlError>
        ret = USBD_FAIL;
 80059fa:	2303      	movs	r3, #3
 80059fc:	75fb      	strb	r3, [r7, #23]
      break;
 80059fe:	e015      	b.n	8005a2c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d00f      	beq.n	8005a2a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 f9bd 	bl	8006d8c <USBD_CtlError>
        ret = USBD_FAIL;
 8005a12:	2303      	movs	r3, #3
 8005a14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005a16:	e008      	b.n	8005a2a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f001 f9b6 	bl	8006d8c <USBD_CtlError>
      ret = USBD_FAIL;
 8005a20:	2303      	movs	r3, #3
 8005a22:	75fb      	strb	r3, [r7, #23]
      break;
 8005a24:	e002      	b.n	8005a2c <USBD_CDC_Setup+0x15c>
      break;
 8005a26:	bf00      	nop
 8005a28:	e008      	b.n	8005a3c <USBD_CDC_Setup+0x16c>
      break;
 8005a2a:	bf00      	nop
    }
    break;
 8005a2c:	e006      	b.n	8005a3c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 f9ab 	bl	8006d8c <USBD_CtlError>
    ret = USBD_FAIL;
 8005a36:	2303      	movs	r3, #3
 8005a38:	75fb      	strb	r3, [r7, #23]
    break;
 8005a3a:	bf00      	nop
  }

  return (uint8_t)ret;
 8005a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop

08005a48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005a5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e049      	b.n	8005afe <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005a72:	78fa      	ldrb	r2, [r7, #3]
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	3318      	adds	r3, #24
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d029      	beq.n	8005adc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a88:	78fa      	ldrb	r2, [r7, #3]
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	3318      	adds	r3, #24
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	78f9      	ldrb	r1, [r7, #3]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	1a5b      	subs	r3, r3, r1
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4403      	add	r3, r0
 8005aa8:	3344      	adds	r3, #68	; 0x44
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ab0:	fb03 f301 	mul.w	r3, r3, r1
 8005ab4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d110      	bne.n	8005adc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005aba:	78fa      	ldrb	r2, [r7, #3]
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	3318      	adds	r3, #24
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ace:	78f9      	ldrb	r1, [r7, #3]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f002 f928 	bl	8007d2a <USBD_LL_Transmit>
 8005ada:	e00f      	b.n	8005afc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e015      	b.n	8005b54 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f002 f93e 	bl	8007dae <USBD_LL_GetRxDataSize>
 8005b32:	4602      	mov	r2, r0
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b4e:	4611      	mov	r1, r2
 8005b50:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b6a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d015      	beq.n	8005ba2 <USBD_CDC_EP0_RxReady+0x46>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b7c:	2bff      	cmp	r3, #255	; 0xff
 8005b7e:	d010      	beq.n	8005ba2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005b8e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b96:	b292      	uxth	r2, r2
 8005b98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	22ff      	movs	r2, #255	; 0xff
 8005b9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2243      	movs	r2, #67	; 0x43
 8005bb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005bba:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	20000090 	.word	0x20000090

08005bcc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2243      	movs	r2, #67	; 0x43
 8005bd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005bda:	4b03      	ldr	r3, [pc, #12]	; (8005be8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	2000004c 	.word	0x2000004c

08005bec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2243      	movs	r2, #67	; 0x43
 8005bf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005bfa:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	200000d4 	.word	0x200000d4

08005c0c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	220a      	movs	r2, #10
 8005c18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c1a:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	20000008 	.word	0x20000008

08005c2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e004      	b.n	8005c4a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b087      	sub	sp, #28
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c68:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c98:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cbe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e01a      	b.n	8005d08 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d114      	bne.n	8005d06 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005cfa:	2181      	movs	r1, #129	; 0x81
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f002 f814 	bl	8007d2a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e016      	b.n	8005d5c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7c1b      	ldrb	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d40:	2101      	movs	r1, #1
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f002 f812 	bl	8007d6c <USBD_LL_PrepareReceive>
 8005d48:	e007      	b.n	8005d5a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d50:	2340      	movs	r3, #64	; 0x40
 8005d52:	2101      	movs	r1, #1
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f002 f809 	bl	8007d6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e025      	b.n	8005dc8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	79fa      	ldrb	r2, [r7, #7]
 8005dba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f001 fe7f 	bl	8007ac0 <USBD_LL_Init>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e010      	b.n	8005e0a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df8:	f107 020e 	add.w	r2, r7, #14
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4798      	blx	r3
 8005e00:	4602      	mov	r2, r0
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f001 fe9c 	bl	8007b58 <USBD_LL_Start>
 8005e20:	4603      	mov	r3, r0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	4611      	mov	r1, r2
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	4798      	blx	r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d007      	beq.n	8005e9e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	4611      	mov	r1, r2
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
  }

  return USBD_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 ff2c 	bl	8006d18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ece:	461a      	mov	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005edc:	f003 031f 	and.w	r3, r3, #31
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d00e      	beq.n	8005f02 <USBD_LL_SetupStage+0x5a>
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d302      	bcc.n	8005eee <USBD_LL_SetupStage+0x46>
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d014      	beq.n	8005f16 <USBD_LL_SetupStage+0x6e>
 8005eec:	e01d      	b.n	8005f2a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa18 	bl	800632c <USBD_StdDevReq>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]
      break;
 8005f00:	e020      	b.n	8005f44 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fa7c 	bl	8006408 <USBD_StdItfReq>
 8005f10:	4603      	mov	r3, r0
 8005f12:	73fb      	strb	r3, [r7, #15]
      break;
 8005f14:	e016      	b.n	8005f44 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fab8 	bl	8006494 <USBD_StdEPReq>
 8005f24:	4603      	mov	r3, r0
 8005f26:	73fb      	strb	r3, [r7, #15]
      break;
 8005f28:	e00c      	b.n	8005f44 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 fe6d 	bl	8007c18 <USBD_LL_StallEP>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	73fb      	strb	r3, [r7, #15]
      break;
 8005f42:	bf00      	nop
  }

  return ret;
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b086      	sub	sp, #24
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	460b      	mov	r3, r1
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f5c:	7afb      	ldrb	r3, [r7, #11]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d137      	bne.n	8005fd2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d14a      	bne.n	800600a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d913      	bls.n	8005fa8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	1ad2      	subs	r2, r2, r3
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	4293      	cmp	r3, r2
 8005f98:	bf28      	it	cs
 8005f9a:	4613      	movcs	r3, r2
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 ffad 	bl	8006f00 <USBD_CtlContinueRx>
 8005fa6:	e030      	b.n	800600a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d105      	bne.n	8005fca <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 ffa9 	bl	8006f22 <USBD_CtlSendStatus>
 8005fd0:	e01b      	b.n	800600a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d013      	beq.n	8006006 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d10e      	bne.n	8006006 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	7afa      	ldrb	r2, [r7, #11]
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	4798      	blx	r3
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006002:	7dfb      	ldrb	r3, [r7, #23]
 8006004:	e002      	b.n	800600c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006006:	2303      	movs	r3, #3
 8006008:	e000      	b.n	800600c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	460b      	mov	r3, r1
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006022:	7afb      	ldrb	r3, [r7, #11]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d16a      	bne.n	80060fe <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3314      	adds	r3, #20
 800602c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006034:	2b02      	cmp	r3, #2
 8006036:	d155      	bne.n	80060e4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	429a      	cmp	r2, r3
 8006042:	d914      	bls.n	800606e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	1ad2      	subs	r2, r2, r3
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	461a      	mov	r2, r3
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 ff22 	bl	8006ea4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006060:	2300      	movs	r3, #0
 8006062:	2200      	movs	r2, #0
 8006064:	2100      	movs	r1, #0
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f001 fe80 	bl	8007d6c <USBD_LL_PrepareReceive>
 800606c:	e03a      	b.n	80060e4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	429a      	cmp	r2, r3
 8006078:	d11c      	bne.n	80060b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006082:	429a      	cmp	r2, r3
 8006084:	d316      	bcc.n	80060b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006090:	429a      	cmp	r2, r3
 8006092:	d20f      	bcs.n	80060b4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006094:	2200      	movs	r2, #0
 8006096:	2100      	movs	r1, #0
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 ff03 	bl	8006ea4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060a6:	2300      	movs	r3, #0
 80060a8:	2200      	movs	r2, #0
 80060aa:	2100      	movs	r1, #0
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f001 fe5d 	bl	8007d6c <USBD_LL_PrepareReceive>
 80060b2:	e017      	b.n	80060e4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d105      	bne.n	80060d6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060d6:	2180      	movs	r1, #128	; 0x80
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f001 fd9d 	bl	8007c18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 ff32 	bl	8006f48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d123      	bne.n	8006136 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7ff fe9b 	bl	8005e2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060fc:	e01b      	b.n	8006136 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d013      	beq.n	8006132 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006110:	2b03      	cmp	r3, #3
 8006112:	d10e      	bne.n	8006132 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	7afa      	ldrb	r2, [r7, #11]
 800611e:	4611      	mov	r1, r2
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	4798      	blx	r3
 8006124:	4603      	mov	r3, r0
 8006126:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	e002      	b.n	8006138 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006132:	2303      	movs	r3, #3
 8006134:	e000      	b.n	8006138 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800616c:	2b00      	cmp	r3, #0
 800616e:	d009      	beq.n	8006184 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6852      	ldr	r2, [r2, #4]
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	4611      	mov	r1, r2
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006184:	2340      	movs	r3, #64	; 0x40
 8006186:	2200      	movs	r2, #0
 8006188:	2100      	movs	r1, #0
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f001 fcff 	bl	8007b8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2240      	movs	r2, #64	; 0x40
 800619c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061a0:	2340      	movs	r3, #64	; 0x40
 80061a2:	2200      	movs	r2, #0
 80061a4:	2180      	movs	r1, #128	; 0x80
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 fcf1 	bl	8007b8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2240      	movs	r2, #64	; 0x40
 80061b6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	460b      	mov	r3, r1
 80061cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	78fa      	ldrb	r2, [r7, #3]
 80061d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2204      	movs	r2, #4
 80061fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800621a:	2b04      	cmp	r3, #4
 800621c:	d105      	bne.n	800622a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006246:	2b03      	cmp	r3, #3
 8006248:	d10b      	bne.n	8006262 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d005      	beq.n	8006262 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d009      	beq.n	80062e4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6852      	ldr	r2, [r2, #4]
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	4611      	mov	r1, r2
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
  }

  return USBD_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b087      	sub	sp, #28
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	3301      	adds	r3, #1
 8006304:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800630c:	8a3b      	ldrh	r3, [r7, #16]
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	b21a      	sxth	r2, r3
 8006312:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006316:	4313      	orrs	r3, r2
 8006318:	b21b      	sxth	r3, r3
 800631a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800631c:	89fb      	ldrh	r3, [r7, #14]
}
 800631e:	4618      	mov	r0, r3
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
	...

0800632c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006342:	2b20      	cmp	r3, #32
 8006344:	d004      	beq.n	8006350 <USBD_StdDevReq+0x24>
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d002      	beq.n	8006350 <USBD_StdDevReq+0x24>
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <USBD_StdDevReq+0x38>
 800634e:	e050      	b.n	80063f2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	4798      	blx	r3
 800635e:	4603      	mov	r3, r0
 8006360:	73fb      	strb	r3, [r7, #15]
    break;
 8006362:	e04b      	b.n	80063fc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	2b09      	cmp	r3, #9
 800636a:	d83c      	bhi.n	80063e6 <USBD_StdDevReq+0xba>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <USBD_StdDevReq+0x48>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	080063c9 	.word	0x080063c9
 8006378:	080063dd 	.word	0x080063dd
 800637c:	080063e7 	.word	0x080063e7
 8006380:	080063d3 	.word	0x080063d3
 8006384:	080063e7 	.word	0x080063e7
 8006388:	080063a7 	.word	0x080063a7
 800638c:	0800639d 	.word	0x0800639d
 8006390:	080063e7 	.word	0x080063e7
 8006394:	080063bf 	.word	0x080063bf
 8006398:	080063b1 	.word	0x080063b1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f9ce 	bl	8006740 <USBD_GetDescriptor>
      break;
 80063a4:	e024      	b.n	80063f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fb33 	bl	8006a14 <USBD_SetAddress>
      break;
 80063ae:	e01f      	b.n	80063f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fb70 	bl	8006a98 <USBD_SetConfig>
 80063b8:	4603      	mov	r3, r0
 80063ba:	73fb      	strb	r3, [r7, #15]
      break;
 80063bc:	e018      	b.n	80063f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fc0d 	bl	8006be0 <USBD_GetConfig>
      break;
 80063c6:	e013      	b.n	80063f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fc3c 	bl	8006c48 <USBD_GetStatus>
      break;
 80063d0:	e00e      	b.n	80063f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fc6a 	bl	8006cae <USBD_SetFeature>
      break;
 80063da:	e009      	b.n	80063f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fc79 	bl	8006cd6 <USBD_ClrFeature>
      break;
 80063e4:	e004      	b.n	80063f0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fccf 	bl	8006d8c <USBD_CtlError>
      break;
 80063ee:	bf00      	nop
    }
    break;
 80063f0:	e004      	b.n	80063fc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fcc9 	bl	8006d8c <USBD_CtlError>
    break;
 80063fa:	bf00      	nop
  }

  return ret;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop

08006408 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800641e:	2b20      	cmp	r3, #32
 8006420:	d003      	beq.n	800642a <USBD_StdItfReq+0x22>
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d001      	beq.n	800642a <USBD_StdItfReq+0x22>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d12a      	bne.n	8006480 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006430:	3b01      	subs	r3, #1
 8006432:	2b02      	cmp	r3, #2
 8006434:	d81d      	bhi.n	8006472 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	889b      	ldrh	r3, [r3, #4]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d813      	bhi.n	8006468 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	4798      	blx	r3
 800644e:	4603      	mov	r3, r0
 8006450:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	88db      	ldrh	r3, [r3, #6]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d110      	bne.n	800647c <USBD_StdItfReq+0x74>
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10d      	bne.n	800647c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fd5e 	bl	8006f22 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006466:	e009      	b.n	800647c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fc8e 	bl	8006d8c <USBD_CtlError>
      break;
 8006470:	e004      	b.n	800647c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fc89 	bl	8006d8c <USBD_CtlError>
      break;
 800647a:	e000      	b.n	800647e <USBD_StdItfReq+0x76>
      break;
 800647c:	bf00      	nop
    }
    break;
 800647e:	e004      	b.n	800648a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fc82 	bl	8006d8c <USBD_CtlError>
    break;
 8006488:	bf00      	nop
  }

  return ret;
 800648a:	7bfb      	ldrb	r3, [r7, #15]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	889b      	ldrh	r3, [r3, #4]
 80064a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d004      	beq.n	80064be <USBD_StdEPReq+0x2a>
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d002      	beq.n	80064be <USBD_StdEPReq+0x2a>
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <USBD_StdEPReq+0x3e>
 80064bc:	e135      	b.n	800672a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	4798      	blx	r3
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]
    break;
 80064d0:	e130      	b.n	8006734 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d03e      	beq.n	8006558 <USBD_StdEPReq+0xc4>
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d002      	beq.n	80064e4 <USBD_StdEPReq+0x50>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d077      	beq.n	80065d2 <USBD_StdEPReq+0x13e>
 80064e2:	e11c      	b.n	800671e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d002      	beq.n	80064f4 <USBD_StdEPReq+0x60>
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d015      	beq.n	800651e <USBD_StdEPReq+0x8a>
 80064f2:	e02b      	b.n	800654c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00c      	beq.n	8006514 <USBD_StdEPReq+0x80>
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	2b80      	cmp	r3, #128	; 0x80
 80064fe:	d009      	beq.n	8006514 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 fb87 	bl	8007c18 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 fb83 	bl	8007c18 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006512:	e020      	b.n	8006556 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fc38 	bl	8006d8c <USBD_CtlError>
        break;
 800651c:	e01b      	b.n	8006556 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	885b      	ldrh	r3, [r3, #2]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10e      	bne.n	8006544 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006526:	7bbb      	ldrb	r3, [r7, #14]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00b      	beq.n	8006544 <USBD_StdEPReq+0xb0>
 800652c:	7bbb      	ldrb	r3, [r7, #14]
 800652e:	2b80      	cmp	r3, #128	; 0x80
 8006530:	d008      	beq.n	8006544 <USBD_StdEPReq+0xb0>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	88db      	ldrh	r3, [r3, #6]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d104      	bne.n	8006544 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800653a:	7bbb      	ldrb	r3, [r7, #14]
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 fb6a 	bl	8007c18 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fcec 	bl	8006f22 <USBD_CtlSendStatus>

        break;
 800654a:	e004      	b.n	8006556 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fc1c 	bl	8006d8c <USBD_CtlError>
        break;
 8006554:	bf00      	nop
      }
      break;
 8006556:	e0e7      	b.n	8006728 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800655e:	2b02      	cmp	r3, #2
 8006560:	d002      	beq.n	8006568 <USBD_StdEPReq+0xd4>
 8006562:	2b03      	cmp	r3, #3
 8006564:	d015      	beq.n	8006592 <USBD_StdEPReq+0xfe>
 8006566:	e02d      	b.n	80065c4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00c      	beq.n	8006588 <USBD_StdEPReq+0xf4>
 800656e:	7bbb      	ldrb	r3, [r7, #14]
 8006570:	2b80      	cmp	r3, #128	; 0x80
 8006572:	d009      	beq.n	8006588 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 fb4d 	bl	8007c18 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800657e:	2180      	movs	r1, #128	; 0x80
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 fb49 	bl	8007c18 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006586:	e023      	b.n	80065d0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fbfe 	bl	8006d8c <USBD_CtlError>
        break;
 8006590:	e01e      	b.n	80065d0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	885b      	ldrh	r3, [r3, #2]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d119      	bne.n	80065ce <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800659a:	7bbb      	ldrb	r3, [r7, #14]
 800659c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d004      	beq.n	80065ae <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 fb54 	bl	8007c56 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fcb7 	bl	8006f22 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
        }
        break;
 80065c2:	e004      	b.n	80065ce <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fbe0 	bl	8006d8c <USBD_CtlError>
        break;
 80065cc:	e000      	b.n	80065d0 <USBD_StdEPReq+0x13c>
        break;
 80065ce:	bf00      	nop
      }
      break;
 80065d0:	e0aa      	b.n	8006728 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d002      	beq.n	80065e2 <USBD_StdEPReq+0x14e>
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d032      	beq.n	8006646 <USBD_StdEPReq+0x1b2>
 80065e0:	e097      	b.n	8006712 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d007      	beq.n	80065f8 <USBD_StdEPReq+0x164>
 80065e8:	7bbb      	ldrb	r3, [r7, #14]
 80065ea:	2b80      	cmp	r3, #128	; 0x80
 80065ec:	d004      	beq.n	80065f8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fbcb 	bl	8006d8c <USBD_CtlError>
          break;
 80065f6:	e091      	b.n	800671c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	da0b      	bge.n	8006618 <USBD_StdEPReq+0x184>
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	3310      	adds	r3, #16
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	4413      	add	r3, r2
 8006614:	3304      	adds	r3, #4
 8006616:	e00b      	b.n	8006630 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006618:	7bbb      	ldrb	r3, [r7, #14]
 800661a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	4413      	add	r3, r2
 800662e:	3304      	adds	r3, #4
 8006630:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2200      	movs	r2, #0
 8006636:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2202      	movs	r2, #2
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fc15 	bl	8006e6e <USBD_CtlSendData>
        break;
 8006644:	e06a      	b.n	800671c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006646:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800664a:	2b00      	cmp	r3, #0
 800664c:	da11      	bge.n	8006672 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	f003 020f 	and.w	r2, r3, #15
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	3324      	adds	r3, #36	; 0x24
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d117      	bne.n	8006698 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fb8e 	bl	8006d8c <USBD_CtlError>
            break;
 8006670:	e054      	b.n	800671c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006672:	7bbb      	ldrb	r3, [r7, #14]
 8006674:	f003 020f 	and.w	r2, r3, #15
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fb7b 	bl	8006d8c <USBD_CtlError>
            break;
 8006696:	e041      	b.n	800671c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800669c:	2b00      	cmp	r3, #0
 800669e:	da0b      	bge.n	80066b8 <USBD_StdEPReq+0x224>
 80066a0:	7bbb      	ldrb	r3, [r7, #14]
 80066a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	3310      	adds	r3, #16
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	4413      	add	r3, r2
 80066b4:	3304      	adds	r3, #4
 80066b6:	e00b      	b.n	80066d0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80066b8:	7bbb      	ldrb	r3, [r7, #14]
 80066ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	4413      	add	r3, r2
 80066ce:	3304      	adds	r3, #4
 80066d0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <USBD_StdEPReq+0x24a>
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	2b80      	cmp	r3, #128	; 0x80
 80066dc:	d103      	bne.n	80066e6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e00e      	b.n	8006704 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 fad2 	bl	8007c94 <USBD_LL_IsStallEP>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2201      	movs	r2, #1
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	e002      	b.n	8006704 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2202      	movs	r2, #2
 8006708:	4619      	mov	r1, r3
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fbaf 	bl	8006e6e <USBD_CtlSendData>
          break;
 8006710:	e004      	b.n	800671c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fb39 	bl	8006d8c <USBD_CtlError>
        break;
 800671a:	bf00      	nop
      }
      break;
 800671c:	e004      	b.n	8006728 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fb33 	bl	8006d8c <USBD_CtlError>
      break;
 8006726:	bf00      	nop
    }
    break;
 8006728:	e004      	b.n	8006734 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fb2d 	bl	8006d8c <USBD_CtlError>
    break;
 8006732:	bf00      	nop
  }

  return ret;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
	...

08006740 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	885b      	ldrh	r3, [r3, #2]
 800675a:	0a1b      	lsrs	r3, r3, #8
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	2b06      	cmp	r3, #6
 8006762:	f200 8128 	bhi.w	80069b6 <USBD_GetDescriptor+0x276>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <USBD_GetDescriptor+0x2c>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	08006789 	.word	0x08006789
 8006770:	080067a1 	.word	0x080067a1
 8006774:	080067e1 	.word	0x080067e1
 8006778:	080069b7 	.word	0x080069b7
 800677c:	080069b7 	.word	0x080069b7
 8006780:	08006957 	.word	0x08006957
 8006784:	08006983 	.word	0x08006983
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	7c12      	ldrb	r2, [r2, #16]
 8006794:	f107 0108 	add.w	r1, r7, #8
 8006798:	4610      	mov	r0, r2
 800679a:	4798      	blx	r3
 800679c:	60f8      	str	r0, [r7, #12]
    break;
 800679e:	e112      	b.n	80069c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	7c1b      	ldrb	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10d      	bne.n	80067c4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b0:	f107 0208 	add.w	r2, r7, #8
 80067b4:	4610      	mov	r0, r2
 80067b6:	4798      	blx	r3
 80067b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3301      	adds	r3, #1
 80067be:	2202      	movs	r2, #2
 80067c0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80067c2:	e100      	b.n	80069c6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	f107 0208 	add.w	r2, r7, #8
 80067d0:	4610      	mov	r0, r2
 80067d2:	4798      	blx	r3
 80067d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	2202      	movs	r2, #2
 80067dc:	701a      	strb	r2, [r3, #0]
    break;
 80067de:	e0f2      	b.n	80069c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	885b      	ldrh	r3, [r3, #2]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b05      	cmp	r3, #5
 80067e8:	f200 80ac 	bhi.w	8006944 <USBD_GetDescriptor+0x204>
 80067ec:	a201      	add	r2, pc, #4	; (adr r2, 80067f4 <USBD_GetDescriptor+0xb4>)
 80067ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f2:	bf00      	nop
 80067f4:	0800680d 	.word	0x0800680d
 80067f8:	08006841 	.word	0x08006841
 80067fc:	08006875 	.word	0x08006875
 8006800:	080068a9 	.word	0x080068a9
 8006804:	080068dd 	.word	0x080068dd
 8006808:	08006911 	.word	0x08006911
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00b      	beq.n	8006830 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	7c12      	ldrb	r2, [r2, #16]
 8006824:	f107 0108 	add.w	r1, r7, #8
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
 800682c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800682e:	e091      	b.n	8006954 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 faaa 	bl	8006d8c <USBD_CtlError>
        err++;
 8006838:	7afb      	ldrb	r3, [r7, #11]
 800683a:	3301      	adds	r3, #1
 800683c:	72fb      	strb	r3, [r7, #11]
      break;
 800683e:	e089      	b.n	8006954 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00b      	beq.n	8006864 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	7c12      	ldrb	r2, [r2, #16]
 8006858:	f107 0108 	add.w	r1, r7, #8
 800685c:	4610      	mov	r0, r2
 800685e:	4798      	blx	r3
 8006860:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006862:	e077      	b.n	8006954 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fa90 	bl	8006d8c <USBD_CtlError>
        err++;
 800686c:	7afb      	ldrb	r3, [r7, #11]
 800686e:	3301      	adds	r3, #1
 8006870:	72fb      	strb	r3, [r7, #11]
      break;
 8006872:	e06f      	b.n	8006954 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00b      	beq.n	8006898 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	7c12      	ldrb	r2, [r2, #16]
 800688c:	f107 0108 	add.w	r1, r7, #8
 8006890:	4610      	mov	r0, r2
 8006892:	4798      	blx	r3
 8006894:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006896:	e05d      	b.n	8006954 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa76 	bl	8006d8c <USBD_CtlError>
        err++;
 80068a0:	7afb      	ldrb	r3, [r7, #11]
 80068a2:	3301      	adds	r3, #1
 80068a4:	72fb      	strb	r3, [r7, #11]
      break;
 80068a6:	e055      	b.n	8006954 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00b      	beq.n	80068cc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	7c12      	ldrb	r2, [r2, #16]
 80068c0:	f107 0108 	add.w	r1, r7, #8
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
 80068c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068ca:	e043      	b.n	8006954 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa5c 	bl	8006d8c <USBD_CtlError>
        err++;
 80068d4:	7afb      	ldrb	r3, [r7, #11]
 80068d6:	3301      	adds	r3, #1
 80068d8:	72fb      	strb	r3, [r7, #11]
      break;
 80068da:	e03b      	b.n	8006954 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00b      	beq.n	8006900 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	7c12      	ldrb	r2, [r2, #16]
 80068f4:	f107 0108 	add.w	r1, r7, #8
 80068f8:	4610      	mov	r0, r2
 80068fa:	4798      	blx	r3
 80068fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068fe:	e029      	b.n	8006954 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fa42 	bl	8006d8c <USBD_CtlError>
        err++;
 8006908:	7afb      	ldrb	r3, [r7, #11]
 800690a:	3301      	adds	r3, #1
 800690c:	72fb      	strb	r3, [r7, #11]
      break;
 800690e:	e021      	b.n	8006954 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00b      	beq.n	8006934 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	7c12      	ldrb	r2, [r2, #16]
 8006928:	f107 0108 	add.w	r1, r7, #8
 800692c:	4610      	mov	r0, r2
 800692e:	4798      	blx	r3
 8006930:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006932:	e00f      	b.n	8006954 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fa28 	bl	8006d8c <USBD_CtlError>
        err++;
 800693c:	7afb      	ldrb	r3, [r7, #11]
 800693e:	3301      	adds	r3, #1
 8006940:	72fb      	strb	r3, [r7, #11]
      break;
 8006942:	e007      	b.n	8006954 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa20 	bl	8006d8c <USBD_CtlError>
      err++;
 800694c:	7afb      	ldrb	r3, [r7, #11]
 800694e:	3301      	adds	r3, #1
 8006950:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006952:	bf00      	nop
    }
    break;
 8006954:	e037      	b.n	80069c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	7c1b      	ldrb	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006966:	f107 0208 	add.w	r2, r7, #8
 800696a:	4610      	mov	r0, r2
 800696c:	4798      	blx	r3
 800696e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006970:	e029      	b.n	80069c6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fa09 	bl	8006d8c <USBD_CtlError>
      err++;
 800697a:	7afb      	ldrb	r3, [r7, #11]
 800697c:	3301      	adds	r3, #1
 800697e:	72fb      	strb	r3, [r7, #11]
    break;
 8006980:	e021      	b.n	80069c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	7c1b      	ldrb	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10d      	bne.n	80069a6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	f107 0208 	add.w	r2, r7, #8
 8006996:	4610      	mov	r0, r2
 8006998:	4798      	blx	r3
 800699a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	3301      	adds	r3, #1
 80069a0:	2207      	movs	r2, #7
 80069a2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80069a4:	e00f      	b.n	80069c6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f9ef 	bl	8006d8c <USBD_CtlError>
      err++;
 80069ae:	7afb      	ldrb	r3, [r7, #11]
 80069b0:	3301      	adds	r3, #1
 80069b2:	72fb      	strb	r3, [r7, #11]
    break;
 80069b4:	e007      	b.n	80069c6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f9e7 	bl	8006d8c <USBD_CtlError>
    err++;
 80069be:	7afb      	ldrb	r3, [r7, #11]
 80069c0:	3301      	adds	r3, #1
 80069c2:	72fb      	strb	r3, [r7, #11]
    break;
 80069c4:	bf00      	nop
  }

  if (err != 0U)
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d11e      	bne.n	8006a0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	88db      	ldrh	r3, [r3, #6]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d016      	beq.n	8006a02 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80069d4:	893b      	ldrh	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00e      	beq.n	80069f8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	88da      	ldrh	r2, [r3, #6]
 80069de:	893b      	ldrh	r3, [r7, #8]
 80069e0:	4293      	cmp	r3, r2
 80069e2:	bf28      	it	cs
 80069e4:	4613      	movcs	r3, r2
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80069ea:	893b      	ldrh	r3, [r7, #8]
 80069ec:	461a      	mov	r2, r3
 80069ee:	68f9      	ldr	r1, [r7, #12]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fa3c 	bl	8006e6e <USBD_CtlSendData>
 80069f6:	e009      	b.n	8006a0c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f9c6 	bl	8006d8c <USBD_CtlError>
 8006a00:	e004      	b.n	8006a0c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa8d 	bl	8006f22 <USBD_CtlSendStatus>
 8006a08:	e000      	b.n	8006a0c <USBD_GetDescriptor+0x2cc>
    return;
 8006a0a:	bf00      	nop
    }
  }
}
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop

08006a14 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	889b      	ldrh	r3, [r3, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d130      	bne.n	8006a88 <USBD_SetAddress+0x74>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	88db      	ldrh	r3, [r3, #6]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d12c      	bne.n	8006a88 <USBD_SetAddress+0x74>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	885b      	ldrh	r3, [r3, #2]
 8006a32:	2b7f      	cmp	r3, #127	; 0x7f
 8006a34:	d828      	bhi.n	8006a88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	885b      	ldrh	r3, [r3, #2]
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d104      	bne.n	8006a56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f99c 	bl	8006d8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a54:	e01c      	b.n	8006a90 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	7bfa      	ldrb	r2, [r7, #15]
 8006a5a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f001 f942 	bl	8007cec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fa5a 	bl	8006f22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d004      	beq.n	8006a7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a7c:	e008      	b.n	8006a90 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a86:	e003      	b.n	8006a90 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f97e 	bl	8006d8c <USBD_CtlError>
  }
}
 8006a90:	bf00      	nop
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	885b      	ldrh	r3, [r3, #2]
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	4b4b      	ldr	r3, [pc, #300]	; (8006bdc <USBD_SetConfig+0x144>)
 8006aae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ab0:	4b4a      	ldr	r3, [pc, #296]	; (8006bdc <USBD_SetConfig+0x144>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d905      	bls.n	8006ac4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f966 	bl	8006d8c <USBD_CtlError>
    return USBD_FAIL;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e087      	b.n	8006bd4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d002      	beq.n	8006ad4 <USBD_SetConfig+0x3c>
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d025      	beq.n	8006b1e <USBD_SetConfig+0x86>
 8006ad2:	e071      	b.n	8006bb8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006ad4:	4b41      	ldr	r3, [pc, #260]	; (8006bdc <USBD_SetConfig+0x144>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01c      	beq.n	8006b16 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006adc:	4b3f      	ldr	r3, [pc, #252]	; (8006bdc <USBD_SetConfig+0x144>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ae6:	4b3d      	ldr	r3, [pc, #244]	; (8006bdc <USBD_SetConfig+0x144>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff f9a7 	bl	8005e40 <USBD_SetClassConfig>
 8006af2:	4603      	mov	r3, r0
 8006af4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d004      	beq.n	8006b06 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f944 	bl	8006d8c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006b04:	e065      	b.n	8006bd2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fa0b 	bl	8006f22 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2203      	movs	r2, #3
 8006b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006b14:	e05d      	b.n	8006bd2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fa03 	bl	8006f22 <USBD_CtlSendStatus>
    break;
 8006b1c:	e059      	b.n	8006bd2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006b1e:	4b2f      	ldr	r3, [pc, #188]	; (8006bdc <USBD_SetConfig+0x144>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d112      	bne.n	8006b4c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006b2e:	4b2b      	ldr	r3, [pc, #172]	; (8006bdc <USBD_SetConfig+0x144>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b38:	4b28      	ldr	r3, [pc, #160]	; (8006bdc <USBD_SetConfig+0x144>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff f99a 	bl	8005e78 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f9ec 	bl	8006f22 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006b4a:	e042      	b.n	8006bd2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006b4c:	4b23      	ldr	r3, [pc, #140]	; (8006bdc <USBD_SetConfig+0x144>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d02a      	beq.n	8006bb0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff f988 	bl	8005e78 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006b68:	4b1c      	ldr	r3, [pc, #112]	; (8006bdc <USBD_SetConfig+0x144>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b72:	4b1a      	ldr	r3, [pc, #104]	; (8006bdc <USBD_SetConfig+0x144>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7ff f961 	bl	8005e40 <USBD_SetClassConfig>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00f      	beq.n	8006ba8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f8fe 	bl	8006d8c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff f96d 	bl	8005e78 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006ba6:	e014      	b.n	8006bd2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f9ba 	bl	8006f22 <USBD_CtlSendStatus>
    break;
 8006bae:	e010      	b.n	8006bd2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f9b6 	bl	8006f22 <USBD_CtlSendStatus>
    break;
 8006bb6:	e00c      	b.n	8006bd2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f8e6 	bl	8006d8c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bc0:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <USBD_SetConfig+0x144>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff f956 	bl	8005e78 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	73fb      	strb	r3, [r7, #15]
    break;
 8006bd0:	bf00      	nop
  }

  return ret;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	2000036c 	.word	0x2000036c

08006be0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	88db      	ldrh	r3, [r3, #6]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d004      	beq.n	8006bfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f8c9 	bl	8006d8c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006bfa:	e021      	b.n	8006c40 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	db17      	blt.n	8006c36 <USBD_GetConfig+0x56>
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	dd02      	ble.n	8006c10 <USBD_GetConfig+0x30>
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	d00b      	beq.n	8006c26 <USBD_GetConfig+0x46>
 8006c0e:	e012      	b.n	8006c36 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3308      	adds	r3, #8
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f925 	bl	8006e6e <USBD_CtlSendData>
      break;
 8006c24:	e00c      	b.n	8006c40 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f91d 	bl	8006e6e <USBD_CtlSendData>
      break;
 8006c34:	e004      	b.n	8006c40 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f8a7 	bl	8006d8c <USBD_CtlError>
      break;
 8006c3e:	bf00      	nop
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d81e      	bhi.n	8006c9c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	88db      	ldrh	r3, [r3, #6]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d004      	beq.n	8006c70 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f88f 	bl	8006d8c <USBD_CtlError>
      break;
 8006c6e:	e01a      	b.n	8006ca6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f043 0202 	orr.w	r2, r3, #2
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	330c      	adds	r3, #12
 8006c90:	2202      	movs	r2, #2
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f8ea 	bl	8006e6e <USBD_CtlSendData>
    break;
 8006c9a:	e004      	b.n	8006ca6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f874 	bl	8006d8c <USBD_CtlError>
    break;
 8006ca4:	bf00      	nop
  }
}
 8006ca6:	bf00      	nop
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b082      	sub	sp, #8
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	885b      	ldrh	r3, [r3, #2]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d106      	bne.n	8006cce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f92a 	bl	8006f22 <USBD_CtlSendStatus>
  }
}
 8006cce:	bf00      	nop
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b082      	sub	sp, #8
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d80b      	bhi.n	8006d04 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	885b      	ldrh	r3, [r3, #2]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d10c      	bne.n	8006d0e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f910 	bl	8006f22 <USBD_CtlSendStatus>
      }
      break;
 8006d02:	e004      	b.n	8006d0e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f840 	bl	8006d8c <USBD_CtlError>
      break;
 8006d0c:	e000      	b.n	8006d10 <USBD_ClrFeature+0x3a>
      break;
 8006d0e:	bf00      	nop
  }
}
 8006d10:	bf00      	nop
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3301      	adds	r3, #1
 8006d32:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	781a      	ldrb	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f7ff fad3 	bl	80062ee <SWAPBYTE>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7ff fac6 	bl	80062ee <SWAPBYTE>
 8006d62:	4603      	mov	r3, r0
 8006d64:	461a      	mov	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3301      	adds	r3, #1
 8006d74:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f7ff fab9 	bl	80062ee <SWAPBYTE>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	461a      	mov	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	80da      	strh	r2, [r3, #6]
}
 8006d84:	bf00      	nop
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d96:	2180      	movs	r1, #128	; 0x80
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 ff3d 	bl	8007c18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d9e:	2100      	movs	r1, #0
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 ff39 	bl	8007c18 <USBD_LL_StallEP>
}
 8006da6:	bf00      	nop
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b086      	sub	sp, #24
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d036      	beq.n	8006e32 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006dc8:	6938      	ldr	r0, [r7, #16]
 8006dca:	f000 f836 	bl	8006e3a <USBD_GetLen>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	4413      	add	r3, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	7812      	ldrb	r2, [r2, #0]
 8006de6:	701a      	strb	r2, [r3, #0]
  idx++;
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	3301      	adds	r3, #1
 8006dec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006dee:	7dfb      	ldrb	r3, [r7, #23]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	4413      	add	r3, r2
 8006df4:	2203      	movs	r2, #3
 8006df6:	701a      	strb	r2, [r3, #0]
  idx++;
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006dfe:	e013      	b.n	8006e28 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	4413      	add	r3, r2
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	7812      	ldrb	r2, [r2, #0]
 8006e0a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	613b      	str	r3, [r7, #16]
    idx++;
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
 8006e14:	3301      	adds	r3, #1
 8006e16:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	2200      	movs	r2, #0
 8006e20:	701a      	strb	r2, [r3, #0]
    idx++;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	3301      	adds	r3, #1
 8006e26:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e7      	bne.n	8006e00 <USBD_GetString+0x52>
 8006e30:	e000      	b.n	8006e34 <USBD_GetString+0x86>
    return;
 8006e32:	bf00      	nop
  }
}
 8006e34:	3718      	adds	r7, #24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e4a:	e005      	b.n	8006e58 <USBD_GetLen+0x1e>
  {
    len++;
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	3301      	adds	r3, #1
 8006e56:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1f5      	bne.n	8006e4c <USBD_GetLen+0x12>
  }

  return len;
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	2100      	movs	r1, #0
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 ff48 	bl	8007d2a <USBD_LL_Transmit>

  return USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 ff37 	bl	8007d2a <USBD_LL_Transmit>

  return USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	60f8      	str	r0, [r7, #12]
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2203      	movs	r2, #3
 8006ed6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	2100      	movs	r1, #0
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 ff3b 	bl	8007d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	2100      	movs	r1, #0
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 ff2a 	bl	8007d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b082      	sub	sp, #8
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2204      	movs	r2, #4
 8006f2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f32:	2300      	movs	r3, #0
 8006f34:	2200      	movs	r2, #0
 8006f36:	2100      	movs	r1, #0
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fef6 	bl	8007d2a <USBD_LL_Transmit>

  return USBD_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2205      	movs	r2, #5
 8006f54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f58:	2300      	movs	r3, #0
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 ff04 	bl	8007d6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f76:	f107 030c 	add.w	r3, r7, #12
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	605a      	str	r2, [r3, #4]
 8006f80:	609a      	str	r2, [r3, #8]
 8006f82:	60da      	str	r2, [r3, #12]
 8006f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f86:	2300      	movs	r3, #0
 8006f88:	60bb      	str	r3, [r7, #8]
 8006f8a:	4b20      	ldr	r3, [pc, #128]	; (800700c <MX_GPIO_Init+0x9c>)
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	4a1f      	ldr	r2, [pc, #124]	; (800700c <MX_GPIO_Init+0x9c>)
 8006f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f94:	6313      	str	r3, [r2, #48]	; 0x30
 8006f96:	4b1d      	ldr	r3, [pc, #116]	; (800700c <MX_GPIO_Init+0x9c>)
 8006f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f9e:	60bb      	str	r3, [r7, #8]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	607b      	str	r3, [r7, #4]
 8006fa6:	4b19      	ldr	r3, [pc, #100]	; (800700c <MX_GPIO_Init+0x9c>)
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	4a18      	ldr	r2, [pc, #96]	; (800700c <MX_GPIO_Init+0x9c>)
 8006fac:	f043 0301 	orr.w	r3, r3, #1
 8006fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8006fb2:	4b16      	ldr	r3, [pc, #88]	; (800700c <MX_GPIO_Init+0x9c>)
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	607b      	str	r3, [r7, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	603b      	str	r3, [r7, #0]
 8006fc2:	4b12      	ldr	r3, [pc, #72]	; (800700c <MX_GPIO_Init+0x9c>)
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	4a11      	ldr	r2, [pc, #68]	; (800700c <MX_GPIO_Init+0x9c>)
 8006fc8:	f043 0302 	orr.w	r3, r3, #2
 8006fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8006fce:	4b0f      	ldr	r3, [pc, #60]	; (800700c <MX_GPIO_Init+0x9c>)
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006fde:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <MX_GPIO_Init+0xa0>)
 8006fe0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8006fe6:	f107 030c 	add.w	r3, r7, #12
 8006fea:	4619      	mov	r1, r3
 8006fec:	4809      	ldr	r0, [pc, #36]	; (8007014 <MX_GPIO_Init+0xa4>)
 8006fee:	f7fa f979 	bl	80012e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	2006      	movs	r0, #6
 8006ff8:	f7fa f93d 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006ffc:	2006      	movs	r0, #6
 8006ffe:	f7fa f956 	bl	80012ae <HAL_NVIC_EnableIRQ>

}
 8007002:	bf00      	nop
 8007004:	3720      	adds	r7, #32
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	40023800 	.word	0x40023800
 8007010:	10310000 	.word	0x10310000
 8007014:	40020000 	.word	0x40020000

08007018 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800701c:	4b12      	ldr	r3, [pc, #72]	; (8007068 <MX_I2C1_Init+0x50>)
 800701e:	4a13      	ldr	r2, [pc, #76]	; (800706c <MX_I2C1_Init+0x54>)
 8007020:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007022:	4b11      	ldr	r3, [pc, #68]	; (8007068 <MX_I2C1_Init+0x50>)
 8007024:	4a12      	ldr	r2, [pc, #72]	; (8007070 <MX_I2C1_Init+0x58>)
 8007026:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007028:	4b0f      	ldr	r3, [pc, #60]	; (8007068 <MX_I2C1_Init+0x50>)
 800702a:	2200      	movs	r2, #0
 800702c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800702e:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <MX_I2C1_Init+0x50>)
 8007030:	2200      	movs	r2, #0
 8007032:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007034:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <MX_I2C1_Init+0x50>)
 8007036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800703a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800703c:	4b0a      	ldr	r3, [pc, #40]	; (8007068 <MX_I2C1_Init+0x50>)
 800703e:	2200      	movs	r2, #0
 8007040:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007042:	4b09      	ldr	r3, [pc, #36]	; (8007068 <MX_I2C1_Init+0x50>)
 8007044:	2200      	movs	r2, #0
 8007046:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007048:	4b07      	ldr	r3, [pc, #28]	; (8007068 <MX_I2C1_Init+0x50>)
 800704a:	2200      	movs	r2, #0
 800704c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800704e:	4b06      	ldr	r3, [pc, #24]	; (8007068 <MX_I2C1_Init+0x50>)
 8007050:	2200      	movs	r2, #0
 8007052:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007054:	4804      	ldr	r0, [pc, #16]	; (8007068 <MX_I2C1_Init+0x50>)
 8007056:	f7fa faeb 	bl	8001630 <HAL_I2C_Init>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007060:	f000 f9e2 	bl	8007428 <Error_Handler>
  }

}
 8007064:	bf00      	nop
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000380 	.word	0x20000380
 800706c:	40005400 	.word	0x40005400
 8007070:	00061a80 	.word	0x00061a80

08007074 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b08a      	sub	sp, #40	; 0x28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800707c:	f107 0314 	add.w	r3, r7, #20
 8007080:	2200      	movs	r2, #0
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	605a      	str	r2, [r3, #4]
 8007086:	609a      	str	r2, [r3, #8]
 8007088:	60da      	str	r2, [r3, #12]
 800708a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a19      	ldr	r2, [pc, #100]	; (80070f8 <HAL_I2C_MspInit+0x84>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d12c      	bne.n	80070f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007096:	2300      	movs	r3, #0
 8007098:	613b      	str	r3, [r7, #16]
 800709a:	4b18      	ldr	r3, [pc, #96]	; (80070fc <HAL_I2C_MspInit+0x88>)
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	4a17      	ldr	r2, [pc, #92]	; (80070fc <HAL_I2C_MspInit+0x88>)
 80070a0:	f043 0302 	orr.w	r3, r3, #2
 80070a4:	6313      	str	r3, [r2, #48]	; 0x30
 80070a6:	4b15      	ldr	r3, [pc, #84]	; (80070fc <HAL_I2C_MspInit+0x88>)
 80070a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80070b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80070b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80070b8:	2312      	movs	r3, #18
 80070ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070bc:	2301      	movs	r3, #1
 80070be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070c0:	2303      	movs	r3, #3
 80070c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80070c4:	2304      	movs	r3, #4
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070c8:	f107 0314 	add.w	r3, r7, #20
 80070cc:	4619      	mov	r1, r3
 80070ce:	480c      	ldr	r0, [pc, #48]	; (8007100 <HAL_I2C_MspInit+0x8c>)
 80070d0:	f7fa f908 	bl	80012e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	4b08      	ldr	r3, [pc, #32]	; (80070fc <HAL_I2C_MspInit+0x88>)
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	4a07      	ldr	r2, [pc, #28]	; (80070fc <HAL_I2C_MspInit+0x88>)
 80070de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070e2:	6413      	str	r3, [r2, #64]	; 0x40
 80070e4:	4b05      	ldr	r3, [pc, #20]	; (80070fc <HAL_I2C_MspInit+0x88>)
 80070e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80070f0:	bf00      	nop
 80070f2:	3728      	adds	r7, #40	; 0x28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40005400 	.word	0x40005400
 80070fc:	40023800 	.word	0x40023800
 8007100:	40020400 	.word	0x40020400

08007104 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800710c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007110:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d013      	beq.n	8007144 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800711c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007120:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007124:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800712c:	e000      	b.n	8007130 <ITM_SendChar+0x2c>
    {
      __NOP();
 800712e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007130:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d0f9      	beq.n	800712e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800713a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	b2d2      	uxtb	r2, r2
 8007142:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007144:	687b      	ldr	r3, [r7, #4]
}
 8007146:	4618      	mov	r0, r3
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Przekierowanie funkcji printf() za pomoca SWV
int _write(int file, char *ptr, int len){
 8007152:	b580      	push	{r7, lr}
 8007154:	b086      	sub	sp, #24
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	607a      	str	r2, [r7, #4]
	int i ;
	for(i=0;i<len;++i){
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	e009      	b.n	8007178 <_write+0x26>
		ITM_SendChar(*ptr++);
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	60ba      	str	r2, [r7, #8]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff ffc9 	bl	8007104 <ITM_SendChar>
	for(i=0;i<len;++i){
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	3301      	adds	r3, #1
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	429a      	cmp	r2, r3
 800717e:	dbf1      	blt.n	8007164 <_write+0x12>
	}
	return len;
 8007180:	687b      	ldr	r3, [r7, #4]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800718c:	b590      	push	{r4, r7, lr}
 800718e:	b087      	sub	sp, #28
 8007190:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
Xaxis = 0;
 8007192:	4b63      	ldr	r3, [pc, #396]	; (8007320 <main+0x194>)
 8007194:	2200      	movs	r2, #0
 8007196:	801a      	strh	r2, [r3, #0]
Yaxis = 0;
 8007198:	4b62      	ldr	r3, [pc, #392]	; (8007324 <main+0x198>)
 800719a:	2200      	movs	r2, #0
 800719c:	801a      	strh	r2, [r3, #0]
Zaxis = 0;
 800719e:	4b62      	ldr	r3, [pc, #392]	; (8007328 <main+0x19c>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	801a      	strh	r2, [r3, #0]
ToCrc = 0;
 80071a4:	4b61      	ldr	r3, [pc, #388]	; (800732c <main+0x1a0>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	801a      	strh	r2, [r3, #0]
syncSign = 0x24;// Znak '$' zapisany w systemie szesnastkowym Hex
 80071aa:	4b61      	ldr	r3, [pc, #388]	; (8007330 <main+0x1a4>)
 80071ac:	2224      	movs	r2, #36	; 0x24
 80071ae:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80071b0:	f7f9 fef2 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80071b4:	f000 f8d0 	bl	8007358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80071b8:	f7ff feda 	bl	8006f70 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80071bc:	f000 fa38 	bl	8007630 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80071c0:	f7ff ff2a 	bl	8007018 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // wypelnienie zmiennej konfiguracyjnej odpowiednimi opcjami
  uint8_t Settings = LSM303_ACC_XYZ_ENABLE | LSM303_ACC_1HZ;
 80071c4:	2317      	movs	r3, #23
 80071c6:	71fb      	strb	r3, [r7, #7]
  // Wpisanie konfiguracji do rejestru akcelerometru
  HAL_I2C_Mem_Write(&hi2c1, LSM303_ACC_ADDRESS, LSM303_ACC_CTRL_REG1_A, 1, &Settings, 1, 100);
 80071c8:	2364      	movs	r3, #100	; 0x64
 80071ca:	9302      	str	r3, [sp, #8]
 80071cc:	2301      	movs	r3, #1
 80071ce:	9301      	str	r3, [sp, #4]
 80071d0:	1dfb      	adds	r3, r7, #7
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	2301      	movs	r3, #1
 80071d6:	2220      	movs	r2, #32
 80071d8:	2132      	movs	r1, #50	; 0x32
 80071da:	4856      	ldr	r0, [pc, #344]	; (8007334 <main+0x1a8>)
 80071dc:	f7fa fb60 	bl	80018a0 <HAL_I2C_Mem_Write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Pobieranie 6 bajtów danych zawierających przyspieszenia w 3 osiach
	  HAL_I2C_Mem_Read(&hi2c1, LSM303_ACC_ADDRESS, (LSM303_ACC_X_H_A), 1, &Data[1], 2, 100);
 80071e0:	2364      	movs	r3, #100	; 0x64
 80071e2:	9302      	str	r3, [sp, #8]
 80071e4:	2302      	movs	r3, #2
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	4b53      	ldr	r3, [pc, #332]	; (8007338 <main+0x1ac>)
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	2301      	movs	r3, #1
 80071ee:	2229      	movs	r2, #41	; 0x29
 80071f0:	2132      	movs	r1, #50	; 0x32
 80071f2:	4850      	ldr	r0, [pc, #320]	; (8007334 <main+0x1a8>)
 80071f4:	f7fa fc4e 	bl	8001a94 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, LSM303_ACC_ADDRESS, (LSM303_ACC_Y_H_A), 1, &Data[3], 2, 100);
 80071f8:	2364      	movs	r3, #100	; 0x64
 80071fa:	9302      	str	r3, [sp, #8]
 80071fc:	2302      	movs	r3, #2
 80071fe:	9301      	str	r3, [sp, #4]
 8007200:	4b4e      	ldr	r3, [pc, #312]	; (800733c <main+0x1b0>)
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	2301      	movs	r3, #1
 8007206:	222b      	movs	r2, #43	; 0x2b
 8007208:	2132      	movs	r1, #50	; 0x32
 800720a:	484a      	ldr	r0, [pc, #296]	; (8007334 <main+0x1a8>)
 800720c:	f7fa fc42 	bl	8001a94 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1, LSM303_ACC_ADDRESS, (LSM303_ACC_Z_H_A), 1, &Data[5], 2, 100);
 8007210:	2364      	movs	r3, #100	; 0x64
 8007212:	9302      	str	r3, [sp, #8]
 8007214:	2302      	movs	r3, #2
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	4b49      	ldr	r3, [pc, #292]	; (8007340 <main+0x1b4>)
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	2301      	movs	r3, #1
 800721e:	222d      	movs	r2, #45	; 0x2d
 8007220:	2132      	movs	r1, #50	; 0x32
 8007222:	4844      	ldr	r0, [pc, #272]	; (8007334 <main+0x1a8>)
 8007224:	f7fa fc36 	bl	8001a94 <HAL_I2C_Mem_Read>

	  Xaxis = ((Data[1] << 8) | Data[0]);
 8007228:	4b46      	ldr	r3, [pc, #280]	; (8007344 <main+0x1b8>)
 800722a:	785b      	ldrb	r3, [r3, #1]
 800722c:	021b      	lsls	r3, r3, #8
 800722e:	b21a      	sxth	r2, r3
 8007230:	4b44      	ldr	r3, [pc, #272]	; (8007344 <main+0x1b8>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	b21b      	sxth	r3, r3
 8007236:	4313      	orrs	r3, r2
 8007238:	b21a      	sxth	r2, r3
 800723a:	4b39      	ldr	r3, [pc, #228]	; (8007320 <main+0x194>)
 800723c:	801a      	strh	r2, [r3, #0]
	  Yaxis = ((Data[3] << 8) | Data[2]);
 800723e:	4b41      	ldr	r3, [pc, #260]	; (8007344 <main+0x1b8>)
 8007240:	78db      	ldrb	r3, [r3, #3]
 8007242:	021b      	lsls	r3, r3, #8
 8007244:	b21a      	sxth	r2, r3
 8007246:	4b3f      	ldr	r3, [pc, #252]	; (8007344 <main+0x1b8>)
 8007248:	789b      	ldrb	r3, [r3, #2]
 800724a:	b21b      	sxth	r3, r3
 800724c:	4313      	orrs	r3, r2
 800724e:	b21a      	sxth	r2, r3
 8007250:	4b34      	ldr	r3, [pc, #208]	; (8007324 <main+0x198>)
 8007252:	801a      	strh	r2, [r3, #0]
	  Zaxis = ((Data[5] << 8) | Data[4]);
 8007254:	4b3b      	ldr	r3, [pc, #236]	; (8007344 <main+0x1b8>)
 8007256:	795b      	ldrb	r3, [r3, #5]
 8007258:	021b      	lsls	r3, r3, #8
 800725a:	b21a      	sxth	r2, r3
 800725c:	4b39      	ldr	r3, [pc, #228]	; (8007344 <main+0x1b8>)
 800725e:	791b      	ldrb	r3, [r3, #4]
 8007260:	b21b      	sxth	r3, r3
 8007262:	4313      	orrs	r3, r2
 8007264:	b21a      	sxth	r2, r3
 8007266:	4b30      	ldr	r3, [pc, #192]	; (8007328 <main+0x19c>)
 8007268:	801a      	strh	r2, [r3, #0]
	  ToCrc = Xaxis + Yaxis + Zaxis;
 800726a:	4b2d      	ldr	r3, [pc, #180]	; (8007320 <main+0x194>)
 800726c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007270:	b29a      	uxth	r2, r3
 8007272:	4b2c      	ldr	r3, [pc, #176]	; (8007324 <main+0x198>)
 8007274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007278:	b29b      	uxth	r3, r3
 800727a:	4413      	add	r3, r2
 800727c:	b29a      	uxth	r2, r3
 800727e:	4b2a      	ldr	r3, [pc, #168]	; (8007328 <main+0x19c>)
 8007280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007284:	b29b      	uxth	r3, r3
 8007286:	4413      	add	r3, r2
 8007288:	b29a      	uxth	r2, r3
 800728a:	4b28      	ldr	r3, [pc, #160]	; (800732c <main+0x1a0>)
 800728c:	801a      	strh	r2, [r3, #0]
	  ToCrc = (ToCrc % 128);
 800728e:	4b27      	ldr	r3, [pc, #156]	; (800732c <main+0x1a0>)
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007296:	b29a      	uxth	r2, r3
 8007298:	4b24      	ldr	r3, [pc, #144]	; (800732c <main+0x1a0>)
 800729a:	801a      	strh	r2, [r3, #0]
	  //Length=sprintf(DataToSend,"%d %d %d %d",Xaxis,Yaxis,Zaxis,ToCrc);
	  //Przeslij ramke [$][_][X][_][Y][_][Z][_][CRC][_][\n]
	  Length=sprintf(DataToSend,"%x %d %d %d %d \n",syncSign,Xaxis,Yaxis,Zaxis,ToCrc);
 800729c:	4b24      	ldr	r3, [pc, #144]	; (8007330 <main+0x1a4>)
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	4b1f      	ldr	r3, [pc, #124]	; (8007320 <main+0x194>)
 80072a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072a8:	461c      	mov	r4, r3
 80072aa:	4b1e      	ldr	r3, [pc, #120]	; (8007324 <main+0x198>)
 80072ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072b0:	461a      	mov	r2, r3
 80072b2:	4b1d      	ldr	r3, [pc, #116]	; (8007328 <main+0x19c>)
 80072b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072b8:	4619      	mov	r1, r3
 80072ba:	4b1c      	ldr	r3, [pc, #112]	; (800732c <main+0x1a0>)
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	9302      	str	r3, [sp, #8]
 80072c0:	9101      	str	r1, [sp, #4]
 80072c2:	9200      	str	r2, [sp, #0]
 80072c4:	4623      	mov	r3, r4
 80072c6:	4602      	mov	r2, r0
 80072c8:	491f      	ldr	r1, [pc, #124]	; (8007348 <main+0x1bc>)
 80072ca:	4820      	ldr	r0, [pc, #128]	; (800734c <main+0x1c0>)
 80072cc:	f001 fe3c 	bl	8008f48 <siprintf>
 80072d0:	4603      	mov	r3, r0
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	4b1e      	ldr	r3, [pc, #120]	; (8007350 <main+0x1c4>)
 80072d6:	701a      	strb	r2, [r3, #0]
	  printf("%x %d %d %d %d \r\n",syncSign,Xaxis,Yaxis,Zaxis,ToCrc);
 80072d8:	4b15      	ldr	r3, [pc, #84]	; (8007330 <main+0x1a4>)
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	4619      	mov	r1, r3
 80072de:	4b10      	ldr	r3, [pc, #64]	; (8007320 <main+0x194>)
 80072e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072e4:	4618      	mov	r0, r3
 80072e6:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <main+0x198>)
 80072e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072ec:	461c      	mov	r4, r3
 80072ee:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <main+0x19c>)
 80072f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072f4:	461a      	mov	r2, r3
 80072f6:	4b0d      	ldr	r3, [pc, #52]	; (800732c <main+0x1a0>)
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	9200      	str	r2, [sp, #0]
 80072fe:	4623      	mov	r3, r4
 8007300:	4602      	mov	r2, r0
 8007302:	4814      	ldr	r0, [pc, #80]	; (8007354 <main+0x1c8>)
 8007304:	f001 fdf2 	bl	8008eec <iprintf>
	  CDC_Transmit_FS(DataToSend, Length);
 8007308:	4b11      	ldr	r3, [pc, #68]	; (8007350 <main+0x1c4>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	4619      	mov	r1, r3
 8007310:	480e      	ldr	r0, [pc, #56]	; (800734c <main+0x1c0>)
 8007312:	f000 fa61 	bl	80077d8 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8007316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800731a:	f7f9 feaf 	bl	800107c <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, LSM303_ACC_ADDRESS, (LSM303_ACC_X_H_A), 1, &Data[1], 2, 100);
 800731e:	e75f      	b.n	80071e0 <main+0x54>
 8007320:	200007cc 	.word	0x200007cc
 8007324:	200007c0 	.word	0x200007c0
 8007328:	200003d4 	.word	0x200003d4
 800732c:	200007ca 	.word	0x200007ca
 8007330:	200003d6 	.word	0x200003d6
 8007334:	20000380 	.word	0x20000380
 8007338:	200007c5 	.word	0x200007c5
 800733c:	200007c7 	.word	0x200007c7
 8007340:	200007c9 	.word	0x200007c9
 8007344:	200007c4 	.word	0x200007c4
 8007348:	0800c4e0 	.word	0x0800c4e0
 800734c:	200003d8 	.word	0x200003d8
 8007350:	200007ce 	.word	0x200007ce
 8007354:	0800c4f4 	.word	0x0800c4f4

08007358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b094      	sub	sp, #80	; 0x50
 800735c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800735e:	f107 0320 	add.w	r3, r7, #32
 8007362:	2230      	movs	r2, #48	; 0x30
 8007364:	2100      	movs	r1, #0
 8007366:	4618      	mov	r0, r3
 8007368:	f000 fed2 	bl	8008110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800736c:	f107 030c 	add.w	r3, r7, #12
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	605a      	str	r2, [r3, #4]
 8007376:	609a      	str	r2, [r3, #8]
 8007378:	60da      	str	r2, [r3, #12]
 800737a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800737c:	2300      	movs	r3, #0
 800737e:	60bb      	str	r3, [r7, #8]
 8007380:	4b27      	ldr	r3, [pc, #156]	; (8007420 <SystemClock_Config+0xc8>)
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	4a26      	ldr	r2, [pc, #152]	; (8007420 <SystemClock_Config+0xc8>)
 8007386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800738a:	6413      	str	r3, [r2, #64]	; 0x40
 800738c:	4b24      	ldr	r3, [pc, #144]	; (8007420 <SystemClock_Config+0xc8>)
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007394:	60bb      	str	r3, [r7, #8]
 8007396:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007398:	2300      	movs	r3, #0
 800739a:	607b      	str	r3, [r7, #4]
 800739c:	4b21      	ldr	r3, [pc, #132]	; (8007424 <SystemClock_Config+0xcc>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a20      	ldr	r2, [pc, #128]	; (8007424 <SystemClock_Config+0xcc>)
 80073a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	4b1e      	ldr	r3, [pc, #120]	; (8007424 <SystemClock_Config+0xcc>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073b0:	607b      	str	r3, [r7, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80073b4:	2301      	movs	r3, #1
 80073b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80073b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073be:	2302      	movs	r3, #2
 80073c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80073c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80073c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80073c8:	2304      	movs	r3, #4
 80073ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80073cc:	2348      	movs	r3, #72	; 0x48
 80073ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80073d0:	2302      	movs	r3, #2
 80073d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80073d4:	2303      	movs	r3, #3
 80073d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073d8:	f107 0320 	add.w	r3, r7, #32
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fc fa59 	bl	8003894 <HAL_RCC_OscConfig>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80073e8:	f000 f81e 	bl	8007428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80073ec:	230f      	movs	r3, #15
 80073ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80073f0:	2302      	movs	r3, #2
 80073f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80073f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80073fe:	2300      	movs	r3, #0
 8007400:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007402:	f107 030c 	add.w	r3, r7, #12
 8007406:	2102      	movs	r1, #2
 8007408:	4618      	mov	r0, r3
 800740a:	f7fc fcb3 	bl	8003d74 <HAL_RCC_ClockConfig>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8007414:	f000 f808 	bl	8007428 <Error_Handler>
  }
}
 8007418:	bf00      	nop
 800741a:	3750      	adds	r7, #80	; 0x50
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	40023800 	.word	0x40023800
 8007424:	40007000 	.word	0x40007000

08007428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800742c:	bf00      	nop
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
	...

08007438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800743e:	2300      	movs	r3, #0
 8007440:	607b      	str	r3, [r7, #4]
 8007442:	4b10      	ldr	r3, [pc, #64]	; (8007484 <HAL_MspInit+0x4c>)
 8007444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007446:	4a0f      	ldr	r2, [pc, #60]	; (8007484 <HAL_MspInit+0x4c>)
 8007448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800744c:	6453      	str	r3, [r2, #68]	; 0x44
 800744e:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <HAL_MspInit+0x4c>)
 8007450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007456:	607b      	str	r3, [r7, #4]
 8007458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800745a:	2300      	movs	r3, #0
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	4b09      	ldr	r3, [pc, #36]	; (8007484 <HAL_MspInit+0x4c>)
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	4a08      	ldr	r2, [pc, #32]	; (8007484 <HAL_MspInit+0x4c>)
 8007464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007468:	6413      	str	r3, [r2, #64]	; 0x40
 800746a:	4b06      	ldr	r3, [pc, #24]	; (8007484 <HAL_MspInit+0x4c>)
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40023800 	.word	0x40023800

08007488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800748c:	bf00      	nop
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007496:	b480      	push	{r7}
 8007498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800749a:	e7fe      	b.n	800749a <HardFault_Handler+0x4>

0800749c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074a0:	e7fe      	b.n	80074a0 <MemManage_Handler+0x4>

080074a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80074a2:	b480      	push	{r7}
 80074a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074a6:	e7fe      	b.n	80074a6 <BusFault_Handler+0x4>

080074a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80074a8:	b480      	push	{r7}
 80074aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074ac:	e7fe      	b.n	80074ac <UsageFault_Handler+0x4>

080074ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80074ae:	b480      	push	{r7}
 80074b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074b2:	bf00      	nop
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074c0:	bf00      	nop
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80074ca:	b480      	push	{r7}
 80074cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80074ce:	bf00      	nop
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074dc:	f7f9 fdae 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074e0:	bf00      	nop
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80074e8:	2001      	movs	r0, #1
 80074ea:	f7fa f87d 	bl	80015e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80074ee:	bf00      	nop
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80074f8:	4802      	ldr	r0, [pc, #8]	; (8007504 <OTG_FS_IRQHandler+0x10>)
 80074fa:	f7fb f998 	bl	800282e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80074fe:	bf00      	nop
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20001aa0 	.word	0x20001aa0

08007508 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007514:	2300      	movs	r3, #0
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	e00a      	b.n	8007530 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800751a:	f3af 8000 	nop.w
 800751e:	4601      	mov	r1, r0
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	60ba      	str	r2, [r7, #8]
 8007526:	b2ca      	uxtb	r2, r1
 8007528:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	3301      	adds	r3, #1
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	429a      	cmp	r2, r3
 8007536:	dbf0      	blt.n	800751a <_read+0x12>
	}

return len;
 8007538:	687b      	ldr	r3, [r7, #4]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <_close>:
	}
	return len;
}

int _close(int file)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
	return -1;
 800754a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800754e:	4618      	mov	r0, r3
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800756a:	605a      	str	r2, [r3, #4]
	return 0;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <_isatty>:

int _isatty(int file)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
	return 1;
 8007582:	2301      	movs	r3, #1
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
	return 0;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
	...

080075ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80075b4:	4b11      	ldr	r3, [pc, #68]	; (80075fc <_sbrk+0x50>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <_sbrk+0x16>
		heap_end = &end;
 80075bc:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <_sbrk+0x50>)
 80075be:	4a10      	ldr	r2, [pc, #64]	; (8007600 <_sbrk+0x54>)
 80075c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80075c2:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <_sbrk+0x50>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80075c8:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <_sbrk+0x50>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4413      	add	r3, r2
 80075d0:	466a      	mov	r2, sp
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d907      	bls.n	80075e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80075d6:	f000 fd61 	bl	800809c <__errno>
 80075da:	4602      	mov	r2, r0
 80075dc:	230c      	movs	r3, #12
 80075de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80075e0:	f04f 33ff 	mov.w	r3, #4294967295
 80075e4:	e006      	b.n	80075f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80075e6:	4b05      	ldr	r3, [pc, #20]	; (80075fc <_sbrk+0x50>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4413      	add	r3, r2
 80075ee:	4a03      	ldr	r2, [pc, #12]	; (80075fc <_sbrk+0x50>)
 80075f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80075f2:	68fb      	ldr	r3, [r7, #12]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20000370 	.word	0x20000370
 8007600:	200020b0 	.word	0x200020b0

08007604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007604:	b480      	push	{r7}
 8007606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007608:	4b08      	ldr	r3, [pc, #32]	; (800762c <SystemInit+0x28>)
 800760a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760e:	4a07      	ldr	r2, [pc, #28]	; (800762c <SystemInit+0x28>)
 8007610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007618:	4b04      	ldr	r3, [pc, #16]	; (800762c <SystemInit+0x28>)
 800761a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800761e:	609a      	str	r2, [r3, #8]
#endif
}
 8007620:	bf00      	nop
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	e000ed00 	.word	0xe000ed00

08007630 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007634:	2200      	movs	r2, #0
 8007636:	4912      	ldr	r1, [pc, #72]	; (8007680 <MX_USB_DEVICE_Init+0x50>)
 8007638:	4812      	ldr	r0, [pc, #72]	; (8007684 <MX_USB_DEVICE_Init+0x54>)
 800763a:	f7fe fb93 	bl	8005d64 <USBD_Init>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007644:	f7ff fef0 	bl	8007428 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007648:	490f      	ldr	r1, [pc, #60]	; (8007688 <MX_USB_DEVICE_Init+0x58>)
 800764a:	480e      	ldr	r0, [pc, #56]	; (8007684 <MX_USB_DEVICE_Init+0x54>)
 800764c:	f7fe fbc0 	bl	8005dd0 <USBD_RegisterClass>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007656:	f7ff fee7 	bl	8007428 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800765a:	490c      	ldr	r1, [pc, #48]	; (800768c <MX_USB_DEVICE_Init+0x5c>)
 800765c:	4809      	ldr	r0, [pc, #36]	; (8007684 <MX_USB_DEVICE_Init+0x54>)
 800765e:	f7fe fae5 	bl	8005c2c <USBD_CDC_RegisterInterface>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007668:	f7ff fede 	bl	8007428 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800766c:	4805      	ldr	r0, [pc, #20]	; (8007684 <MX_USB_DEVICE_Init+0x54>)
 800766e:	f7fe fbd0 	bl	8005e12 <USBD_Start>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007678:	f7ff fed6 	bl	8007428 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800767c:	bf00      	nop
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000130 	.word	0x20000130
 8007684:	200007d0 	.word	0x200007d0
 8007688:	20000014 	.word	0x20000014
 800768c:	2000011c 	.word	0x2000011c

08007690 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007694:	2200      	movs	r2, #0
 8007696:	4905      	ldr	r1, [pc, #20]	; (80076ac <CDC_Init_FS+0x1c>)
 8007698:	4805      	ldr	r0, [pc, #20]	; (80076b0 <CDC_Init_FS+0x20>)
 800769a:	f7fe fadc 	bl	8005c56 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800769e:	4905      	ldr	r1, [pc, #20]	; (80076b4 <CDC_Init_FS+0x24>)
 80076a0:	4803      	ldr	r0, [pc, #12]	; (80076b0 <CDC_Init_FS+0x20>)
 80076a2:	f7fe faf1 	bl	8005c88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	200012a0 	.word	0x200012a0
 80076b0:	200007d0 	.word	0x200007d0
 80076b4:	20000aa0 	.word	0x20000aa0

080076b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076be:	4618      	mov	r0, r3
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	6039      	str	r1, [r7, #0]
 80076d2:	71fb      	strb	r3, [r7, #7]
 80076d4:	4613      	mov	r3, r2
 80076d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80076d8:	79fb      	ldrb	r3, [r7, #7]
 80076da:	2b23      	cmp	r3, #35	; 0x23
 80076dc:	d85f      	bhi.n	800779e <CDC_Control_FS+0xd6>
 80076de:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <CDC_Control_FS+0x1c>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	0800779f 	.word	0x0800779f
 80076e8:	0800779f 	.word	0x0800779f
 80076ec:	0800779f 	.word	0x0800779f
 80076f0:	0800779f 	.word	0x0800779f
 80076f4:	0800779f 	.word	0x0800779f
 80076f8:	0800779f 	.word	0x0800779f
 80076fc:	0800779f 	.word	0x0800779f
 8007700:	0800779f 	.word	0x0800779f
 8007704:	0800779f 	.word	0x0800779f
 8007708:	0800779f 	.word	0x0800779f
 800770c:	0800779f 	.word	0x0800779f
 8007710:	0800779f 	.word	0x0800779f
 8007714:	0800779f 	.word	0x0800779f
 8007718:	0800779f 	.word	0x0800779f
 800771c:	0800779f 	.word	0x0800779f
 8007720:	0800779f 	.word	0x0800779f
 8007724:	0800779f 	.word	0x0800779f
 8007728:	0800779f 	.word	0x0800779f
 800772c:	0800779f 	.word	0x0800779f
 8007730:	0800779f 	.word	0x0800779f
 8007734:	0800779f 	.word	0x0800779f
 8007738:	0800779f 	.word	0x0800779f
 800773c:	0800779f 	.word	0x0800779f
 8007740:	0800779f 	.word	0x0800779f
 8007744:	0800779f 	.word	0x0800779f
 8007748:	0800779f 	.word	0x0800779f
 800774c:	0800779f 	.word	0x0800779f
 8007750:	0800779f 	.word	0x0800779f
 8007754:	0800779f 	.word	0x0800779f
 8007758:	0800779f 	.word	0x0800779f
 800775c:	0800779f 	.word	0x0800779f
 8007760:	0800779f 	.word	0x0800779f
 8007764:	0800779f 	.word	0x0800779f
 8007768:	08007775 	.word	0x08007775
 800776c:	0800779f 	.word	0x0800779f
 8007770:	0800779f 	.word	0x0800779f

    break;

    case CDC_GET_LINE_CODING:
    {
    	uint32_t spped = 115200;
 8007774:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007778:	60fb      	str	r3, [r7, #12]
    	//uint32_t databits = 8;
    	length = 7;
 800777a:	2307      	movs	r3, #7
 800777c:	80bb      	strh	r3, [r7, #4]
    	memcpy(pbuf,&spped,4);
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	601a      	str	r2, [r3, #0]
    	pbuf[4]=0;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	3304      	adds	r3, #4
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
    	pbuf[5]=0;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	3305      	adds	r3, #5
 8007790:	2200      	movs	r2, #0
 8007792:	701a      	strb	r2, [r3, #0]
    	pbuf[6]=0;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	3306      	adds	r3, #6
 8007798:	2200      	movs	r2, #0
 800779a:	701a      	strb	r2, [r3, #0]
    }

    break;
 800779c:	e000      	b.n	80077a0 <CDC_Control_FS+0xd8>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800779e:	bf00      	nop
  }

  return (USBD_OK);
 80077a0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop

080077b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	4805      	ldr	r0, [pc, #20]	; (80077d4 <CDC_Receive_FS+0x24>)
 80077be:	f7fe fa63 	bl	8005c88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077c2:	4804      	ldr	r0, [pc, #16]	; (80077d4 <CDC_Receive_FS+0x24>)
 80077c4:	f7fe faa4 	bl	8005d10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80077c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	200007d0 	.word	0x200007d0

080077d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80077e8:	4b0d      	ldr	r3, [pc, #52]	; (8007820 <CDC_Transmit_FS+0x48>)
 80077ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e00b      	b.n	8007816 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80077fe:	887b      	ldrh	r3, [r7, #2]
 8007800:	461a      	mov	r2, r3
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	4806      	ldr	r0, [pc, #24]	; (8007820 <CDC_Transmit_FS+0x48>)
 8007806:	f7fe fa26 	bl	8005c56 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800780a:	4805      	ldr	r0, [pc, #20]	; (8007820 <CDC_Transmit_FS+0x48>)
 800780c:	f7fe fa50 	bl	8005cb0 <USBD_CDC_TransmitPacket>
 8007810:	4603      	mov	r3, r0
 8007812:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	200007d0 	.word	0x200007d0

08007824 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800783a:	4618      	mov	r0, r3
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
	...

08007848 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08a      	sub	sp, #40	; 0x28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007850:	f107 0314 	add.w	r3, r7, #20
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	605a      	str	r2, [r3, #4]
 800785a:	609a      	str	r2, [r3, #8]
 800785c:	60da      	str	r2, [r3, #12]
 800785e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007868:	d13a      	bne.n	80078e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800786a:	2300      	movs	r3, #0
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	4b1e      	ldr	r3, [pc, #120]	; (80078e8 <HAL_PCD_MspInit+0xa0>)
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	4a1d      	ldr	r2, [pc, #116]	; (80078e8 <HAL_PCD_MspInit+0xa0>)
 8007874:	f043 0301 	orr.w	r3, r3, #1
 8007878:	6313      	str	r3, [r2, #48]	; 0x30
 800787a:	4b1b      	ldr	r3, [pc, #108]	; (80078e8 <HAL_PCD_MspInit+0xa0>)
 800787c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007886:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800788a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800788c:	2302      	movs	r3, #2
 800788e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007890:	2300      	movs	r3, #0
 8007892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007894:	2303      	movs	r3, #3
 8007896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007898:	230a      	movs	r3, #10
 800789a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800789c:	f107 0314 	add.w	r3, r7, #20
 80078a0:	4619      	mov	r1, r3
 80078a2:	4812      	ldr	r0, [pc, #72]	; (80078ec <HAL_PCD_MspInit+0xa4>)
 80078a4:	f7f9 fd1e 	bl	80012e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078a8:	4b0f      	ldr	r3, [pc, #60]	; (80078e8 <HAL_PCD_MspInit+0xa0>)
 80078aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ac:	4a0e      	ldr	r2, [pc, #56]	; (80078e8 <HAL_PCD_MspInit+0xa0>)
 80078ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b2:	6353      	str	r3, [r2, #52]	; 0x34
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	4b0b      	ldr	r3, [pc, #44]	; (80078e8 <HAL_PCD_MspInit+0xa0>)
 80078ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078bc:	4a0a      	ldr	r2, [pc, #40]	; (80078e8 <HAL_PCD_MspInit+0xa0>)
 80078be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078c2:	6453      	str	r3, [r2, #68]	; 0x44
 80078c4:	4b08      	ldr	r3, [pc, #32]	; (80078e8 <HAL_PCD_MspInit+0xa0>)
 80078c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80078d0:	2200      	movs	r2, #0
 80078d2:	2100      	movs	r1, #0
 80078d4:	2043      	movs	r0, #67	; 0x43
 80078d6:	f7f9 fcce 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80078da:	2043      	movs	r0, #67	; 0x43
 80078dc:	f7f9 fce7 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80078e0:	bf00      	nop
 80078e2:	3728      	adds	r7, #40	; 0x28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	40023800 	.word	0x40023800
 80078ec:	40020000 	.word	0x40020000

080078f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007904:	4619      	mov	r1, r3
 8007906:	4610      	mov	r0, r2
 8007908:	f7fe face 	bl	8005ea8 <USBD_LL_SetupStage>
}
 800790c:	bf00      	nop
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007926:	78fa      	ldrb	r2, [r7, #3]
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	4613      	mov	r3, r2
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	1a9b      	subs	r3, r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	440b      	add	r3, r1
 8007934:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	4619      	mov	r1, r3
 800793e:	f7fe fb06 	bl	8005f4e <USBD_LL_DataOutStage>
}
 8007942:	bf00      	nop
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	460b      	mov	r3, r1
 8007954:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800795c:	78fa      	ldrb	r2, [r7, #3]
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	4613      	mov	r3, r2
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	440b      	add	r3, r1
 800796a:	3348      	adds	r3, #72	; 0x48
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	78fb      	ldrb	r3, [r7, #3]
 8007970:	4619      	mov	r1, r3
 8007972:	f7fe fb4f 	bl	8006014 <USBD_LL_DataInStage>
}
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800798c:	4618      	mov	r0, r3
 800798e:	f7fe fc53 	bl	8006238 <USBD_LL_SOF>
}
 8007992:	bf00      	nop
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800799a:	b580      	push	{r7, lr}
 800799c:	b084      	sub	sp, #16
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079a2:	2301      	movs	r3, #1
 80079a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d001      	beq.n	80079b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80079ae:	f7ff fd3b 	bl	8007428 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079b8:	7bfa      	ldrb	r2, [r7, #15]
 80079ba:	4611      	mov	r1, r2
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe fc00 	bl	80061c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fe fbb9 	bl	8006140 <USBD_LL_Reset>
}
 80079ce:	bf00      	nop
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fbfb 	bl	80061e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6812      	ldr	r2, [r2, #0]
 80079fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079fe:	f043 0301 	orr.w	r3, r3, #1
 8007a02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d005      	beq.n	8007a18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a0c:	4b04      	ldr	r3, [pc, #16]	; (8007a20 <HAL_PCD_SuspendCallback+0x48>)
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	4a03      	ldr	r2, [pc, #12]	; (8007a20 <HAL_PCD_SuspendCallback+0x48>)
 8007a12:	f043 0306 	orr.w	r3, r3, #6
 8007a16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	e000ed00 	.word	0xe000ed00

08007a24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fbea 	bl	800620c <USBD_LL_Resume>
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a52:	78fa      	ldrb	r2, [r7, #3]
 8007a54:	4611      	mov	r1, r2
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe fc15 	bl	8006286 <USBD_LL_IsoOUTIncomplete>
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a76:	78fa      	ldrb	r2, [r7, #3]
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fbf6 	bl	800626c <USBD_LL_IsoINIncomplete>
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fc02 	bl	80062a0 <USBD_LL_DevConnected>
}
 8007a9c:	bf00      	nop
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fe fbff 	bl	80062b6 <USBD_LL_DevDisconnected>
}
 8007ab8:	bf00      	nop
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d13c      	bne.n	8007b4a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007ad0:	4a20      	ldr	r2, [pc, #128]	; (8007b54 <USBD_LL_Init+0x94>)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a1e      	ldr	r2, [pc, #120]	; (8007b54 <USBD_LL_Init+0x94>)
 8007adc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ae0:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <USBD_LL_Init+0x94>)
 8007ae2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ae6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ae8:	4b1a      	ldr	r3, [pc, #104]	; (8007b54 <USBD_LL_Init+0x94>)
 8007aea:	2204      	movs	r2, #4
 8007aec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007aee:	4b19      	ldr	r3, [pc, #100]	; (8007b54 <USBD_LL_Init+0x94>)
 8007af0:	2202      	movs	r2, #2
 8007af2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007af4:	4b17      	ldr	r3, [pc, #92]	; (8007b54 <USBD_LL_Init+0x94>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007afa:	4b16      	ldr	r3, [pc, #88]	; (8007b54 <USBD_LL_Init+0x94>)
 8007afc:	2202      	movs	r2, #2
 8007afe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b00:	4b14      	ldr	r3, [pc, #80]	; (8007b54 <USBD_LL_Init+0x94>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b06:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <USBD_LL_Init+0x94>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b0c:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <USBD_LL_Init+0x94>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b12:	4b10      	ldr	r3, [pc, #64]	; (8007b54 <USBD_LL_Init+0x94>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b18:	4b0e      	ldr	r3, [pc, #56]	; (8007b54 <USBD_LL_Init+0x94>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b1e:	480d      	ldr	r0, [pc, #52]	; (8007b54 <USBD_LL_Init+0x94>)
 8007b20:	f7fa fd35 	bl	800258e <HAL_PCD_Init>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b2a:	f7ff fc7d 	bl	8007428 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b2e:	2180      	movs	r1, #128	; 0x80
 8007b30:	4808      	ldr	r0, [pc, #32]	; (8007b54 <USBD_LL_Init+0x94>)
 8007b32:	f7fb fe92 	bl	800385a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b36:	2240      	movs	r2, #64	; 0x40
 8007b38:	2100      	movs	r1, #0
 8007b3a:	4806      	ldr	r0, [pc, #24]	; (8007b54 <USBD_LL_Init+0x94>)
 8007b3c:	f7fb fe46 	bl	80037cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b40:	2280      	movs	r2, #128	; 0x80
 8007b42:	2101      	movs	r1, #1
 8007b44:	4803      	ldr	r0, [pc, #12]	; (8007b54 <USBD_LL_Init+0x94>)
 8007b46:	f7fb fe41 	bl	80037cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20001aa0 	.word	0x20001aa0

08007b58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fa fe2a 	bl	80027c8 <HAL_PCD_Start>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 f92a 	bl	8007dd4 <USBD_Get_USB_Status>
 8007b80:	4603      	mov	r3, r0
 8007b82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	4608      	mov	r0, r1
 8007b98:	4611      	mov	r1, r2
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	70fb      	strb	r3, [r7, #3]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	70bb      	strb	r3, [r7, #2]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007bb6:	78bb      	ldrb	r3, [r7, #2]
 8007bb8:	883a      	ldrh	r2, [r7, #0]
 8007bba:	78f9      	ldrb	r1, [r7, #3]
 8007bbc:	f7fb fa0e 	bl	8002fdc <HAL_PCD_EP_Open>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 f904 	bl	8007dd4 <USBD_Get_USB_Status>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bf4:	78fa      	ldrb	r2, [r7, #3]
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fb fa57 	bl	80030ac <HAL_PCD_EP_Close>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 f8e5 	bl	8007dd4 <USBD_Get_USB_Status>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	4611      	mov	r1, r2
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fb fb2f 	bl	800329a <HAL_PCD_EP_SetStall>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 f8c6 	bl	8007dd4 <USBD_Get_USB_Status>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c70:	78fa      	ldrb	r2, [r7, #3]
 8007c72:	4611      	mov	r1, r2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fb fb74 	bl	8003362 <HAL_PCD_EP_ClrStall>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 f8a7 	bl	8007dd4 <USBD_Get_USB_Status>
 8007c86:	4603      	mov	r3, r0
 8007c88:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8007c8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ca6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da0b      	bge.n	8007cc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cb6:	68f9      	ldr	r1, [r7, #12]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	1a9b      	subs	r3, r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	333e      	adds	r3, #62	; 0x3e
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	e00b      	b.n	8007ce0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	1a9b      	subs	r3, r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	440b      	add	r3, r1
 8007cda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007cde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fb f941 	bl	8002f92 <HAL_PCD_SetAddress>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 f85c 	bl	8007dd4 <USBD_Get_USB_Status>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b086      	sub	sp, #24
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	603b      	str	r3, [r7, #0]
 8007d36:	460b      	mov	r3, r1
 8007d38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d48:	7af9      	ldrb	r1, [r7, #11]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	f7fb fa5a 	bl	8003206 <HAL_PCD_EP_Transmit>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 f83b 	bl	8007dd4 <USBD_Get_USB_Status>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007d62:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	603b      	str	r3, [r7, #0]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d8a:	7af9      	ldrb	r1, [r7, #11]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	f7fb f9d6 	bl	8003140 <HAL_PCD_EP_Receive>
 8007d94:	4603      	mov	r3, r0
 8007d96:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 f81a 	bl	8007dd4 <USBD_Get_USB_Status>
 8007da0:	4603      	mov	r3, r0
 8007da2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007da4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b082      	sub	sp, #8
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	460b      	mov	r3, r1
 8007db8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dc0:	78fa      	ldrb	r2, [r7, #3]
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fb fa06 	bl	80031d6 <HAL_PCD_EP_GetRxCount>
 8007dca:	4603      	mov	r3, r0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d817      	bhi.n	8007e18 <USBD_Get_USB_Status+0x44>
 8007de8:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <USBD_Get_USB_Status+0x1c>)
 8007dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dee:	bf00      	nop
 8007df0:	08007e01 	.word	0x08007e01
 8007df4:	08007e07 	.word	0x08007e07
 8007df8:	08007e0d 	.word	0x08007e0d
 8007dfc:	08007e13 	.word	0x08007e13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73fb      	strb	r3, [r7, #15]
    break;
 8007e04:	e00b      	b.n	8007e1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e06:	2303      	movs	r3, #3
 8007e08:	73fb      	strb	r3, [r7, #15]
    break;
 8007e0a:	e008      	b.n	8007e1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e10:	e005      	b.n	8007e1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e12:	2303      	movs	r3, #3
 8007e14:	73fb      	strb	r3, [r7, #15]
    break;
 8007e16:	e002      	b.n	8007e1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e1c:	bf00      	nop
  }
  return usb_status;
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	4603      	mov	r3, r0
 8007e34:	6039      	str	r1, [r7, #0]
 8007e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2212      	movs	r2, #18
 8007e3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e3e:	4b03      	ldr	r3, [pc, #12]	; (8007e4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	2000014c 	.word	0x2000014c

08007e50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4603      	mov	r3, r0
 8007e58:	6039      	str	r1, [r7, #0]
 8007e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2204      	movs	r2, #4
 8007e60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e62:	4b03      	ldr	r3, [pc, #12]	; (8007e70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	20000160 	.word	0x20000160

08007e74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	6039      	str	r1, [r7, #0]
 8007e7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e80:	79fb      	ldrb	r3, [r7, #7]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d105      	bne.n	8007e92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	4907      	ldr	r1, [pc, #28]	; (8007ea8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e8a:	4808      	ldr	r0, [pc, #32]	; (8007eac <USBD_FS_ProductStrDescriptor+0x38>)
 8007e8c:	f7fe ff8f 	bl	8006dae <USBD_GetString>
 8007e90:	e004      	b.n	8007e9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	4904      	ldr	r1, [pc, #16]	; (8007ea8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e96:	4805      	ldr	r0, [pc, #20]	; (8007eac <USBD_FS_ProductStrDescriptor+0x38>)
 8007e98:	f7fe ff89 	bl	8006dae <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e9c:	4b02      	ldr	r3, [pc, #8]	; (8007ea8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20001ea8 	.word	0x20001ea8
 8007eac:	0800c508 	.word	0x0800c508

08007eb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	6039      	str	r1, [r7, #0]
 8007eba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	4904      	ldr	r1, [pc, #16]	; (8007ed0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ec0:	4804      	ldr	r0, [pc, #16]	; (8007ed4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ec2:	f7fe ff74 	bl	8006dae <USBD_GetString>
  return USBD_StrDesc;
 8007ec6:	4b02      	ldr	r3, [pc, #8]	; (8007ed0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20001ea8 	.word	0x20001ea8
 8007ed4:	0800c520 	.word	0x0800c520

08007ed8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	6039      	str	r1, [r7, #0]
 8007ee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	221a      	movs	r2, #26
 8007ee8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007eea:	f000 f843 	bl	8007f74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007eee:	4b02      	ldr	r3, [pc, #8]	; (8007ef8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	20000164 	.word	0x20000164

08007efc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	6039      	str	r1, [r7, #0]
 8007f06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d105      	bne.n	8007f1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	4907      	ldr	r1, [pc, #28]	; (8007f30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f12:	4808      	ldr	r0, [pc, #32]	; (8007f34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f14:	f7fe ff4b 	bl	8006dae <USBD_GetString>
 8007f18:	e004      	b.n	8007f24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	4904      	ldr	r1, [pc, #16]	; (8007f30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f1e:	4805      	ldr	r0, [pc, #20]	; (8007f34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f20:	f7fe ff45 	bl	8006dae <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f24:	4b02      	ldr	r3, [pc, #8]	; (8007f30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	20001ea8 	.word	0x20001ea8
 8007f34:	0800c534 	.word	0x0800c534

08007f38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	6039      	str	r1, [r7, #0]
 8007f42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d105      	bne.n	8007f56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	4907      	ldr	r1, [pc, #28]	; (8007f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f4e:	4808      	ldr	r0, [pc, #32]	; (8007f70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f50:	f7fe ff2d 	bl	8006dae <USBD_GetString>
 8007f54:	e004      	b.n	8007f60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	4904      	ldr	r1, [pc, #16]	; (8007f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f5a:	4805      	ldr	r0, [pc, #20]	; (8007f70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f5c:	f7fe ff27 	bl	8006dae <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f60:	4b02      	ldr	r3, [pc, #8]	; (8007f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20001ea8 	.word	0x20001ea8
 8007f70:	0800c540 	.word	0x0800c540

08007f74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f7a:	4b0f      	ldr	r3, [pc, #60]	; (8007fb8 <Get_SerialNum+0x44>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f80:	4b0e      	ldr	r3, [pc, #56]	; (8007fbc <Get_SerialNum+0x48>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f86:	4b0e      	ldr	r3, [pc, #56]	; (8007fc0 <Get_SerialNum+0x4c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4413      	add	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d009      	beq.n	8007fae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f9a:	2208      	movs	r2, #8
 8007f9c:	4909      	ldr	r1, [pc, #36]	; (8007fc4 <Get_SerialNum+0x50>)
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 f814 	bl	8007fcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fa4:	2204      	movs	r2, #4
 8007fa6:	4908      	ldr	r1, [pc, #32]	; (8007fc8 <Get_SerialNum+0x54>)
 8007fa8:	68b8      	ldr	r0, [r7, #8]
 8007faa:	f000 f80f 	bl	8007fcc <IntToUnicode>
  }
}
 8007fae:	bf00      	nop
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	1fff7a10 	.word	0x1fff7a10
 8007fbc:	1fff7a14 	.word	0x1fff7a14
 8007fc0:	1fff7a18 	.word	0x1fff7a18
 8007fc4:	20000166 	.word	0x20000166
 8007fc8:	20000176 	.word	0x20000176

08007fcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007fde:	2300      	movs	r3, #0
 8007fe0:	75fb      	strb	r3, [r7, #23]
 8007fe2:	e027      	b.n	8008034 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	0f1b      	lsrs	r3, r3, #28
 8007fe8:	2b09      	cmp	r3, #9
 8007fea:	d80b      	bhi.n	8008004 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	0f1b      	lsrs	r3, r3, #28
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	005b      	lsls	r3, r3, #1
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	440b      	add	r3, r1
 8007ffc:	3230      	adds	r2, #48	; 0x30
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	701a      	strb	r2, [r3, #0]
 8008002:	e00a      	b.n	800801a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	0f1b      	lsrs	r3, r3, #28
 8008008:	b2da      	uxtb	r2, r3
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	4619      	mov	r1, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	440b      	add	r3, r1
 8008014:	3237      	adds	r2, #55	; 0x37
 8008016:	b2d2      	uxtb	r2, r2
 8008018:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	011b      	lsls	r3, r3, #4
 800801e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	005b      	lsls	r3, r3, #1
 8008024:	3301      	adds	r3, #1
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	4413      	add	r3, r2
 800802a:	2200      	movs	r2, #0
 800802c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	3301      	adds	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
 8008034:	7dfa      	ldrb	r2, [r7, #23]
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	429a      	cmp	r2, r3
 800803a:	d3d3      	bcc.n	8007fe4 <IntToUnicode+0x18>
  }
}
 800803c:	bf00      	nop
 800803e:	371c      	adds	r7, #28
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008080 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800804c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800804e:	e003      	b.n	8008058 <LoopCopyDataInit>

08008050 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008050:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008052:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008054:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008056:	3104      	adds	r1, #4

08008058 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008058:	480b      	ldr	r0, [pc, #44]	; (8008088 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800805a:	4b0c      	ldr	r3, [pc, #48]	; (800808c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800805c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800805e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008060:	d3f6      	bcc.n	8008050 <CopyDataInit>
  ldr  r2, =_sbss
 8008062:	4a0b      	ldr	r2, [pc, #44]	; (8008090 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008064:	e002      	b.n	800806c <LoopFillZerobss>

08008066 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008066:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008068:	f842 3b04 	str.w	r3, [r2], #4

0800806c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800806c:	4b09      	ldr	r3, [pc, #36]	; (8008094 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800806e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008070:	d3f9      	bcc.n	8008066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008072:	f7ff fac7 	bl	8007604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008076:	f000 f817 	bl	80080a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800807a:	f7ff f887 	bl	800718c <main>
  bx  lr    
 800807e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008080:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008084:	0800c898 	.word	0x0800c898
  ldr  r0, =_sdata
 8008088:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800808c:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 8008090:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 8008094:	200020ac 	.word	0x200020ac

08008098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008098:	e7fe      	b.n	8008098 <ADC_IRQHandler>
	...

0800809c <__errno>:
 800809c:	4b01      	ldr	r3, [pc, #4]	; (80080a4 <__errno+0x8>)
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20000180 	.word	0x20000180

080080a8 <__libc_init_array>:
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	4e0d      	ldr	r6, [pc, #52]	; (80080e0 <__libc_init_array+0x38>)
 80080ac:	4c0d      	ldr	r4, [pc, #52]	; (80080e4 <__libc_init_array+0x3c>)
 80080ae:	1ba4      	subs	r4, r4, r6
 80080b0:	10a4      	asrs	r4, r4, #2
 80080b2:	2500      	movs	r5, #0
 80080b4:	42a5      	cmp	r5, r4
 80080b6:	d109      	bne.n	80080cc <__libc_init_array+0x24>
 80080b8:	4e0b      	ldr	r6, [pc, #44]	; (80080e8 <__libc_init_array+0x40>)
 80080ba:	4c0c      	ldr	r4, [pc, #48]	; (80080ec <__libc_init_array+0x44>)
 80080bc:	f004 fa02 	bl	800c4c4 <_init>
 80080c0:	1ba4      	subs	r4, r4, r6
 80080c2:	10a4      	asrs	r4, r4, #2
 80080c4:	2500      	movs	r5, #0
 80080c6:	42a5      	cmp	r5, r4
 80080c8:	d105      	bne.n	80080d6 <__libc_init_array+0x2e>
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080d0:	4798      	blx	r3
 80080d2:	3501      	adds	r5, #1
 80080d4:	e7ee      	b.n	80080b4 <__libc_init_array+0xc>
 80080d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080da:	4798      	blx	r3
 80080dc:	3501      	adds	r5, #1
 80080de:	e7f2      	b.n	80080c6 <__libc_init_array+0x1e>
 80080e0:	0800c890 	.word	0x0800c890
 80080e4:	0800c890 	.word	0x0800c890
 80080e8:	0800c890 	.word	0x0800c890
 80080ec:	0800c894 	.word	0x0800c894

080080f0 <malloc>:
 80080f0:	4b02      	ldr	r3, [pc, #8]	; (80080fc <malloc+0xc>)
 80080f2:	4601      	mov	r1, r0
 80080f4:	6818      	ldr	r0, [r3, #0]
 80080f6:	f000 b861 	b.w	80081bc <_malloc_r>
 80080fa:	bf00      	nop
 80080fc:	20000180 	.word	0x20000180

08008100 <free>:
 8008100:	4b02      	ldr	r3, [pc, #8]	; (800810c <free+0xc>)
 8008102:	4601      	mov	r1, r0
 8008104:	6818      	ldr	r0, [r3, #0]
 8008106:	f000 b80b 	b.w	8008120 <_free_r>
 800810a:	bf00      	nop
 800810c:	20000180 	.word	0x20000180

08008110 <memset>:
 8008110:	4402      	add	r2, r0
 8008112:	4603      	mov	r3, r0
 8008114:	4293      	cmp	r3, r2
 8008116:	d100      	bne.n	800811a <memset+0xa>
 8008118:	4770      	bx	lr
 800811a:	f803 1b01 	strb.w	r1, [r3], #1
 800811e:	e7f9      	b.n	8008114 <memset+0x4>

08008120 <_free_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4605      	mov	r5, r0
 8008124:	2900      	cmp	r1, #0
 8008126:	d045      	beq.n	80081b4 <_free_r+0x94>
 8008128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800812c:	1f0c      	subs	r4, r1, #4
 800812e:	2b00      	cmp	r3, #0
 8008130:	bfb8      	it	lt
 8008132:	18e4      	addlt	r4, r4, r3
 8008134:	f003 f83d 	bl	800b1b2 <__malloc_lock>
 8008138:	4a1f      	ldr	r2, [pc, #124]	; (80081b8 <_free_r+0x98>)
 800813a:	6813      	ldr	r3, [r2, #0]
 800813c:	4610      	mov	r0, r2
 800813e:	b933      	cbnz	r3, 800814e <_free_r+0x2e>
 8008140:	6063      	str	r3, [r4, #4]
 8008142:	6014      	str	r4, [r2, #0]
 8008144:	4628      	mov	r0, r5
 8008146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800814a:	f003 b833 	b.w	800b1b4 <__malloc_unlock>
 800814e:	42a3      	cmp	r3, r4
 8008150:	d90c      	bls.n	800816c <_free_r+0x4c>
 8008152:	6821      	ldr	r1, [r4, #0]
 8008154:	1862      	adds	r2, r4, r1
 8008156:	4293      	cmp	r3, r2
 8008158:	bf04      	itt	eq
 800815a:	681a      	ldreq	r2, [r3, #0]
 800815c:	685b      	ldreq	r3, [r3, #4]
 800815e:	6063      	str	r3, [r4, #4]
 8008160:	bf04      	itt	eq
 8008162:	1852      	addeq	r2, r2, r1
 8008164:	6022      	streq	r2, [r4, #0]
 8008166:	6004      	str	r4, [r0, #0]
 8008168:	e7ec      	b.n	8008144 <_free_r+0x24>
 800816a:	4613      	mov	r3, r2
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	b10a      	cbz	r2, 8008174 <_free_r+0x54>
 8008170:	42a2      	cmp	r2, r4
 8008172:	d9fa      	bls.n	800816a <_free_r+0x4a>
 8008174:	6819      	ldr	r1, [r3, #0]
 8008176:	1858      	adds	r0, r3, r1
 8008178:	42a0      	cmp	r0, r4
 800817a:	d10b      	bne.n	8008194 <_free_r+0x74>
 800817c:	6820      	ldr	r0, [r4, #0]
 800817e:	4401      	add	r1, r0
 8008180:	1858      	adds	r0, r3, r1
 8008182:	4282      	cmp	r2, r0
 8008184:	6019      	str	r1, [r3, #0]
 8008186:	d1dd      	bne.n	8008144 <_free_r+0x24>
 8008188:	6810      	ldr	r0, [r2, #0]
 800818a:	6852      	ldr	r2, [r2, #4]
 800818c:	605a      	str	r2, [r3, #4]
 800818e:	4401      	add	r1, r0
 8008190:	6019      	str	r1, [r3, #0]
 8008192:	e7d7      	b.n	8008144 <_free_r+0x24>
 8008194:	d902      	bls.n	800819c <_free_r+0x7c>
 8008196:	230c      	movs	r3, #12
 8008198:	602b      	str	r3, [r5, #0]
 800819a:	e7d3      	b.n	8008144 <_free_r+0x24>
 800819c:	6820      	ldr	r0, [r4, #0]
 800819e:	1821      	adds	r1, r4, r0
 80081a0:	428a      	cmp	r2, r1
 80081a2:	bf04      	itt	eq
 80081a4:	6811      	ldreq	r1, [r2, #0]
 80081a6:	6852      	ldreq	r2, [r2, #4]
 80081a8:	6062      	str	r2, [r4, #4]
 80081aa:	bf04      	itt	eq
 80081ac:	1809      	addeq	r1, r1, r0
 80081ae:	6021      	streq	r1, [r4, #0]
 80081b0:	605c      	str	r4, [r3, #4]
 80081b2:	e7c7      	b.n	8008144 <_free_r+0x24>
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
 80081b6:	bf00      	nop
 80081b8:	20000374 	.word	0x20000374

080081bc <_malloc_r>:
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	1ccd      	adds	r5, r1, #3
 80081c0:	f025 0503 	bic.w	r5, r5, #3
 80081c4:	3508      	adds	r5, #8
 80081c6:	2d0c      	cmp	r5, #12
 80081c8:	bf38      	it	cc
 80081ca:	250c      	movcc	r5, #12
 80081cc:	2d00      	cmp	r5, #0
 80081ce:	4606      	mov	r6, r0
 80081d0:	db01      	blt.n	80081d6 <_malloc_r+0x1a>
 80081d2:	42a9      	cmp	r1, r5
 80081d4:	d903      	bls.n	80081de <_malloc_r+0x22>
 80081d6:	230c      	movs	r3, #12
 80081d8:	6033      	str	r3, [r6, #0]
 80081da:	2000      	movs	r0, #0
 80081dc:	bd70      	pop	{r4, r5, r6, pc}
 80081de:	f002 ffe8 	bl	800b1b2 <__malloc_lock>
 80081e2:	4a21      	ldr	r2, [pc, #132]	; (8008268 <_malloc_r+0xac>)
 80081e4:	6814      	ldr	r4, [r2, #0]
 80081e6:	4621      	mov	r1, r4
 80081e8:	b991      	cbnz	r1, 8008210 <_malloc_r+0x54>
 80081ea:	4c20      	ldr	r4, [pc, #128]	; (800826c <_malloc_r+0xb0>)
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	b91b      	cbnz	r3, 80081f8 <_malloc_r+0x3c>
 80081f0:	4630      	mov	r0, r6
 80081f2:	f000 fe93 	bl	8008f1c <_sbrk_r>
 80081f6:	6020      	str	r0, [r4, #0]
 80081f8:	4629      	mov	r1, r5
 80081fa:	4630      	mov	r0, r6
 80081fc:	f000 fe8e 	bl	8008f1c <_sbrk_r>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	d124      	bne.n	800824e <_malloc_r+0x92>
 8008204:	230c      	movs	r3, #12
 8008206:	6033      	str	r3, [r6, #0]
 8008208:	4630      	mov	r0, r6
 800820a:	f002 ffd3 	bl	800b1b4 <__malloc_unlock>
 800820e:	e7e4      	b.n	80081da <_malloc_r+0x1e>
 8008210:	680b      	ldr	r3, [r1, #0]
 8008212:	1b5b      	subs	r3, r3, r5
 8008214:	d418      	bmi.n	8008248 <_malloc_r+0x8c>
 8008216:	2b0b      	cmp	r3, #11
 8008218:	d90f      	bls.n	800823a <_malloc_r+0x7e>
 800821a:	600b      	str	r3, [r1, #0]
 800821c:	50cd      	str	r5, [r1, r3]
 800821e:	18cc      	adds	r4, r1, r3
 8008220:	4630      	mov	r0, r6
 8008222:	f002 ffc7 	bl	800b1b4 <__malloc_unlock>
 8008226:	f104 000b 	add.w	r0, r4, #11
 800822a:	1d23      	adds	r3, r4, #4
 800822c:	f020 0007 	bic.w	r0, r0, #7
 8008230:	1ac3      	subs	r3, r0, r3
 8008232:	d0d3      	beq.n	80081dc <_malloc_r+0x20>
 8008234:	425a      	negs	r2, r3
 8008236:	50e2      	str	r2, [r4, r3]
 8008238:	e7d0      	b.n	80081dc <_malloc_r+0x20>
 800823a:	428c      	cmp	r4, r1
 800823c:	684b      	ldr	r3, [r1, #4]
 800823e:	bf16      	itet	ne
 8008240:	6063      	strne	r3, [r4, #4]
 8008242:	6013      	streq	r3, [r2, #0]
 8008244:	460c      	movne	r4, r1
 8008246:	e7eb      	b.n	8008220 <_malloc_r+0x64>
 8008248:	460c      	mov	r4, r1
 800824a:	6849      	ldr	r1, [r1, #4]
 800824c:	e7cc      	b.n	80081e8 <_malloc_r+0x2c>
 800824e:	1cc4      	adds	r4, r0, #3
 8008250:	f024 0403 	bic.w	r4, r4, #3
 8008254:	42a0      	cmp	r0, r4
 8008256:	d005      	beq.n	8008264 <_malloc_r+0xa8>
 8008258:	1a21      	subs	r1, r4, r0
 800825a:	4630      	mov	r0, r6
 800825c:	f000 fe5e 	bl	8008f1c <_sbrk_r>
 8008260:	3001      	adds	r0, #1
 8008262:	d0cf      	beq.n	8008204 <_malloc_r+0x48>
 8008264:	6025      	str	r5, [r4, #0]
 8008266:	e7db      	b.n	8008220 <_malloc_r+0x64>
 8008268:	20000374 	.word	0x20000374
 800826c:	20000378 	.word	0x20000378

08008270 <__cvt>:
 8008270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008274:	ec55 4b10 	vmov	r4, r5, d0
 8008278:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800827a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800827e:	2d00      	cmp	r5, #0
 8008280:	460e      	mov	r6, r1
 8008282:	4691      	mov	r9, r2
 8008284:	4619      	mov	r1, r3
 8008286:	bfb8      	it	lt
 8008288:	4622      	movlt	r2, r4
 800828a:	462b      	mov	r3, r5
 800828c:	f027 0720 	bic.w	r7, r7, #32
 8008290:	bfbb      	ittet	lt
 8008292:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008296:	461d      	movlt	r5, r3
 8008298:	2300      	movge	r3, #0
 800829a:	232d      	movlt	r3, #45	; 0x2d
 800829c:	bfb8      	it	lt
 800829e:	4614      	movlt	r4, r2
 80082a0:	2f46      	cmp	r7, #70	; 0x46
 80082a2:	700b      	strb	r3, [r1, #0]
 80082a4:	d004      	beq.n	80082b0 <__cvt+0x40>
 80082a6:	2f45      	cmp	r7, #69	; 0x45
 80082a8:	d100      	bne.n	80082ac <__cvt+0x3c>
 80082aa:	3601      	adds	r6, #1
 80082ac:	2102      	movs	r1, #2
 80082ae:	e000      	b.n	80082b2 <__cvt+0x42>
 80082b0:	2103      	movs	r1, #3
 80082b2:	ab03      	add	r3, sp, #12
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	ab02      	add	r3, sp, #8
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	4632      	mov	r2, r6
 80082bc:	4653      	mov	r3, sl
 80082be:	ec45 4b10 	vmov	d0, r4, r5
 80082c2:	f001 fd9d 	bl	8009e00 <_dtoa_r>
 80082c6:	2f47      	cmp	r7, #71	; 0x47
 80082c8:	4680      	mov	r8, r0
 80082ca:	d102      	bne.n	80082d2 <__cvt+0x62>
 80082cc:	f019 0f01 	tst.w	r9, #1
 80082d0:	d026      	beq.n	8008320 <__cvt+0xb0>
 80082d2:	2f46      	cmp	r7, #70	; 0x46
 80082d4:	eb08 0906 	add.w	r9, r8, r6
 80082d8:	d111      	bne.n	80082fe <__cvt+0x8e>
 80082da:	f898 3000 	ldrb.w	r3, [r8]
 80082de:	2b30      	cmp	r3, #48	; 0x30
 80082e0:	d10a      	bne.n	80082f8 <__cvt+0x88>
 80082e2:	2200      	movs	r2, #0
 80082e4:	2300      	movs	r3, #0
 80082e6:	4620      	mov	r0, r4
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7f8 fbf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80082ee:	b918      	cbnz	r0, 80082f8 <__cvt+0x88>
 80082f0:	f1c6 0601 	rsb	r6, r6, #1
 80082f4:	f8ca 6000 	str.w	r6, [sl]
 80082f8:	f8da 3000 	ldr.w	r3, [sl]
 80082fc:	4499      	add	r9, r3
 80082fe:	2200      	movs	r2, #0
 8008300:	2300      	movs	r3, #0
 8008302:	4620      	mov	r0, r4
 8008304:	4629      	mov	r1, r5
 8008306:	f7f8 fbe7 	bl	8000ad8 <__aeabi_dcmpeq>
 800830a:	b938      	cbnz	r0, 800831c <__cvt+0xac>
 800830c:	2230      	movs	r2, #48	; 0x30
 800830e:	9b03      	ldr	r3, [sp, #12]
 8008310:	454b      	cmp	r3, r9
 8008312:	d205      	bcs.n	8008320 <__cvt+0xb0>
 8008314:	1c59      	adds	r1, r3, #1
 8008316:	9103      	str	r1, [sp, #12]
 8008318:	701a      	strb	r2, [r3, #0]
 800831a:	e7f8      	b.n	800830e <__cvt+0x9e>
 800831c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008324:	eba3 0308 	sub.w	r3, r3, r8
 8008328:	4640      	mov	r0, r8
 800832a:	6013      	str	r3, [r2, #0]
 800832c:	b004      	add	sp, #16
 800832e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008332 <__exponent>:
 8008332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008334:	2900      	cmp	r1, #0
 8008336:	4604      	mov	r4, r0
 8008338:	bfba      	itte	lt
 800833a:	4249      	neglt	r1, r1
 800833c:	232d      	movlt	r3, #45	; 0x2d
 800833e:	232b      	movge	r3, #43	; 0x2b
 8008340:	2909      	cmp	r1, #9
 8008342:	f804 2b02 	strb.w	r2, [r4], #2
 8008346:	7043      	strb	r3, [r0, #1]
 8008348:	dd20      	ble.n	800838c <__exponent+0x5a>
 800834a:	f10d 0307 	add.w	r3, sp, #7
 800834e:	461f      	mov	r7, r3
 8008350:	260a      	movs	r6, #10
 8008352:	fb91 f5f6 	sdiv	r5, r1, r6
 8008356:	fb06 1115 	mls	r1, r6, r5, r1
 800835a:	3130      	adds	r1, #48	; 0x30
 800835c:	2d09      	cmp	r5, #9
 800835e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008362:	f103 32ff 	add.w	r2, r3, #4294967295
 8008366:	4629      	mov	r1, r5
 8008368:	dc09      	bgt.n	800837e <__exponent+0x4c>
 800836a:	3130      	adds	r1, #48	; 0x30
 800836c:	3b02      	subs	r3, #2
 800836e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008372:	42bb      	cmp	r3, r7
 8008374:	4622      	mov	r2, r4
 8008376:	d304      	bcc.n	8008382 <__exponent+0x50>
 8008378:	1a10      	subs	r0, r2, r0
 800837a:	b003      	add	sp, #12
 800837c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800837e:	4613      	mov	r3, r2
 8008380:	e7e7      	b.n	8008352 <__exponent+0x20>
 8008382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008386:	f804 2b01 	strb.w	r2, [r4], #1
 800838a:	e7f2      	b.n	8008372 <__exponent+0x40>
 800838c:	2330      	movs	r3, #48	; 0x30
 800838e:	4419      	add	r1, r3
 8008390:	7083      	strb	r3, [r0, #2]
 8008392:	1d02      	adds	r2, r0, #4
 8008394:	70c1      	strb	r1, [r0, #3]
 8008396:	e7ef      	b.n	8008378 <__exponent+0x46>

08008398 <_printf_float>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	b08d      	sub	sp, #52	; 0x34
 800839e:	460c      	mov	r4, r1
 80083a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80083a4:	4616      	mov	r6, r2
 80083a6:	461f      	mov	r7, r3
 80083a8:	4605      	mov	r5, r0
 80083aa:	f002 fed7 	bl	800b15c <_localeconv_r>
 80083ae:	6803      	ldr	r3, [r0, #0]
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7f7 ff14 	bl	80001e0 <strlen>
 80083b8:	2300      	movs	r3, #0
 80083ba:	930a      	str	r3, [sp, #40]	; 0x28
 80083bc:	f8d8 3000 	ldr.w	r3, [r8]
 80083c0:	9005      	str	r0, [sp, #20]
 80083c2:	3307      	adds	r3, #7
 80083c4:	f023 0307 	bic.w	r3, r3, #7
 80083c8:	f103 0208 	add.w	r2, r3, #8
 80083cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80083d0:	f8d4 b000 	ldr.w	fp, [r4]
 80083d4:	f8c8 2000 	str.w	r2, [r8]
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083e0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80083e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083e8:	9307      	str	r3, [sp, #28]
 80083ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80083ee:	f04f 32ff 	mov.w	r2, #4294967295
 80083f2:	4ba7      	ldr	r3, [pc, #668]	; (8008690 <_printf_float+0x2f8>)
 80083f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083f8:	f7f8 fba0 	bl	8000b3c <__aeabi_dcmpun>
 80083fc:	bb70      	cbnz	r0, 800845c <_printf_float+0xc4>
 80083fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008402:	4ba3      	ldr	r3, [pc, #652]	; (8008690 <_printf_float+0x2f8>)
 8008404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008408:	f7f8 fb7a 	bl	8000b00 <__aeabi_dcmple>
 800840c:	bb30      	cbnz	r0, 800845c <_printf_float+0xc4>
 800840e:	2200      	movs	r2, #0
 8008410:	2300      	movs	r3, #0
 8008412:	4640      	mov	r0, r8
 8008414:	4649      	mov	r1, r9
 8008416:	f7f8 fb69 	bl	8000aec <__aeabi_dcmplt>
 800841a:	b110      	cbz	r0, 8008422 <_printf_float+0x8a>
 800841c:	232d      	movs	r3, #45	; 0x2d
 800841e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008422:	4a9c      	ldr	r2, [pc, #624]	; (8008694 <_printf_float+0x2fc>)
 8008424:	4b9c      	ldr	r3, [pc, #624]	; (8008698 <_printf_float+0x300>)
 8008426:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800842a:	bf8c      	ite	hi
 800842c:	4690      	movhi	r8, r2
 800842e:	4698      	movls	r8, r3
 8008430:	2303      	movs	r3, #3
 8008432:	f02b 0204 	bic.w	r2, fp, #4
 8008436:	6123      	str	r3, [r4, #16]
 8008438:	6022      	str	r2, [r4, #0]
 800843a:	f04f 0900 	mov.w	r9, #0
 800843e:	9700      	str	r7, [sp, #0]
 8008440:	4633      	mov	r3, r6
 8008442:	aa0b      	add	r2, sp, #44	; 0x2c
 8008444:	4621      	mov	r1, r4
 8008446:	4628      	mov	r0, r5
 8008448:	f000 f9e6 	bl	8008818 <_printf_common>
 800844c:	3001      	adds	r0, #1
 800844e:	f040 808d 	bne.w	800856c <_printf_float+0x1d4>
 8008452:	f04f 30ff 	mov.w	r0, #4294967295
 8008456:	b00d      	add	sp, #52	; 0x34
 8008458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845c:	4642      	mov	r2, r8
 800845e:	464b      	mov	r3, r9
 8008460:	4640      	mov	r0, r8
 8008462:	4649      	mov	r1, r9
 8008464:	f7f8 fb6a 	bl	8000b3c <__aeabi_dcmpun>
 8008468:	b110      	cbz	r0, 8008470 <_printf_float+0xd8>
 800846a:	4a8c      	ldr	r2, [pc, #560]	; (800869c <_printf_float+0x304>)
 800846c:	4b8c      	ldr	r3, [pc, #560]	; (80086a0 <_printf_float+0x308>)
 800846e:	e7da      	b.n	8008426 <_printf_float+0x8e>
 8008470:	6861      	ldr	r1, [r4, #4]
 8008472:	1c4b      	adds	r3, r1, #1
 8008474:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008478:	a80a      	add	r0, sp, #40	; 0x28
 800847a:	d13e      	bne.n	80084fa <_printf_float+0x162>
 800847c:	2306      	movs	r3, #6
 800847e:	6063      	str	r3, [r4, #4]
 8008480:	2300      	movs	r3, #0
 8008482:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008486:	ab09      	add	r3, sp, #36	; 0x24
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	ec49 8b10 	vmov	d0, r8, r9
 800848e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008492:	6022      	str	r2, [r4, #0]
 8008494:	f8cd a004 	str.w	sl, [sp, #4]
 8008498:	6861      	ldr	r1, [r4, #4]
 800849a:	4628      	mov	r0, r5
 800849c:	f7ff fee8 	bl	8008270 <__cvt>
 80084a0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80084a4:	2b47      	cmp	r3, #71	; 0x47
 80084a6:	4680      	mov	r8, r0
 80084a8:	d109      	bne.n	80084be <_printf_float+0x126>
 80084aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ac:	1cd8      	adds	r0, r3, #3
 80084ae:	db02      	blt.n	80084b6 <_printf_float+0x11e>
 80084b0:	6862      	ldr	r2, [r4, #4]
 80084b2:	4293      	cmp	r3, r2
 80084b4:	dd47      	ble.n	8008546 <_printf_float+0x1ae>
 80084b6:	f1aa 0a02 	sub.w	sl, sl, #2
 80084ba:	fa5f fa8a 	uxtb.w	sl, sl
 80084be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80084c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084c4:	d824      	bhi.n	8008510 <_printf_float+0x178>
 80084c6:	3901      	subs	r1, #1
 80084c8:	4652      	mov	r2, sl
 80084ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084ce:	9109      	str	r1, [sp, #36]	; 0x24
 80084d0:	f7ff ff2f 	bl	8008332 <__exponent>
 80084d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084d6:	1813      	adds	r3, r2, r0
 80084d8:	2a01      	cmp	r2, #1
 80084da:	4681      	mov	r9, r0
 80084dc:	6123      	str	r3, [r4, #16]
 80084de:	dc02      	bgt.n	80084e6 <_printf_float+0x14e>
 80084e0:	6822      	ldr	r2, [r4, #0]
 80084e2:	07d1      	lsls	r1, r2, #31
 80084e4:	d501      	bpl.n	80084ea <_printf_float+0x152>
 80084e6:	3301      	adds	r3, #1
 80084e8:	6123      	str	r3, [r4, #16]
 80084ea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0a5      	beq.n	800843e <_printf_float+0xa6>
 80084f2:	232d      	movs	r3, #45	; 0x2d
 80084f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084f8:	e7a1      	b.n	800843e <_printf_float+0xa6>
 80084fa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80084fe:	f000 8177 	beq.w	80087f0 <_printf_float+0x458>
 8008502:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008506:	d1bb      	bne.n	8008480 <_printf_float+0xe8>
 8008508:	2900      	cmp	r1, #0
 800850a:	d1b9      	bne.n	8008480 <_printf_float+0xe8>
 800850c:	2301      	movs	r3, #1
 800850e:	e7b6      	b.n	800847e <_printf_float+0xe6>
 8008510:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008514:	d119      	bne.n	800854a <_printf_float+0x1b2>
 8008516:	2900      	cmp	r1, #0
 8008518:	6863      	ldr	r3, [r4, #4]
 800851a:	dd0c      	ble.n	8008536 <_printf_float+0x19e>
 800851c:	6121      	str	r1, [r4, #16]
 800851e:	b913      	cbnz	r3, 8008526 <_printf_float+0x18e>
 8008520:	6822      	ldr	r2, [r4, #0]
 8008522:	07d2      	lsls	r2, r2, #31
 8008524:	d502      	bpl.n	800852c <_printf_float+0x194>
 8008526:	3301      	adds	r3, #1
 8008528:	440b      	add	r3, r1
 800852a:	6123      	str	r3, [r4, #16]
 800852c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800852e:	65a3      	str	r3, [r4, #88]	; 0x58
 8008530:	f04f 0900 	mov.w	r9, #0
 8008534:	e7d9      	b.n	80084ea <_printf_float+0x152>
 8008536:	b913      	cbnz	r3, 800853e <_printf_float+0x1a6>
 8008538:	6822      	ldr	r2, [r4, #0]
 800853a:	07d0      	lsls	r0, r2, #31
 800853c:	d501      	bpl.n	8008542 <_printf_float+0x1aa>
 800853e:	3302      	adds	r3, #2
 8008540:	e7f3      	b.n	800852a <_printf_float+0x192>
 8008542:	2301      	movs	r3, #1
 8008544:	e7f1      	b.n	800852a <_printf_float+0x192>
 8008546:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800854a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800854e:	4293      	cmp	r3, r2
 8008550:	db05      	blt.n	800855e <_printf_float+0x1c6>
 8008552:	6822      	ldr	r2, [r4, #0]
 8008554:	6123      	str	r3, [r4, #16]
 8008556:	07d1      	lsls	r1, r2, #31
 8008558:	d5e8      	bpl.n	800852c <_printf_float+0x194>
 800855a:	3301      	adds	r3, #1
 800855c:	e7e5      	b.n	800852a <_printf_float+0x192>
 800855e:	2b00      	cmp	r3, #0
 8008560:	bfd4      	ite	le
 8008562:	f1c3 0302 	rsble	r3, r3, #2
 8008566:	2301      	movgt	r3, #1
 8008568:	4413      	add	r3, r2
 800856a:	e7de      	b.n	800852a <_printf_float+0x192>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	055a      	lsls	r2, r3, #21
 8008570:	d407      	bmi.n	8008582 <_printf_float+0x1ea>
 8008572:	6923      	ldr	r3, [r4, #16]
 8008574:	4642      	mov	r2, r8
 8008576:	4631      	mov	r1, r6
 8008578:	4628      	mov	r0, r5
 800857a:	47b8      	blx	r7
 800857c:	3001      	adds	r0, #1
 800857e:	d12b      	bne.n	80085d8 <_printf_float+0x240>
 8008580:	e767      	b.n	8008452 <_printf_float+0xba>
 8008582:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008586:	f240 80dc 	bls.w	8008742 <_printf_float+0x3aa>
 800858a:	2200      	movs	r2, #0
 800858c:	2300      	movs	r3, #0
 800858e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008592:	f7f8 faa1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008596:	2800      	cmp	r0, #0
 8008598:	d033      	beq.n	8008602 <_printf_float+0x26a>
 800859a:	2301      	movs	r3, #1
 800859c:	4a41      	ldr	r2, [pc, #260]	; (80086a4 <_printf_float+0x30c>)
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	f43f af54 	beq.w	8008452 <_printf_float+0xba>
 80085aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085ae:	429a      	cmp	r2, r3
 80085b0:	db02      	blt.n	80085b8 <_printf_float+0x220>
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	07d8      	lsls	r0, r3, #31
 80085b6:	d50f      	bpl.n	80085d8 <_printf_float+0x240>
 80085b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085bc:	4631      	mov	r1, r6
 80085be:	4628      	mov	r0, r5
 80085c0:	47b8      	blx	r7
 80085c2:	3001      	adds	r0, #1
 80085c4:	f43f af45 	beq.w	8008452 <_printf_float+0xba>
 80085c8:	f04f 0800 	mov.w	r8, #0
 80085cc:	f104 091a 	add.w	r9, r4, #26
 80085d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d2:	3b01      	subs	r3, #1
 80085d4:	4543      	cmp	r3, r8
 80085d6:	dc09      	bgt.n	80085ec <_printf_float+0x254>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	079b      	lsls	r3, r3, #30
 80085dc:	f100 8103 	bmi.w	80087e6 <_printf_float+0x44e>
 80085e0:	68e0      	ldr	r0, [r4, #12]
 80085e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e4:	4298      	cmp	r0, r3
 80085e6:	bfb8      	it	lt
 80085e8:	4618      	movlt	r0, r3
 80085ea:	e734      	b.n	8008456 <_printf_float+0xbe>
 80085ec:	2301      	movs	r3, #1
 80085ee:	464a      	mov	r2, r9
 80085f0:	4631      	mov	r1, r6
 80085f2:	4628      	mov	r0, r5
 80085f4:	47b8      	blx	r7
 80085f6:	3001      	adds	r0, #1
 80085f8:	f43f af2b 	beq.w	8008452 <_printf_float+0xba>
 80085fc:	f108 0801 	add.w	r8, r8, #1
 8008600:	e7e6      	b.n	80085d0 <_printf_float+0x238>
 8008602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008604:	2b00      	cmp	r3, #0
 8008606:	dc2b      	bgt.n	8008660 <_printf_float+0x2c8>
 8008608:	2301      	movs	r3, #1
 800860a:	4a26      	ldr	r2, [pc, #152]	; (80086a4 <_printf_float+0x30c>)
 800860c:	4631      	mov	r1, r6
 800860e:	4628      	mov	r0, r5
 8008610:	47b8      	blx	r7
 8008612:	3001      	adds	r0, #1
 8008614:	f43f af1d 	beq.w	8008452 <_printf_float+0xba>
 8008618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861a:	b923      	cbnz	r3, 8008626 <_printf_float+0x28e>
 800861c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800861e:	b913      	cbnz	r3, 8008626 <_printf_float+0x28e>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	07d9      	lsls	r1, r3, #31
 8008624:	d5d8      	bpl.n	80085d8 <_printf_float+0x240>
 8008626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800862a:	4631      	mov	r1, r6
 800862c:	4628      	mov	r0, r5
 800862e:	47b8      	blx	r7
 8008630:	3001      	adds	r0, #1
 8008632:	f43f af0e 	beq.w	8008452 <_printf_float+0xba>
 8008636:	f04f 0900 	mov.w	r9, #0
 800863a:	f104 0a1a 	add.w	sl, r4, #26
 800863e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008640:	425b      	negs	r3, r3
 8008642:	454b      	cmp	r3, r9
 8008644:	dc01      	bgt.n	800864a <_printf_float+0x2b2>
 8008646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008648:	e794      	b.n	8008574 <_printf_float+0x1dc>
 800864a:	2301      	movs	r3, #1
 800864c:	4652      	mov	r2, sl
 800864e:	4631      	mov	r1, r6
 8008650:	4628      	mov	r0, r5
 8008652:	47b8      	blx	r7
 8008654:	3001      	adds	r0, #1
 8008656:	f43f aefc 	beq.w	8008452 <_printf_float+0xba>
 800865a:	f109 0901 	add.w	r9, r9, #1
 800865e:	e7ee      	b.n	800863e <_printf_float+0x2a6>
 8008660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008664:	429a      	cmp	r2, r3
 8008666:	bfa8      	it	ge
 8008668:	461a      	movge	r2, r3
 800866a:	2a00      	cmp	r2, #0
 800866c:	4691      	mov	r9, r2
 800866e:	dd07      	ble.n	8008680 <_printf_float+0x2e8>
 8008670:	4613      	mov	r3, r2
 8008672:	4631      	mov	r1, r6
 8008674:	4642      	mov	r2, r8
 8008676:	4628      	mov	r0, r5
 8008678:	47b8      	blx	r7
 800867a:	3001      	adds	r0, #1
 800867c:	f43f aee9 	beq.w	8008452 <_printf_float+0xba>
 8008680:	f104 031a 	add.w	r3, r4, #26
 8008684:	f04f 0b00 	mov.w	fp, #0
 8008688:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800868c:	9306      	str	r3, [sp, #24]
 800868e:	e015      	b.n	80086bc <_printf_float+0x324>
 8008690:	7fefffff 	.word	0x7fefffff
 8008694:	0800c570 	.word	0x0800c570
 8008698:	0800c56c 	.word	0x0800c56c
 800869c:	0800c578 	.word	0x0800c578
 80086a0:	0800c574 	.word	0x0800c574
 80086a4:	0800c57c 	.word	0x0800c57c
 80086a8:	2301      	movs	r3, #1
 80086aa:	9a06      	ldr	r2, [sp, #24]
 80086ac:	4631      	mov	r1, r6
 80086ae:	4628      	mov	r0, r5
 80086b0:	47b8      	blx	r7
 80086b2:	3001      	adds	r0, #1
 80086b4:	f43f aecd 	beq.w	8008452 <_printf_float+0xba>
 80086b8:	f10b 0b01 	add.w	fp, fp, #1
 80086bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80086c0:	ebaa 0309 	sub.w	r3, sl, r9
 80086c4:	455b      	cmp	r3, fp
 80086c6:	dcef      	bgt.n	80086a8 <_printf_float+0x310>
 80086c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086cc:	429a      	cmp	r2, r3
 80086ce:	44d0      	add	r8, sl
 80086d0:	db15      	blt.n	80086fe <_printf_float+0x366>
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	07da      	lsls	r2, r3, #31
 80086d6:	d412      	bmi.n	80086fe <_printf_float+0x366>
 80086d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086dc:	eba3 020a 	sub.w	r2, r3, sl
 80086e0:	eba3 0a01 	sub.w	sl, r3, r1
 80086e4:	4592      	cmp	sl, r2
 80086e6:	bfa8      	it	ge
 80086e8:	4692      	movge	sl, r2
 80086ea:	f1ba 0f00 	cmp.w	sl, #0
 80086ee:	dc0e      	bgt.n	800870e <_printf_float+0x376>
 80086f0:	f04f 0800 	mov.w	r8, #0
 80086f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086f8:	f104 091a 	add.w	r9, r4, #26
 80086fc:	e019      	b.n	8008732 <_printf_float+0x39a>
 80086fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008702:	4631      	mov	r1, r6
 8008704:	4628      	mov	r0, r5
 8008706:	47b8      	blx	r7
 8008708:	3001      	adds	r0, #1
 800870a:	d1e5      	bne.n	80086d8 <_printf_float+0x340>
 800870c:	e6a1      	b.n	8008452 <_printf_float+0xba>
 800870e:	4653      	mov	r3, sl
 8008710:	4642      	mov	r2, r8
 8008712:	4631      	mov	r1, r6
 8008714:	4628      	mov	r0, r5
 8008716:	47b8      	blx	r7
 8008718:	3001      	adds	r0, #1
 800871a:	d1e9      	bne.n	80086f0 <_printf_float+0x358>
 800871c:	e699      	b.n	8008452 <_printf_float+0xba>
 800871e:	2301      	movs	r3, #1
 8008720:	464a      	mov	r2, r9
 8008722:	4631      	mov	r1, r6
 8008724:	4628      	mov	r0, r5
 8008726:	47b8      	blx	r7
 8008728:	3001      	adds	r0, #1
 800872a:	f43f ae92 	beq.w	8008452 <_printf_float+0xba>
 800872e:	f108 0801 	add.w	r8, r8, #1
 8008732:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008736:	1a9b      	subs	r3, r3, r2
 8008738:	eba3 030a 	sub.w	r3, r3, sl
 800873c:	4543      	cmp	r3, r8
 800873e:	dcee      	bgt.n	800871e <_printf_float+0x386>
 8008740:	e74a      	b.n	80085d8 <_printf_float+0x240>
 8008742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008744:	2a01      	cmp	r2, #1
 8008746:	dc01      	bgt.n	800874c <_printf_float+0x3b4>
 8008748:	07db      	lsls	r3, r3, #31
 800874a:	d53a      	bpl.n	80087c2 <_printf_float+0x42a>
 800874c:	2301      	movs	r3, #1
 800874e:	4642      	mov	r2, r8
 8008750:	4631      	mov	r1, r6
 8008752:	4628      	mov	r0, r5
 8008754:	47b8      	blx	r7
 8008756:	3001      	adds	r0, #1
 8008758:	f43f ae7b 	beq.w	8008452 <_printf_float+0xba>
 800875c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008760:	4631      	mov	r1, r6
 8008762:	4628      	mov	r0, r5
 8008764:	47b8      	blx	r7
 8008766:	3001      	adds	r0, #1
 8008768:	f108 0801 	add.w	r8, r8, #1
 800876c:	f43f ae71 	beq.w	8008452 <_printf_float+0xba>
 8008770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008772:	2200      	movs	r2, #0
 8008774:	f103 3aff 	add.w	sl, r3, #4294967295
 8008778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800877c:	2300      	movs	r3, #0
 800877e:	f7f8 f9ab 	bl	8000ad8 <__aeabi_dcmpeq>
 8008782:	b9c8      	cbnz	r0, 80087b8 <_printf_float+0x420>
 8008784:	4653      	mov	r3, sl
 8008786:	4642      	mov	r2, r8
 8008788:	4631      	mov	r1, r6
 800878a:	4628      	mov	r0, r5
 800878c:	47b8      	blx	r7
 800878e:	3001      	adds	r0, #1
 8008790:	d10e      	bne.n	80087b0 <_printf_float+0x418>
 8008792:	e65e      	b.n	8008452 <_printf_float+0xba>
 8008794:	2301      	movs	r3, #1
 8008796:	4652      	mov	r2, sl
 8008798:	4631      	mov	r1, r6
 800879a:	4628      	mov	r0, r5
 800879c:	47b8      	blx	r7
 800879e:	3001      	adds	r0, #1
 80087a0:	f43f ae57 	beq.w	8008452 <_printf_float+0xba>
 80087a4:	f108 0801 	add.w	r8, r8, #1
 80087a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087aa:	3b01      	subs	r3, #1
 80087ac:	4543      	cmp	r3, r8
 80087ae:	dcf1      	bgt.n	8008794 <_printf_float+0x3fc>
 80087b0:	464b      	mov	r3, r9
 80087b2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087b6:	e6de      	b.n	8008576 <_printf_float+0x1de>
 80087b8:	f04f 0800 	mov.w	r8, #0
 80087bc:	f104 0a1a 	add.w	sl, r4, #26
 80087c0:	e7f2      	b.n	80087a8 <_printf_float+0x410>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e7df      	b.n	8008786 <_printf_float+0x3ee>
 80087c6:	2301      	movs	r3, #1
 80087c8:	464a      	mov	r2, r9
 80087ca:	4631      	mov	r1, r6
 80087cc:	4628      	mov	r0, r5
 80087ce:	47b8      	blx	r7
 80087d0:	3001      	adds	r0, #1
 80087d2:	f43f ae3e 	beq.w	8008452 <_printf_float+0xba>
 80087d6:	f108 0801 	add.w	r8, r8, #1
 80087da:	68e3      	ldr	r3, [r4, #12]
 80087dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087de:	1a9b      	subs	r3, r3, r2
 80087e0:	4543      	cmp	r3, r8
 80087e2:	dcf0      	bgt.n	80087c6 <_printf_float+0x42e>
 80087e4:	e6fc      	b.n	80085e0 <_printf_float+0x248>
 80087e6:	f04f 0800 	mov.w	r8, #0
 80087ea:	f104 0919 	add.w	r9, r4, #25
 80087ee:	e7f4      	b.n	80087da <_printf_float+0x442>
 80087f0:	2900      	cmp	r1, #0
 80087f2:	f43f ae8b 	beq.w	800850c <_printf_float+0x174>
 80087f6:	2300      	movs	r3, #0
 80087f8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80087fc:	ab09      	add	r3, sp, #36	; 0x24
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	ec49 8b10 	vmov	d0, r8, r9
 8008804:	6022      	str	r2, [r4, #0]
 8008806:	f8cd a004 	str.w	sl, [sp, #4]
 800880a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800880e:	4628      	mov	r0, r5
 8008810:	f7ff fd2e 	bl	8008270 <__cvt>
 8008814:	4680      	mov	r8, r0
 8008816:	e648      	b.n	80084aa <_printf_float+0x112>

08008818 <_printf_common>:
 8008818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800881c:	4691      	mov	r9, r2
 800881e:	461f      	mov	r7, r3
 8008820:	688a      	ldr	r2, [r1, #8]
 8008822:	690b      	ldr	r3, [r1, #16]
 8008824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008828:	4293      	cmp	r3, r2
 800882a:	bfb8      	it	lt
 800882c:	4613      	movlt	r3, r2
 800882e:	f8c9 3000 	str.w	r3, [r9]
 8008832:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008836:	4606      	mov	r6, r0
 8008838:	460c      	mov	r4, r1
 800883a:	b112      	cbz	r2, 8008842 <_printf_common+0x2a>
 800883c:	3301      	adds	r3, #1
 800883e:	f8c9 3000 	str.w	r3, [r9]
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	0699      	lsls	r1, r3, #26
 8008846:	bf42      	ittt	mi
 8008848:	f8d9 3000 	ldrmi.w	r3, [r9]
 800884c:	3302      	addmi	r3, #2
 800884e:	f8c9 3000 	strmi.w	r3, [r9]
 8008852:	6825      	ldr	r5, [r4, #0]
 8008854:	f015 0506 	ands.w	r5, r5, #6
 8008858:	d107      	bne.n	800886a <_printf_common+0x52>
 800885a:	f104 0a19 	add.w	sl, r4, #25
 800885e:	68e3      	ldr	r3, [r4, #12]
 8008860:	f8d9 2000 	ldr.w	r2, [r9]
 8008864:	1a9b      	subs	r3, r3, r2
 8008866:	42ab      	cmp	r3, r5
 8008868:	dc28      	bgt.n	80088bc <_printf_common+0xa4>
 800886a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800886e:	6822      	ldr	r2, [r4, #0]
 8008870:	3300      	adds	r3, #0
 8008872:	bf18      	it	ne
 8008874:	2301      	movne	r3, #1
 8008876:	0692      	lsls	r2, r2, #26
 8008878:	d42d      	bmi.n	80088d6 <_printf_common+0xbe>
 800887a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800887e:	4639      	mov	r1, r7
 8008880:	4630      	mov	r0, r6
 8008882:	47c0      	blx	r8
 8008884:	3001      	adds	r0, #1
 8008886:	d020      	beq.n	80088ca <_printf_common+0xb2>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	68e5      	ldr	r5, [r4, #12]
 800888c:	f8d9 2000 	ldr.w	r2, [r9]
 8008890:	f003 0306 	and.w	r3, r3, #6
 8008894:	2b04      	cmp	r3, #4
 8008896:	bf08      	it	eq
 8008898:	1aad      	subeq	r5, r5, r2
 800889a:	68a3      	ldr	r3, [r4, #8]
 800889c:	6922      	ldr	r2, [r4, #16]
 800889e:	bf0c      	ite	eq
 80088a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088a4:	2500      	movne	r5, #0
 80088a6:	4293      	cmp	r3, r2
 80088a8:	bfc4      	itt	gt
 80088aa:	1a9b      	subgt	r3, r3, r2
 80088ac:	18ed      	addgt	r5, r5, r3
 80088ae:	f04f 0900 	mov.w	r9, #0
 80088b2:	341a      	adds	r4, #26
 80088b4:	454d      	cmp	r5, r9
 80088b6:	d11a      	bne.n	80088ee <_printf_common+0xd6>
 80088b8:	2000      	movs	r0, #0
 80088ba:	e008      	b.n	80088ce <_printf_common+0xb6>
 80088bc:	2301      	movs	r3, #1
 80088be:	4652      	mov	r2, sl
 80088c0:	4639      	mov	r1, r7
 80088c2:	4630      	mov	r0, r6
 80088c4:	47c0      	blx	r8
 80088c6:	3001      	adds	r0, #1
 80088c8:	d103      	bne.n	80088d2 <_printf_common+0xba>
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295
 80088ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d2:	3501      	adds	r5, #1
 80088d4:	e7c3      	b.n	800885e <_printf_common+0x46>
 80088d6:	18e1      	adds	r1, r4, r3
 80088d8:	1c5a      	adds	r2, r3, #1
 80088da:	2030      	movs	r0, #48	; 0x30
 80088dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088e0:	4422      	add	r2, r4
 80088e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088ea:	3302      	adds	r3, #2
 80088ec:	e7c5      	b.n	800887a <_printf_common+0x62>
 80088ee:	2301      	movs	r3, #1
 80088f0:	4622      	mov	r2, r4
 80088f2:	4639      	mov	r1, r7
 80088f4:	4630      	mov	r0, r6
 80088f6:	47c0      	blx	r8
 80088f8:	3001      	adds	r0, #1
 80088fa:	d0e6      	beq.n	80088ca <_printf_common+0xb2>
 80088fc:	f109 0901 	add.w	r9, r9, #1
 8008900:	e7d8      	b.n	80088b4 <_printf_common+0x9c>
	...

08008904 <_printf_i>:
 8008904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008908:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800890c:	460c      	mov	r4, r1
 800890e:	7e09      	ldrb	r1, [r1, #24]
 8008910:	b085      	sub	sp, #20
 8008912:	296e      	cmp	r1, #110	; 0x6e
 8008914:	4617      	mov	r7, r2
 8008916:	4606      	mov	r6, r0
 8008918:	4698      	mov	r8, r3
 800891a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800891c:	f000 80b3 	beq.w	8008a86 <_printf_i+0x182>
 8008920:	d822      	bhi.n	8008968 <_printf_i+0x64>
 8008922:	2963      	cmp	r1, #99	; 0x63
 8008924:	d036      	beq.n	8008994 <_printf_i+0x90>
 8008926:	d80a      	bhi.n	800893e <_printf_i+0x3a>
 8008928:	2900      	cmp	r1, #0
 800892a:	f000 80b9 	beq.w	8008aa0 <_printf_i+0x19c>
 800892e:	2958      	cmp	r1, #88	; 0x58
 8008930:	f000 8083 	beq.w	8008a3a <_printf_i+0x136>
 8008934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008938:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800893c:	e032      	b.n	80089a4 <_printf_i+0xa0>
 800893e:	2964      	cmp	r1, #100	; 0x64
 8008940:	d001      	beq.n	8008946 <_printf_i+0x42>
 8008942:	2969      	cmp	r1, #105	; 0x69
 8008944:	d1f6      	bne.n	8008934 <_printf_i+0x30>
 8008946:	6820      	ldr	r0, [r4, #0]
 8008948:	6813      	ldr	r3, [r2, #0]
 800894a:	0605      	lsls	r5, r0, #24
 800894c:	f103 0104 	add.w	r1, r3, #4
 8008950:	d52a      	bpl.n	80089a8 <_printf_i+0xa4>
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6011      	str	r1, [r2, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	da03      	bge.n	8008962 <_printf_i+0x5e>
 800895a:	222d      	movs	r2, #45	; 0x2d
 800895c:	425b      	negs	r3, r3
 800895e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008962:	486f      	ldr	r0, [pc, #444]	; (8008b20 <_printf_i+0x21c>)
 8008964:	220a      	movs	r2, #10
 8008966:	e039      	b.n	80089dc <_printf_i+0xd8>
 8008968:	2973      	cmp	r1, #115	; 0x73
 800896a:	f000 809d 	beq.w	8008aa8 <_printf_i+0x1a4>
 800896e:	d808      	bhi.n	8008982 <_printf_i+0x7e>
 8008970:	296f      	cmp	r1, #111	; 0x6f
 8008972:	d020      	beq.n	80089b6 <_printf_i+0xb2>
 8008974:	2970      	cmp	r1, #112	; 0x70
 8008976:	d1dd      	bne.n	8008934 <_printf_i+0x30>
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	f043 0320 	orr.w	r3, r3, #32
 800897e:	6023      	str	r3, [r4, #0]
 8008980:	e003      	b.n	800898a <_printf_i+0x86>
 8008982:	2975      	cmp	r1, #117	; 0x75
 8008984:	d017      	beq.n	80089b6 <_printf_i+0xb2>
 8008986:	2978      	cmp	r1, #120	; 0x78
 8008988:	d1d4      	bne.n	8008934 <_printf_i+0x30>
 800898a:	2378      	movs	r3, #120	; 0x78
 800898c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008990:	4864      	ldr	r0, [pc, #400]	; (8008b24 <_printf_i+0x220>)
 8008992:	e055      	b.n	8008a40 <_printf_i+0x13c>
 8008994:	6813      	ldr	r3, [r2, #0]
 8008996:	1d19      	adds	r1, r3, #4
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6011      	str	r1, [r2, #0]
 800899c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089a4:	2301      	movs	r3, #1
 80089a6:	e08c      	b.n	8008ac2 <_printf_i+0x1be>
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6011      	str	r1, [r2, #0]
 80089ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089b0:	bf18      	it	ne
 80089b2:	b21b      	sxthne	r3, r3
 80089b4:	e7cf      	b.n	8008956 <_printf_i+0x52>
 80089b6:	6813      	ldr	r3, [r2, #0]
 80089b8:	6825      	ldr	r5, [r4, #0]
 80089ba:	1d18      	adds	r0, r3, #4
 80089bc:	6010      	str	r0, [r2, #0]
 80089be:	0628      	lsls	r0, r5, #24
 80089c0:	d501      	bpl.n	80089c6 <_printf_i+0xc2>
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	e002      	b.n	80089cc <_printf_i+0xc8>
 80089c6:	0668      	lsls	r0, r5, #25
 80089c8:	d5fb      	bpl.n	80089c2 <_printf_i+0xbe>
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	4854      	ldr	r0, [pc, #336]	; (8008b20 <_printf_i+0x21c>)
 80089ce:	296f      	cmp	r1, #111	; 0x6f
 80089d0:	bf14      	ite	ne
 80089d2:	220a      	movne	r2, #10
 80089d4:	2208      	moveq	r2, #8
 80089d6:	2100      	movs	r1, #0
 80089d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089dc:	6865      	ldr	r5, [r4, #4]
 80089de:	60a5      	str	r5, [r4, #8]
 80089e0:	2d00      	cmp	r5, #0
 80089e2:	f2c0 8095 	blt.w	8008b10 <_printf_i+0x20c>
 80089e6:	6821      	ldr	r1, [r4, #0]
 80089e8:	f021 0104 	bic.w	r1, r1, #4
 80089ec:	6021      	str	r1, [r4, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d13d      	bne.n	8008a6e <_printf_i+0x16a>
 80089f2:	2d00      	cmp	r5, #0
 80089f4:	f040 808e 	bne.w	8008b14 <_printf_i+0x210>
 80089f8:	4665      	mov	r5, ip
 80089fa:	2a08      	cmp	r2, #8
 80089fc:	d10b      	bne.n	8008a16 <_printf_i+0x112>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	07db      	lsls	r3, r3, #31
 8008a02:	d508      	bpl.n	8008a16 <_printf_i+0x112>
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	6862      	ldr	r2, [r4, #4]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	bfde      	ittt	le
 8008a0c:	2330      	movle	r3, #48	; 0x30
 8008a0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a16:	ebac 0305 	sub.w	r3, ip, r5
 8008a1a:	6123      	str	r3, [r4, #16]
 8008a1c:	f8cd 8000 	str.w	r8, [sp]
 8008a20:	463b      	mov	r3, r7
 8008a22:	aa03      	add	r2, sp, #12
 8008a24:	4621      	mov	r1, r4
 8008a26:	4630      	mov	r0, r6
 8008a28:	f7ff fef6 	bl	8008818 <_printf_common>
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d14d      	bne.n	8008acc <_printf_i+0x1c8>
 8008a30:	f04f 30ff 	mov.w	r0, #4294967295
 8008a34:	b005      	add	sp, #20
 8008a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a3a:	4839      	ldr	r0, [pc, #228]	; (8008b20 <_printf_i+0x21c>)
 8008a3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008a40:	6813      	ldr	r3, [r2, #0]
 8008a42:	6821      	ldr	r1, [r4, #0]
 8008a44:	1d1d      	adds	r5, r3, #4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6015      	str	r5, [r2, #0]
 8008a4a:	060a      	lsls	r2, r1, #24
 8008a4c:	d50b      	bpl.n	8008a66 <_printf_i+0x162>
 8008a4e:	07ca      	lsls	r2, r1, #31
 8008a50:	bf44      	itt	mi
 8008a52:	f041 0120 	orrmi.w	r1, r1, #32
 8008a56:	6021      	strmi	r1, [r4, #0]
 8008a58:	b91b      	cbnz	r3, 8008a62 <_printf_i+0x15e>
 8008a5a:	6822      	ldr	r2, [r4, #0]
 8008a5c:	f022 0220 	bic.w	r2, r2, #32
 8008a60:	6022      	str	r2, [r4, #0]
 8008a62:	2210      	movs	r2, #16
 8008a64:	e7b7      	b.n	80089d6 <_printf_i+0xd2>
 8008a66:	064d      	lsls	r5, r1, #25
 8008a68:	bf48      	it	mi
 8008a6a:	b29b      	uxthmi	r3, r3
 8008a6c:	e7ef      	b.n	8008a4e <_printf_i+0x14a>
 8008a6e:	4665      	mov	r5, ip
 8008a70:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a74:	fb02 3311 	mls	r3, r2, r1, r3
 8008a78:	5cc3      	ldrb	r3, [r0, r3]
 8008a7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008a7e:	460b      	mov	r3, r1
 8008a80:	2900      	cmp	r1, #0
 8008a82:	d1f5      	bne.n	8008a70 <_printf_i+0x16c>
 8008a84:	e7b9      	b.n	80089fa <_printf_i+0xf6>
 8008a86:	6813      	ldr	r3, [r2, #0]
 8008a88:	6825      	ldr	r5, [r4, #0]
 8008a8a:	6961      	ldr	r1, [r4, #20]
 8008a8c:	1d18      	adds	r0, r3, #4
 8008a8e:	6010      	str	r0, [r2, #0]
 8008a90:	0628      	lsls	r0, r5, #24
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	d501      	bpl.n	8008a9a <_printf_i+0x196>
 8008a96:	6019      	str	r1, [r3, #0]
 8008a98:	e002      	b.n	8008aa0 <_printf_i+0x19c>
 8008a9a:	066a      	lsls	r2, r5, #25
 8008a9c:	d5fb      	bpl.n	8008a96 <_printf_i+0x192>
 8008a9e:	8019      	strh	r1, [r3, #0]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	6123      	str	r3, [r4, #16]
 8008aa4:	4665      	mov	r5, ip
 8008aa6:	e7b9      	b.n	8008a1c <_printf_i+0x118>
 8008aa8:	6813      	ldr	r3, [r2, #0]
 8008aaa:	1d19      	adds	r1, r3, #4
 8008aac:	6011      	str	r1, [r2, #0]
 8008aae:	681d      	ldr	r5, [r3, #0]
 8008ab0:	6862      	ldr	r2, [r4, #4]
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	f7f7 fb9b 	bl	80001f0 <memchr>
 8008aba:	b108      	cbz	r0, 8008ac0 <_printf_i+0x1bc>
 8008abc:	1b40      	subs	r0, r0, r5
 8008abe:	6060      	str	r0, [r4, #4]
 8008ac0:	6863      	ldr	r3, [r4, #4]
 8008ac2:	6123      	str	r3, [r4, #16]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aca:	e7a7      	b.n	8008a1c <_printf_i+0x118>
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	462a      	mov	r2, r5
 8008ad0:	4639      	mov	r1, r7
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	47c0      	blx	r8
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	d0aa      	beq.n	8008a30 <_printf_i+0x12c>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	079b      	lsls	r3, r3, #30
 8008ade:	d413      	bmi.n	8008b08 <_printf_i+0x204>
 8008ae0:	68e0      	ldr	r0, [r4, #12]
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	4298      	cmp	r0, r3
 8008ae6:	bfb8      	it	lt
 8008ae8:	4618      	movlt	r0, r3
 8008aea:	e7a3      	b.n	8008a34 <_printf_i+0x130>
 8008aec:	2301      	movs	r3, #1
 8008aee:	464a      	mov	r2, r9
 8008af0:	4639      	mov	r1, r7
 8008af2:	4630      	mov	r0, r6
 8008af4:	47c0      	blx	r8
 8008af6:	3001      	adds	r0, #1
 8008af8:	d09a      	beq.n	8008a30 <_printf_i+0x12c>
 8008afa:	3501      	adds	r5, #1
 8008afc:	68e3      	ldr	r3, [r4, #12]
 8008afe:	9a03      	ldr	r2, [sp, #12]
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	42ab      	cmp	r3, r5
 8008b04:	dcf2      	bgt.n	8008aec <_printf_i+0x1e8>
 8008b06:	e7eb      	b.n	8008ae0 <_printf_i+0x1dc>
 8008b08:	2500      	movs	r5, #0
 8008b0a:	f104 0919 	add.w	r9, r4, #25
 8008b0e:	e7f5      	b.n	8008afc <_printf_i+0x1f8>
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1ac      	bne.n	8008a6e <_printf_i+0x16a>
 8008b14:	7803      	ldrb	r3, [r0, #0]
 8008b16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b1e:	e76c      	b.n	80089fa <_printf_i+0xf6>
 8008b20:	0800c57e 	.word	0x0800c57e
 8008b24:	0800c58f 	.word	0x0800c58f

08008b28 <_scanf_float>:
 8008b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2c:	469a      	mov	sl, r3
 8008b2e:	688b      	ldr	r3, [r1, #8]
 8008b30:	4616      	mov	r6, r2
 8008b32:	1e5a      	subs	r2, r3, #1
 8008b34:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008b38:	b087      	sub	sp, #28
 8008b3a:	bf83      	ittte	hi
 8008b3c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008b40:	189b      	addhi	r3, r3, r2
 8008b42:	9301      	strhi	r3, [sp, #4]
 8008b44:	2300      	movls	r3, #0
 8008b46:	bf86      	itte	hi
 8008b48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008b4c:	608b      	strhi	r3, [r1, #8]
 8008b4e:	9301      	strls	r3, [sp, #4]
 8008b50:	680b      	ldr	r3, [r1, #0]
 8008b52:	4688      	mov	r8, r1
 8008b54:	f04f 0b00 	mov.w	fp, #0
 8008b58:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008b5c:	f848 3b1c 	str.w	r3, [r8], #28
 8008b60:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008b64:	4607      	mov	r7, r0
 8008b66:	460c      	mov	r4, r1
 8008b68:	4645      	mov	r5, r8
 8008b6a:	465a      	mov	r2, fp
 8008b6c:	46d9      	mov	r9, fp
 8008b6e:	f8cd b008 	str.w	fp, [sp, #8]
 8008b72:	68a1      	ldr	r1, [r4, #8]
 8008b74:	b181      	cbz	r1, 8008b98 <_scanf_float+0x70>
 8008b76:	6833      	ldr	r3, [r6, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b49      	cmp	r3, #73	; 0x49
 8008b7c:	d071      	beq.n	8008c62 <_scanf_float+0x13a>
 8008b7e:	d84d      	bhi.n	8008c1c <_scanf_float+0xf4>
 8008b80:	2b39      	cmp	r3, #57	; 0x39
 8008b82:	d840      	bhi.n	8008c06 <_scanf_float+0xde>
 8008b84:	2b31      	cmp	r3, #49	; 0x31
 8008b86:	f080 8088 	bcs.w	8008c9a <_scanf_float+0x172>
 8008b8a:	2b2d      	cmp	r3, #45	; 0x2d
 8008b8c:	f000 8090 	beq.w	8008cb0 <_scanf_float+0x188>
 8008b90:	d815      	bhi.n	8008bbe <_scanf_float+0x96>
 8008b92:	2b2b      	cmp	r3, #43	; 0x2b
 8008b94:	f000 808c 	beq.w	8008cb0 <_scanf_float+0x188>
 8008b98:	f1b9 0f00 	cmp.w	r9, #0
 8008b9c:	d003      	beq.n	8008ba6 <_scanf_float+0x7e>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	3a01      	subs	r2, #1
 8008ba8:	2a01      	cmp	r2, #1
 8008baa:	f200 80ea 	bhi.w	8008d82 <_scanf_float+0x25a>
 8008bae:	4545      	cmp	r5, r8
 8008bb0:	f200 80dc 	bhi.w	8008d6c <_scanf_float+0x244>
 8008bb4:	2601      	movs	r6, #1
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	b007      	add	sp, #28
 8008bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bbe:	2b2e      	cmp	r3, #46	; 0x2e
 8008bc0:	f000 809f 	beq.w	8008d02 <_scanf_float+0x1da>
 8008bc4:	2b30      	cmp	r3, #48	; 0x30
 8008bc6:	d1e7      	bne.n	8008b98 <_scanf_float+0x70>
 8008bc8:	6820      	ldr	r0, [r4, #0]
 8008bca:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008bce:	d064      	beq.n	8008c9a <_scanf_float+0x172>
 8008bd0:	9b01      	ldr	r3, [sp, #4]
 8008bd2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008bd6:	6020      	str	r0, [r4, #0]
 8008bd8:	f109 0901 	add.w	r9, r9, #1
 8008bdc:	b11b      	cbz	r3, 8008be6 <_scanf_float+0xbe>
 8008bde:	3b01      	subs	r3, #1
 8008be0:	3101      	adds	r1, #1
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	60a1      	str	r1, [r4, #8]
 8008be6:	68a3      	ldr	r3, [r4, #8]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	60a3      	str	r3, [r4, #8]
 8008bec:	6923      	ldr	r3, [r4, #16]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	6123      	str	r3, [r4, #16]
 8008bf2:	6873      	ldr	r3, [r6, #4]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	6073      	str	r3, [r6, #4]
 8008bfa:	f340 80ac 	ble.w	8008d56 <_scanf_float+0x22e>
 8008bfe:	6833      	ldr	r3, [r6, #0]
 8008c00:	3301      	adds	r3, #1
 8008c02:	6033      	str	r3, [r6, #0]
 8008c04:	e7b5      	b.n	8008b72 <_scanf_float+0x4a>
 8008c06:	2b45      	cmp	r3, #69	; 0x45
 8008c08:	f000 8085 	beq.w	8008d16 <_scanf_float+0x1ee>
 8008c0c:	2b46      	cmp	r3, #70	; 0x46
 8008c0e:	d06a      	beq.n	8008ce6 <_scanf_float+0x1be>
 8008c10:	2b41      	cmp	r3, #65	; 0x41
 8008c12:	d1c1      	bne.n	8008b98 <_scanf_float+0x70>
 8008c14:	2a01      	cmp	r2, #1
 8008c16:	d1bf      	bne.n	8008b98 <_scanf_float+0x70>
 8008c18:	2202      	movs	r2, #2
 8008c1a:	e046      	b.n	8008caa <_scanf_float+0x182>
 8008c1c:	2b65      	cmp	r3, #101	; 0x65
 8008c1e:	d07a      	beq.n	8008d16 <_scanf_float+0x1ee>
 8008c20:	d818      	bhi.n	8008c54 <_scanf_float+0x12c>
 8008c22:	2b54      	cmp	r3, #84	; 0x54
 8008c24:	d066      	beq.n	8008cf4 <_scanf_float+0x1cc>
 8008c26:	d811      	bhi.n	8008c4c <_scanf_float+0x124>
 8008c28:	2b4e      	cmp	r3, #78	; 0x4e
 8008c2a:	d1b5      	bne.n	8008b98 <_scanf_float+0x70>
 8008c2c:	2a00      	cmp	r2, #0
 8008c2e:	d146      	bne.n	8008cbe <_scanf_float+0x196>
 8008c30:	f1b9 0f00 	cmp.w	r9, #0
 8008c34:	d145      	bne.n	8008cc2 <_scanf_float+0x19a>
 8008c36:	6821      	ldr	r1, [r4, #0]
 8008c38:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008c3c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008c40:	d13f      	bne.n	8008cc2 <_scanf_float+0x19a>
 8008c42:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008c46:	6021      	str	r1, [r4, #0]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	e02e      	b.n	8008caa <_scanf_float+0x182>
 8008c4c:	2b59      	cmp	r3, #89	; 0x59
 8008c4e:	d01e      	beq.n	8008c8e <_scanf_float+0x166>
 8008c50:	2b61      	cmp	r3, #97	; 0x61
 8008c52:	e7de      	b.n	8008c12 <_scanf_float+0xea>
 8008c54:	2b6e      	cmp	r3, #110	; 0x6e
 8008c56:	d0e9      	beq.n	8008c2c <_scanf_float+0x104>
 8008c58:	d815      	bhi.n	8008c86 <_scanf_float+0x15e>
 8008c5a:	2b66      	cmp	r3, #102	; 0x66
 8008c5c:	d043      	beq.n	8008ce6 <_scanf_float+0x1be>
 8008c5e:	2b69      	cmp	r3, #105	; 0x69
 8008c60:	d19a      	bne.n	8008b98 <_scanf_float+0x70>
 8008c62:	f1bb 0f00 	cmp.w	fp, #0
 8008c66:	d138      	bne.n	8008cda <_scanf_float+0x1b2>
 8008c68:	f1b9 0f00 	cmp.w	r9, #0
 8008c6c:	d197      	bne.n	8008b9e <_scanf_float+0x76>
 8008c6e:	6821      	ldr	r1, [r4, #0]
 8008c70:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008c74:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008c78:	d195      	bne.n	8008ba6 <_scanf_float+0x7e>
 8008c7a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008c7e:	6021      	str	r1, [r4, #0]
 8008c80:	f04f 0b01 	mov.w	fp, #1
 8008c84:	e011      	b.n	8008caa <_scanf_float+0x182>
 8008c86:	2b74      	cmp	r3, #116	; 0x74
 8008c88:	d034      	beq.n	8008cf4 <_scanf_float+0x1cc>
 8008c8a:	2b79      	cmp	r3, #121	; 0x79
 8008c8c:	d184      	bne.n	8008b98 <_scanf_float+0x70>
 8008c8e:	f1bb 0f07 	cmp.w	fp, #7
 8008c92:	d181      	bne.n	8008b98 <_scanf_float+0x70>
 8008c94:	f04f 0b08 	mov.w	fp, #8
 8008c98:	e007      	b.n	8008caa <_scanf_float+0x182>
 8008c9a:	eb12 0f0b 	cmn.w	r2, fp
 8008c9e:	f47f af7b 	bne.w	8008b98 <_scanf_float+0x70>
 8008ca2:	6821      	ldr	r1, [r4, #0]
 8008ca4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008ca8:	6021      	str	r1, [r4, #0]
 8008caa:	702b      	strb	r3, [r5, #0]
 8008cac:	3501      	adds	r5, #1
 8008cae:	e79a      	b.n	8008be6 <_scanf_float+0xbe>
 8008cb0:	6821      	ldr	r1, [r4, #0]
 8008cb2:	0608      	lsls	r0, r1, #24
 8008cb4:	f57f af70 	bpl.w	8008b98 <_scanf_float+0x70>
 8008cb8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008cbc:	e7f4      	b.n	8008ca8 <_scanf_float+0x180>
 8008cbe:	2a02      	cmp	r2, #2
 8008cc0:	d047      	beq.n	8008d52 <_scanf_float+0x22a>
 8008cc2:	f1bb 0f01 	cmp.w	fp, #1
 8008cc6:	d003      	beq.n	8008cd0 <_scanf_float+0x1a8>
 8008cc8:	f1bb 0f04 	cmp.w	fp, #4
 8008ccc:	f47f af64 	bne.w	8008b98 <_scanf_float+0x70>
 8008cd0:	f10b 0b01 	add.w	fp, fp, #1
 8008cd4:	fa5f fb8b 	uxtb.w	fp, fp
 8008cd8:	e7e7      	b.n	8008caa <_scanf_float+0x182>
 8008cda:	f1bb 0f03 	cmp.w	fp, #3
 8008cde:	d0f7      	beq.n	8008cd0 <_scanf_float+0x1a8>
 8008ce0:	f1bb 0f05 	cmp.w	fp, #5
 8008ce4:	e7f2      	b.n	8008ccc <_scanf_float+0x1a4>
 8008ce6:	f1bb 0f02 	cmp.w	fp, #2
 8008cea:	f47f af55 	bne.w	8008b98 <_scanf_float+0x70>
 8008cee:	f04f 0b03 	mov.w	fp, #3
 8008cf2:	e7da      	b.n	8008caa <_scanf_float+0x182>
 8008cf4:	f1bb 0f06 	cmp.w	fp, #6
 8008cf8:	f47f af4e 	bne.w	8008b98 <_scanf_float+0x70>
 8008cfc:	f04f 0b07 	mov.w	fp, #7
 8008d00:	e7d3      	b.n	8008caa <_scanf_float+0x182>
 8008d02:	6821      	ldr	r1, [r4, #0]
 8008d04:	0588      	lsls	r0, r1, #22
 8008d06:	f57f af47 	bpl.w	8008b98 <_scanf_float+0x70>
 8008d0a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8008d0e:	6021      	str	r1, [r4, #0]
 8008d10:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d14:	e7c9      	b.n	8008caa <_scanf_float+0x182>
 8008d16:	6821      	ldr	r1, [r4, #0]
 8008d18:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8008d1c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008d20:	d006      	beq.n	8008d30 <_scanf_float+0x208>
 8008d22:	0548      	lsls	r0, r1, #21
 8008d24:	f57f af38 	bpl.w	8008b98 <_scanf_float+0x70>
 8008d28:	f1b9 0f00 	cmp.w	r9, #0
 8008d2c:	f43f af3b 	beq.w	8008ba6 <_scanf_float+0x7e>
 8008d30:	0588      	lsls	r0, r1, #22
 8008d32:	bf58      	it	pl
 8008d34:	9802      	ldrpl	r0, [sp, #8]
 8008d36:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008d3a:	bf58      	it	pl
 8008d3c:	eba9 0000 	subpl.w	r0, r9, r0
 8008d40:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008d44:	bf58      	it	pl
 8008d46:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008d4a:	6021      	str	r1, [r4, #0]
 8008d4c:	f04f 0900 	mov.w	r9, #0
 8008d50:	e7ab      	b.n	8008caa <_scanf_float+0x182>
 8008d52:	2203      	movs	r2, #3
 8008d54:	e7a9      	b.n	8008caa <_scanf_float+0x182>
 8008d56:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d5a:	9205      	str	r2, [sp, #20]
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	4638      	mov	r0, r7
 8008d60:	4798      	blx	r3
 8008d62:	9a05      	ldr	r2, [sp, #20]
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f43f af04 	beq.w	8008b72 <_scanf_float+0x4a>
 8008d6a:	e715      	b.n	8008b98 <_scanf_float+0x70>
 8008d6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008d74:	4632      	mov	r2, r6
 8008d76:	4638      	mov	r0, r7
 8008d78:	4798      	blx	r3
 8008d7a:	6923      	ldr	r3, [r4, #16]
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	6123      	str	r3, [r4, #16]
 8008d80:	e715      	b.n	8008bae <_scanf_float+0x86>
 8008d82:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008d86:	2b06      	cmp	r3, #6
 8008d88:	d80a      	bhi.n	8008da0 <_scanf_float+0x278>
 8008d8a:	f1bb 0f02 	cmp.w	fp, #2
 8008d8e:	d968      	bls.n	8008e62 <_scanf_float+0x33a>
 8008d90:	f1ab 0b03 	sub.w	fp, fp, #3
 8008d94:	fa5f fb8b 	uxtb.w	fp, fp
 8008d98:	eba5 0b0b 	sub.w	fp, r5, fp
 8008d9c:	455d      	cmp	r5, fp
 8008d9e:	d14b      	bne.n	8008e38 <_scanf_float+0x310>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	05da      	lsls	r2, r3, #23
 8008da4:	d51f      	bpl.n	8008de6 <_scanf_float+0x2be>
 8008da6:	055b      	lsls	r3, r3, #21
 8008da8:	d468      	bmi.n	8008e7c <_scanf_float+0x354>
 8008daa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	2965      	cmp	r1, #101	; 0x65
 8008db2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008db6:	f105 3bff 	add.w	fp, r5, #4294967295
 8008dba:	6123      	str	r3, [r4, #16]
 8008dbc:	d00d      	beq.n	8008dda <_scanf_float+0x2b2>
 8008dbe:	2945      	cmp	r1, #69	; 0x45
 8008dc0:	d00b      	beq.n	8008dda <_scanf_float+0x2b2>
 8008dc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dc6:	4632      	mov	r2, r6
 8008dc8:	4638      	mov	r0, r7
 8008dca:	4798      	blx	r3
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	f1a5 0b02 	sub.w	fp, r5, #2
 8008dd8:	6123      	str	r3, [r4, #16]
 8008dda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dde:	4632      	mov	r2, r6
 8008de0:	4638      	mov	r0, r7
 8008de2:	4798      	blx	r3
 8008de4:	465d      	mov	r5, fp
 8008de6:	6826      	ldr	r6, [r4, #0]
 8008de8:	f016 0610 	ands.w	r6, r6, #16
 8008dec:	d17a      	bne.n	8008ee4 <_scanf_float+0x3bc>
 8008dee:	702e      	strb	r6, [r5, #0]
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dfa:	d142      	bne.n	8008e82 <_scanf_float+0x35a>
 8008dfc:	9b02      	ldr	r3, [sp, #8]
 8008dfe:	eba9 0303 	sub.w	r3, r9, r3
 8008e02:	425a      	negs	r2, r3
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d149      	bne.n	8008e9c <_scanf_float+0x374>
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4641      	mov	r1, r8
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	f000 fecb 	bl	8009ba8 <_strtod_r>
 8008e12:	6825      	ldr	r5, [r4, #0]
 8008e14:	f8da 3000 	ldr.w	r3, [sl]
 8008e18:	f015 0f02 	tst.w	r5, #2
 8008e1c:	f103 0204 	add.w	r2, r3, #4
 8008e20:	ec59 8b10 	vmov	r8, r9, d0
 8008e24:	f8ca 2000 	str.w	r2, [sl]
 8008e28:	d043      	beq.n	8008eb2 <_scanf_float+0x38a>
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	e9c3 8900 	strd	r8, r9, [r3]
 8008e30:	68e3      	ldr	r3, [r4, #12]
 8008e32:	3301      	adds	r3, #1
 8008e34:	60e3      	str	r3, [r4, #12]
 8008e36:	e6be      	b.n	8008bb6 <_scanf_float+0x8e>
 8008e38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008e40:	4632      	mov	r2, r6
 8008e42:	4638      	mov	r0, r7
 8008e44:	4798      	blx	r3
 8008e46:	6923      	ldr	r3, [r4, #16]
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	6123      	str	r3, [r4, #16]
 8008e4c:	e7a6      	b.n	8008d9c <_scanf_float+0x274>
 8008e4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e52:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008e56:	4632      	mov	r2, r6
 8008e58:	4638      	mov	r0, r7
 8008e5a:	4798      	blx	r3
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	6123      	str	r3, [r4, #16]
 8008e62:	4545      	cmp	r5, r8
 8008e64:	d8f3      	bhi.n	8008e4e <_scanf_float+0x326>
 8008e66:	e6a5      	b.n	8008bb4 <_scanf_float+0x8c>
 8008e68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008e70:	4632      	mov	r2, r6
 8008e72:	4638      	mov	r0, r7
 8008e74:	4798      	blx	r3
 8008e76:	6923      	ldr	r3, [r4, #16]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	6123      	str	r3, [r4, #16]
 8008e7c:	4545      	cmp	r5, r8
 8008e7e:	d8f3      	bhi.n	8008e68 <_scanf_float+0x340>
 8008e80:	e698      	b.n	8008bb4 <_scanf_float+0x8c>
 8008e82:	9b03      	ldr	r3, [sp, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d0bf      	beq.n	8008e08 <_scanf_float+0x2e0>
 8008e88:	9904      	ldr	r1, [sp, #16]
 8008e8a:	230a      	movs	r3, #10
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	3101      	adds	r1, #1
 8008e90:	4638      	mov	r0, r7
 8008e92:	f000 ff15 	bl	8009cc0 <_strtol_r>
 8008e96:	9b03      	ldr	r3, [sp, #12]
 8008e98:	9d04      	ldr	r5, [sp, #16]
 8008e9a:	1ac2      	subs	r2, r0, r3
 8008e9c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008ea0:	429d      	cmp	r5, r3
 8008ea2:	bf28      	it	cs
 8008ea4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008ea8:	490f      	ldr	r1, [pc, #60]	; (8008ee8 <_scanf_float+0x3c0>)
 8008eaa:	4628      	mov	r0, r5
 8008eac:	f000 f84c 	bl	8008f48 <siprintf>
 8008eb0:	e7aa      	b.n	8008e08 <_scanf_float+0x2e0>
 8008eb2:	f015 0504 	ands.w	r5, r5, #4
 8008eb6:	d1b8      	bne.n	8008e2a <_scanf_float+0x302>
 8008eb8:	681f      	ldr	r7, [r3, #0]
 8008eba:	ee10 2a10 	vmov	r2, s0
 8008ebe:	464b      	mov	r3, r9
 8008ec0:	ee10 0a10 	vmov	r0, s0
 8008ec4:	4649      	mov	r1, r9
 8008ec6:	f7f7 fe39 	bl	8000b3c <__aeabi_dcmpun>
 8008eca:	b128      	cbz	r0, 8008ed8 <_scanf_float+0x3b0>
 8008ecc:	4628      	mov	r0, r5
 8008ece:	f000 f835 	bl	8008f3c <nanf>
 8008ed2:	ed87 0a00 	vstr	s0, [r7]
 8008ed6:	e7ab      	b.n	8008e30 <_scanf_float+0x308>
 8008ed8:	4640      	mov	r0, r8
 8008eda:	4649      	mov	r1, r9
 8008edc:	f7f7 fe8c 	bl	8000bf8 <__aeabi_d2f>
 8008ee0:	6038      	str	r0, [r7, #0]
 8008ee2:	e7a5      	b.n	8008e30 <_scanf_float+0x308>
 8008ee4:	2600      	movs	r6, #0
 8008ee6:	e666      	b.n	8008bb6 <_scanf_float+0x8e>
 8008ee8:	0800c5a0 	.word	0x0800c5a0

08008eec <iprintf>:
 8008eec:	b40f      	push	{r0, r1, r2, r3}
 8008eee:	4b0a      	ldr	r3, [pc, #40]	; (8008f18 <iprintf+0x2c>)
 8008ef0:	b513      	push	{r0, r1, r4, lr}
 8008ef2:	681c      	ldr	r4, [r3, #0]
 8008ef4:	b124      	cbz	r4, 8008f00 <iprintf+0x14>
 8008ef6:	69a3      	ldr	r3, [r4, #24]
 8008ef8:	b913      	cbnz	r3, 8008f00 <iprintf+0x14>
 8008efa:	4620      	mov	r0, r4
 8008efc:	f001 fd78 	bl	800a9f0 <__sinit>
 8008f00:	ab05      	add	r3, sp, #20
 8008f02:	9a04      	ldr	r2, [sp, #16]
 8008f04:	68a1      	ldr	r1, [r4, #8]
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f002 fedd 	bl	800bcc8 <_vfiprintf_r>
 8008f0e:	b002      	add	sp, #8
 8008f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f14:	b004      	add	sp, #16
 8008f16:	4770      	bx	lr
 8008f18:	20000180 	.word	0x20000180

08008f1c <_sbrk_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4c06      	ldr	r4, [pc, #24]	; (8008f38 <_sbrk_r+0x1c>)
 8008f20:	2300      	movs	r3, #0
 8008f22:	4605      	mov	r5, r0
 8008f24:	4608      	mov	r0, r1
 8008f26:	6023      	str	r3, [r4, #0]
 8008f28:	f7fe fb40 	bl	80075ac <_sbrk>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_sbrk_r+0x1a>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_sbrk_r+0x1a>
 8008f34:	602b      	str	r3, [r5, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	200020a8 	.word	0x200020a8

08008f3c <nanf>:
 8008f3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008f44 <nanf+0x8>
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	7fc00000 	.word	0x7fc00000

08008f48 <siprintf>:
 8008f48:	b40e      	push	{r1, r2, r3}
 8008f4a:	b500      	push	{lr}
 8008f4c:	b09c      	sub	sp, #112	; 0x70
 8008f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f50:	9002      	str	r0, [sp, #8]
 8008f52:	9006      	str	r0, [sp, #24]
 8008f54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f58:	4809      	ldr	r0, [pc, #36]	; (8008f80 <siprintf+0x38>)
 8008f5a:	9107      	str	r1, [sp, #28]
 8008f5c:	9104      	str	r1, [sp, #16]
 8008f5e:	4909      	ldr	r1, [pc, #36]	; (8008f84 <siprintf+0x3c>)
 8008f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f64:	9105      	str	r1, [sp, #20]
 8008f66:	6800      	ldr	r0, [r0, #0]
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	a902      	add	r1, sp, #8
 8008f6c:	f002 fd8a 	bl	800ba84 <_svfiprintf_r>
 8008f70:	9b02      	ldr	r3, [sp, #8]
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]
 8008f76:	b01c      	add	sp, #112	; 0x70
 8008f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f7c:	b003      	add	sp, #12
 8008f7e:	4770      	bx	lr
 8008f80:	20000180 	.word	0x20000180
 8008f84:	ffff0208 	.word	0xffff0208

08008f88 <sulp>:
 8008f88:	b570      	push	{r4, r5, r6, lr}
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	460d      	mov	r5, r1
 8008f8e:	ec45 4b10 	vmov	d0, r4, r5
 8008f92:	4616      	mov	r6, r2
 8008f94:	f002 fbda 	bl	800b74c <__ulp>
 8008f98:	ec51 0b10 	vmov	r0, r1, d0
 8008f9c:	b17e      	cbz	r6, 8008fbe <sulp+0x36>
 8008f9e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008fa2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	dd09      	ble.n	8008fbe <sulp+0x36>
 8008faa:	051b      	lsls	r3, r3, #20
 8008fac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008fb0:	2400      	movs	r4, #0
 8008fb2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008fb6:	4622      	mov	r2, r4
 8008fb8:	462b      	mov	r3, r5
 8008fba:	f7f7 fb25 	bl	8000608 <__aeabi_dmul>
 8008fbe:	bd70      	pop	{r4, r5, r6, pc}

08008fc0 <_strtod_l>:
 8008fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc4:	461f      	mov	r7, r3
 8008fc6:	b0a1      	sub	sp, #132	; 0x84
 8008fc8:	2300      	movs	r3, #0
 8008fca:	4681      	mov	r9, r0
 8008fcc:	4638      	mov	r0, r7
 8008fce:	460e      	mov	r6, r1
 8008fd0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008fd2:	931c      	str	r3, [sp, #112]	; 0x70
 8008fd4:	f002 f8bf 	bl	800b156 <__localeconv_l>
 8008fd8:	4680      	mov	r8, r0
 8008fda:	6800      	ldr	r0, [r0, #0]
 8008fdc:	f7f7 f900 	bl	80001e0 <strlen>
 8008fe0:	f04f 0a00 	mov.w	sl, #0
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	f04f 0b00 	mov.w	fp, #0
 8008fea:	961b      	str	r6, [sp, #108]	; 0x6c
 8008fec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fee:	781a      	ldrb	r2, [r3, #0]
 8008ff0:	2a0d      	cmp	r2, #13
 8008ff2:	d832      	bhi.n	800905a <_strtod_l+0x9a>
 8008ff4:	2a09      	cmp	r2, #9
 8008ff6:	d236      	bcs.n	8009066 <_strtod_l+0xa6>
 8008ff8:	2a00      	cmp	r2, #0
 8008ffa:	d03e      	beq.n	800907a <_strtod_l+0xba>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	930d      	str	r3, [sp, #52]	; 0x34
 8009000:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009002:	782b      	ldrb	r3, [r5, #0]
 8009004:	2b30      	cmp	r3, #48	; 0x30
 8009006:	f040 80ac 	bne.w	8009162 <_strtod_l+0x1a2>
 800900a:	786b      	ldrb	r3, [r5, #1]
 800900c:	2b58      	cmp	r3, #88	; 0x58
 800900e:	d001      	beq.n	8009014 <_strtod_l+0x54>
 8009010:	2b78      	cmp	r3, #120	; 0x78
 8009012:	d167      	bne.n	80090e4 <_strtod_l+0x124>
 8009014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009016:	9301      	str	r3, [sp, #4]
 8009018:	ab1c      	add	r3, sp, #112	; 0x70
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	9702      	str	r7, [sp, #8]
 800901e:	ab1d      	add	r3, sp, #116	; 0x74
 8009020:	4a88      	ldr	r2, [pc, #544]	; (8009244 <_strtod_l+0x284>)
 8009022:	a91b      	add	r1, sp, #108	; 0x6c
 8009024:	4648      	mov	r0, r9
 8009026:	f001 fdbc 	bl	800aba2 <__gethex>
 800902a:	f010 0407 	ands.w	r4, r0, #7
 800902e:	4606      	mov	r6, r0
 8009030:	d005      	beq.n	800903e <_strtod_l+0x7e>
 8009032:	2c06      	cmp	r4, #6
 8009034:	d12b      	bne.n	800908e <_strtod_l+0xce>
 8009036:	3501      	adds	r5, #1
 8009038:	2300      	movs	r3, #0
 800903a:	951b      	str	r5, [sp, #108]	; 0x6c
 800903c:	930d      	str	r3, [sp, #52]	; 0x34
 800903e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009040:	2b00      	cmp	r3, #0
 8009042:	f040 859a 	bne.w	8009b7a <_strtod_l+0xbba>
 8009046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009048:	b1e3      	cbz	r3, 8009084 <_strtod_l+0xc4>
 800904a:	4652      	mov	r2, sl
 800904c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009050:	ec43 2b10 	vmov	d0, r2, r3
 8009054:	b021      	add	sp, #132	; 0x84
 8009056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905a:	2a2b      	cmp	r2, #43	; 0x2b
 800905c:	d015      	beq.n	800908a <_strtod_l+0xca>
 800905e:	2a2d      	cmp	r2, #45	; 0x2d
 8009060:	d004      	beq.n	800906c <_strtod_l+0xac>
 8009062:	2a20      	cmp	r2, #32
 8009064:	d1ca      	bne.n	8008ffc <_strtod_l+0x3c>
 8009066:	3301      	adds	r3, #1
 8009068:	931b      	str	r3, [sp, #108]	; 0x6c
 800906a:	e7bf      	b.n	8008fec <_strtod_l+0x2c>
 800906c:	2201      	movs	r2, #1
 800906e:	920d      	str	r2, [sp, #52]	; 0x34
 8009070:	1c5a      	adds	r2, r3, #1
 8009072:	921b      	str	r2, [sp, #108]	; 0x6c
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1c2      	bne.n	8009000 <_strtod_l+0x40>
 800907a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800907c:	961b      	str	r6, [sp, #108]	; 0x6c
 800907e:	2b00      	cmp	r3, #0
 8009080:	f040 8579 	bne.w	8009b76 <_strtod_l+0xbb6>
 8009084:	4652      	mov	r2, sl
 8009086:	465b      	mov	r3, fp
 8009088:	e7e2      	b.n	8009050 <_strtod_l+0x90>
 800908a:	2200      	movs	r2, #0
 800908c:	e7ef      	b.n	800906e <_strtod_l+0xae>
 800908e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009090:	b13a      	cbz	r2, 80090a2 <_strtod_l+0xe2>
 8009092:	2135      	movs	r1, #53	; 0x35
 8009094:	a81e      	add	r0, sp, #120	; 0x78
 8009096:	f002 fc51 	bl	800b93c <__copybits>
 800909a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800909c:	4648      	mov	r0, r9
 800909e:	f002 f8be 	bl	800b21e <_Bfree>
 80090a2:	3c01      	subs	r4, #1
 80090a4:	2c04      	cmp	r4, #4
 80090a6:	d806      	bhi.n	80090b6 <_strtod_l+0xf6>
 80090a8:	e8df f004 	tbb	[pc, r4]
 80090ac:	1714030a 	.word	0x1714030a
 80090b0:	0a          	.byte	0x0a
 80090b1:	00          	.byte	0x00
 80090b2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80090b6:	0730      	lsls	r0, r6, #28
 80090b8:	d5c1      	bpl.n	800903e <_strtod_l+0x7e>
 80090ba:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80090be:	e7be      	b.n	800903e <_strtod_l+0x7e>
 80090c0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80090c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80090c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80090ca:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80090ce:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80090d2:	e7f0      	b.n	80090b6 <_strtod_l+0xf6>
 80090d4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009248 <_strtod_l+0x288>
 80090d8:	e7ed      	b.n	80090b6 <_strtod_l+0xf6>
 80090da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80090de:	f04f 3aff 	mov.w	sl, #4294967295
 80090e2:	e7e8      	b.n	80090b6 <_strtod_l+0xf6>
 80090e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090e6:	1c5a      	adds	r2, r3, #1
 80090e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80090ea:	785b      	ldrb	r3, [r3, #1]
 80090ec:	2b30      	cmp	r3, #48	; 0x30
 80090ee:	d0f9      	beq.n	80090e4 <_strtod_l+0x124>
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d0a4      	beq.n	800903e <_strtod_l+0x7e>
 80090f4:	2301      	movs	r3, #1
 80090f6:	2500      	movs	r5, #0
 80090f8:	9306      	str	r3, [sp, #24]
 80090fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090fc:	9308      	str	r3, [sp, #32]
 80090fe:	9507      	str	r5, [sp, #28]
 8009100:	9505      	str	r5, [sp, #20]
 8009102:	220a      	movs	r2, #10
 8009104:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009106:	7807      	ldrb	r7, [r0, #0]
 8009108:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800910c:	b2d9      	uxtb	r1, r3
 800910e:	2909      	cmp	r1, #9
 8009110:	d929      	bls.n	8009166 <_strtod_l+0x1a6>
 8009112:	4622      	mov	r2, r4
 8009114:	f8d8 1000 	ldr.w	r1, [r8]
 8009118:	f002 ff2f 	bl	800bf7a <strncmp>
 800911c:	2800      	cmp	r0, #0
 800911e:	d031      	beq.n	8009184 <_strtod_l+0x1c4>
 8009120:	2000      	movs	r0, #0
 8009122:	9c05      	ldr	r4, [sp, #20]
 8009124:	9004      	str	r0, [sp, #16]
 8009126:	463b      	mov	r3, r7
 8009128:	4602      	mov	r2, r0
 800912a:	2b65      	cmp	r3, #101	; 0x65
 800912c:	d001      	beq.n	8009132 <_strtod_l+0x172>
 800912e:	2b45      	cmp	r3, #69	; 0x45
 8009130:	d114      	bne.n	800915c <_strtod_l+0x19c>
 8009132:	b924      	cbnz	r4, 800913e <_strtod_l+0x17e>
 8009134:	b910      	cbnz	r0, 800913c <_strtod_l+0x17c>
 8009136:	9b06      	ldr	r3, [sp, #24]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d09e      	beq.n	800907a <_strtod_l+0xba>
 800913c:	2400      	movs	r4, #0
 800913e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009140:	1c73      	adds	r3, r6, #1
 8009142:	931b      	str	r3, [sp, #108]	; 0x6c
 8009144:	7873      	ldrb	r3, [r6, #1]
 8009146:	2b2b      	cmp	r3, #43	; 0x2b
 8009148:	d078      	beq.n	800923c <_strtod_l+0x27c>
 800914a:	2b2d      	cmp	r3, #45	; 0x2d
 800914c:	d070      	beq.n	8009230 <_strtod_l+0x270>
 800914e:	f04f 0c00 	mov.w	ip, #0
 8009152:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009156:	2f09      	cmp	r7, #9
 8009158:	d97c      	bls.n	8009254 <_strtod_l+0x294>
 800915a:	961b      	str	r6, [sp, #108]	; 0x6c
 800915c:	f04f 0e00 	mov.w	lr, #0
 8009160:	e09a      	b.n	8009298 <_strtod_l+0x2d8>
 8009162:	2300      	movs	r3, #0
 8009164:	e7c7      	b.n	80090f6 <_strtod_l+0x136>
 8009166:	9905      	ldr	r1, [sp, #20]
 8009168:	2908      	cmp	r1, #8
 800916a:	bfdd      	ittte	le
 800916c:	9907      	ldrle	r1, [sp, #28]
 800916e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009172:	9307      	strle	r3, [sp, #28]
 8009174:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009178:	9b05      	ldr	r3, [sp, #20]
 800917a:	3001      	adds	r0, #1
 800917c:	3301      	adds	r3, #1
 800917e:	9305      	str	r3, [sp, #20]
 8009180:	901b      	str	r0, [sp, #108]	; 0x6c
 8009182:	e7bf      	b.n	8009104 <_strtod_l+0x144>
 8009184:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009186:	191a      	adds	r2, r3, r4
 8009188:	921b      	str	r2, [sp, #108]	; 0x6c
 800918a:	9a05      	ldr	r2, [sp, #20]
 800918c:	5d1b      	ldrb	r3, [r3, r4]
 800918e:	2a00      	cmp	r2, #0
 8009190:	d037      	beq.n	8009202 <_strtod_l+0x242>
 8009192:	9c05      	ldr	r4, [sp, #20]
 8009194:	4602      	mov	r2, r0
 8009196:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800919a:	2909      	cmp	r1, #9
 800919c:	d913      	bls.n	80091c6 <_strtod_l+0x206>
 800919e:	2101      	movs	r1, #1
 80091a0:	9104      	str	r1, [sp, #16]
 80091a2:	e7c2      	b.n	800912a <_strtod_l+0x16a>
 80091a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80091a6:	1c5a      	adds	r2, r3, #1
 80091a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80091aa:	785b      	ldrb	r3, [r3, #1]
 80091ac:	3001      	adds	r0, #1
 80091ae:	2b30      	cmp	r3, #48	; 0x30
 80091b0:	d0f8      	beq.n	80091a4 <_strtod_l+0x1e4>
 80091b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80091b6:	2a08      	cmp	r2, #8
 80091b8:	f200 84e4 	bhi.w	8009b84 <_strtod_l+0xbc4>
 80091bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80091be:	9208      	str	r2, [sp, #32]
 80091c0:	4602      	mov	r2, r0
 80091c2:	2000      	movs	r0, #0
 80091c4:	4604      	mov	r4, r0
 80091c6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80091ca:	f100 0101 	add.w	r1, r0, #1
 80091ce:	d012      	beq.n	80091f6 <_strtod_l+0x236>
 80091d0:	440a      	add	r2, r1
 80091d2:	eb00 0c04 	add.w	ip, r0, r4
 80091d6:	4621      	mov	r1, r4
 80091d8:	270a      	movs	r7, #10
 80091da:	458c      	cmp	ip, r1
 80091dc:	d113      	bne.n	8009206 <_strtod_l+0x246>
 80091de:	1821      	adds	r1, r4, r0
 80091e0:	2908      	cmp	r1, #8
 80091e2:	f104 0401 	add.w	r4, r4, #1
 80091e6:	4404      	add	r4, r0
 80091e8:	dc19      	bgt.n	800921e <_strtod_l+0x25e>
 80091ea:	9b07      	ldr	r3, [sp, #28]
 80091ec:	210a      	movs	r1, #10
 80091ee:	fb01 e303 	mla	r3, r1, r3, lr
 80091f2:	9307      	str	r3, [sp, #28]
 80091f4:	2100      	movs	r1, #0
 80091f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80091f8:	1c58      	adds	r0, r3, #1
 80091fa:	901b      	str	r0, [sp, #108]	; 0x6c
 80091fc:	785b      	ldrb	r3, [r3, #1]
 80091fe:	4608      	mov	r0, r1
 8009200:	e7c9      	b.n	8009196 <_strtod_l+0x1d6>
 8009202:	9805      	ldr	r0, [sp, #20]
 8009204:	e7d3      	b.n	80091ae <_strtod_l+0x1ee>
 8009206:	2908      	cmp	r1, #8
 8009208:	f101 0101 	add.w	r1, r1, #1
 800920c:	dc03      	bgt.n	8009216 <_strtod_l+0x256>
 800920e:	9b07      	ldr	r3, [sp, #28]
 8009210:	437b      	muls	r3, r7
 8009212:	9307      	str	r3, [sp, #28]
 8009214:	e7e1      	b.n	80091da <_strtod_l+0x21a>
 8009216:	2910      	cmp	r1, #16
 8009218:	bfd8      	it	le
 800921a:	437d      	mulle	r5, r7
 800921c:	e7dd      	b.n	80091da <_strtod_l+0x21a>
 800921e:	2c10      	cmp	r4, #16
 8009220:	bfdc      	itt	le
 8009222:	210a      	movle	r1, #10
 8009224:	fb01 e505 	mlale	r5, r1, r5, lr
 8009228:	e7e4      	b.n	80091f4 <_strtod_l+0x234>
 800922a:	2301      	movs	r3, #1
 800922c:	9304      	str	r3, [sp, #16]
 800922e:	e781      	b.n	8009134 <_strtod_l+0x174>
 8009230:	f04f 0c01 	mov.w	ip, #1
 8009234:	1cb3      	adds	r3, r6, #2
 8009236:	931b      	str	r3, [sp, #108]	; 0x6c
 8009238:	78b3      	ldrb	r3, [r6, #2]
 800923a:	e78a      	b.n	8009152 <_strtod_l+0x192>
 800923c:	f04f 0c00 	mov.w	ip, #0
 8009240:	e7f8      	b.n	8009234 <_strtod_l+0x274>
 8009242:	bf00      	nop
 8009244:	0800c5a8 	.word	0x0800c5a8
 8009248:	7ff00000 	.word	0x7ff00000
 800924c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800924e:	1c5f      	adds	r7, r3, #1
 8009250:	971b      	str	r7, [sp, #108]	; 0x6c
 8009252:	785b      	ldrb	r3, [r3, #1]
 8009254:	2b30      	cmp	r3, #48	; 0x30
 8009256:	d0f9      	beq.n	800924c <_strtod_l+0x28c>
 8009258:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800925c:	2f08      	cmp	r7, #8
 800925e:	f63f af7d 	bhi.w	800915c <_strtod_l+0x19c>
 8009262:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009266:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009268:	930a      	str	r3, [sp, #40]	; 0x28
 800926a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800926c:	1c5f      	adds	r7, r3, #1
 800926e:	971b      	str	r7, [sp, #108]	; 0x6c
 8009270:	785b      	ldrb	r3, [r3, #1]
 8009272:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009276:	f1b8 0f09 	cmp.w	r8, #9
 800927a:	d937      	bls.n	80092ec <_strtod_l+0x32c>
 800927c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800927e:	1a7f      	subs	r7, r7, r1
 8009280:	2f08      	cmp	r7, #8
 8009282:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009286:	dc37      	bgt.n	80092f8 <_strtod_l+0x338>
 8009288:	45be      	cmp	lr, r7
 800928a:	bfa8      	it	ge
 800928c:	46be      	movge	lr, r7
 800928e:	f1bc 0f00 	cmp.w	ip, #0
 8009292:	d001      	beq.n	8009298 <_strtod_l+0x2d8>
 8009294:	f1ce 0e00 	rsb	lr, lr, #0
 8009298:	2c00      	cmp	r4, #0
 800929a:	d151      	bne.n	8009340 <_strtod_l+0x380>
 800929c:	2800      	cmp	r0, #0
 800929e:	f47f aece 	bne.w	800903e <_strtod_l+0x7e>
 80092a2:	9a06      	ldr	r2, [sp, #24]
 80092a4:	2a00      	cmp	r2, #0
 80092a6:	f47f aeca 	bne.w	800903e <_strtod_l+0x7e>
 80092aa:	9a04      	ldr	r2, [sp, #16]
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	f47f aee4 	bne.w	800907a <_strtod_l+0xba>
 80092b2:	2b4e      	cmp	r3, #78	; 0x4e
 80092b4:	d027      	beq.n	8009306 <_strtod_l+0x346>
 80092b6:	dc21      	bgt.n	80092fc <_strtod_l+0x33c>
 80092b8:	2b49      	cmp	r3, #73	; 0x49
 80092ba:	f47f aede 	bne.w	800907a <_strtod_l+0xba>
 80092be:	49a0      	ldr	r1, [pc, #640]	; (8009540 <_strtod_l+0x580>)
 80092c0:	a81b      	add	r0, sp, #108	; 0x6c
 80092c2:	f001 fea1 	bl	800b008 <__match>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f43f aed7 	beq.w	800907a <_strtod_l+0xba>
 80092cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092ce:	499d      	ldr	r1, [pc, #628]	; (8009544 <_strtod_l+0x584>)
 80092d0:	3b01      	subs	r3, #1
 80092d2:	a81b      	add	r0, sp, #108	; 0x6c
 80092d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80092d6:	f001 fe97 	bl	800b008 <__match>
 80092da:	b910      	cbnz	r0, 80092e2 <_strtod_l+0x322>
 80092dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092de:	3301      	adds	r3, #1
 80092e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80092e2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009558 <_strtod_l+0x598>
 80092e6:	f04f 0a00 	mov.w	sl, #0
 80092ea:	e6a8      	b.n	800903e <_strtod_l+0x7e>
 80092ec:	210a      	movs	r1, #10
 80092ee:	fb01 3e0e 	mla	lr, r1, lr, r3
 80092f2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80092f6:	e7b8      	b.n	800926a <_strtod_l+0x2aa>
 80092f8:	46be      	mov	lr, r7
 80092fa:	e7c8      	b.n	800928e <_strtod_l+0x2ce>
 80092fc:	2b69      	cmp	r3, #105	; 0x69
 80092fe:	d0de      	beq.n	80092be <_strtod_l+0x2fe>
 8009300:	2b6e      	cmp	r3, #110	; 0x6e
 8009302:	f47f aeba 	bne.w	800907a <_strtod_l+0xba>
 8009306:	4990      	ldr	r1, [pc, #576]	; (8009548 <_strtod_l+0x588>)
 8009308:	a81b      	add	r0, sp, #108	; 0x6c
 800930a:	f001 fe7d 	bl	800b008 <__match>
 800930e:	2800      	cmp	r0, #0
 8009310:	f43f aeb3 	beq.w	800907a <_strtod_l+0xba>
 8009314:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	2b28      	cmp	r3, #40	; 0x28
 800931a:	d10e      	bne.n	800933a <_strtod_l+0x37a>
 800931c:	aa1e      	add	r2, sp, #120	; 0x78
 800931e:	498b      	ldr	r1, [pc, #556]	; (800954c <_strtod_l+0x58c>)
 8009320:	a81b      	add	r0, sp, #108	; 0x6c
 8009322:	f001 fe85 	bl	800b030 <__hexnan>
 8009326:	2805      	cmp	r0, #5
 8009328:	d107      	bne.n	800933a <_strtod_l+0x37a>
 800932a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800932c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009330:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009334:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009338:	e681      	b.n	800903e <_strtod_l+0x7e>
 800933a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009560 <_strtod_l+0x5a0>
 800933e:	e7d2      	b.n	80092e6 <_strtod_l+0x326>
 8009340:	ebae 0302 	sub.w	r3, lr, r2
 8009344:	9306      	str	r3, [sp, #24]
 8009346:	9b05      	ldr	r3, [sp, #20]
 8009348:	9807      	ldr	r0, [sp, #28]
 800934a:	2b00      	cmp	r3, #0
 800934c:	bf08      	it	eq
 800934e:	4623      	moveq	r3, r4
 8009350:	2c10      	cmp	r4, #16
 8009352:	9305      	str	r3, [sp, #20]
 8009354:	46a0      	mov	r8, r4
 8009356:	bfa8      	it	ge
 8009358:	f04f 0810 	movge.w	r8, #16
 800935c:	f7f7 f8da 	bl	8000514 <__aeabi_ui2d>
 8009360:	2c09      	cmp	r4, #9
 8009362:	4682      	mov	sl, r0
 8009364:	468b      	mov	fp, r1
 8009366:	dc13      	bgt.n	8009390 <_strtod_l+0x3d0>
 8009368:	9b06      	ldr	r3, [sp, #24]
 800936a:	2b00      	cmp	r3, #0
 800936c:	f43f ae67 	beq.w	800903e <_strtod_l+0x7e>
 8009370:	9b06      	ldr	r3, [sp, #24]
 8009372:	dd7a      	ble.n	800946a <_strtod_l+0x4aa>
 8009374:	2b16      	cmp	r3, #22
 8009376:	dc61      	bgt.n	800943c <_strtod_l+0x47c>
 8009378:	4a75      	ldr	r2, [pc, #468]	; (8009550 <_strtod_l+0x590>)
 800937a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800937e:	e9de 0100 	ldrd	r0, r1, [lr]
 8009382:	4652      	mov	r2, sl
 8009384:	465b      	mov	r3, fp
 8009386:	f7f7 f93f 	bl	8000608 <__aeabi_dmul>
 800938a:	4682      	mov	sl, r0
 800938c:	468b      	mov	fp, r1
 800938e:	e656      	b.n	800903e <_strtod_l+0x7e>
 8009390:	4b6f      	ldr	r3, [pc, #444]	; (8009550 <_strtod_l+0x590>)
 8009392:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009396:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800939a:	f7f7 f935 	bl	8000608 <__aeabi_dmul>
 800939e:	4606      	mov	r6, r0
 80093a0:	4628      	mov	r0, r5
 80093a2:	460f      	mov	r7, r1
 80093a4:	f7f7 f8b6 	bl	8000514 <__aeabi_ui2d>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4630      	mov	r0, r6
 80093ae:	4639      	mov	r1, r7
 80093b0:	f7f6 ff74 	bl	800029c <__adddf3>
 80093b4:	2c0f      	cmp	r4, #15
 80093b6:	4682      	mov	sl, r0
 80093b8:	468b      	mov	fp, r1
 80093ba:	ddd5      	ble.n	8009368 <_strtod_l+0x3a8>
 80093bc:	9b06      	ldr	r3, [sp, #24]
 80093be:	eba4 0808 	sub.w	r8, r4, r8
 80093c2:	4498      	add	r8, r3
 80093c4:	f1b8 0f00 	cmp.w	r8, #0
 80093c8:	f340 8096 	ble.w	80094f8 <_strtod_l+0x538>
 80093cc:	f018 030f 	ands.w	r3, r8, #15
 80093d0:	d00a      	beq.n	80093e8 <_strtod_l+0x428>
 80093d2:	495f      	ldr	r1, [pc, #380]	; (8009550 <_strtod_l+0x590>)
 80093d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093d8:	4652      	mov	r2, sl
 80093da:	465b      	mov	r3, fp
 80093dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093e0:	f7f7 f912 	bl	8000608 <__aeabi_dmul>
 80093e4:	4682      	mov	sl, r0
 80093e6:	468b      	mov	fp, r1
 80093e8:	f038 080f 	bics.w	r8, r8, #15
 80093ec:	d073      	beq.n	80094d6 <_strtod_l+0x516>
 80093ee:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80093f2:	dd47      	ble.n	8009484 <_strtod_l+0x4c4>
 80093f4:	2400      	movs	r4, #0
 80093f6:	46a0      	mov	r8, r4
 80093f8:	9407      	str	r4, [sp, #28]
 80093fa:	9405      	str	r4, [sp, #20]
 80093fc:	2322      	movs	r3, #34	; 0x22
 80093fe:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009558 <_strtod_l+0x598>
 8009402:	f8c9 3000 	str.w	r3, [r9]
 8009406:	f04f 0a00 	mov.w	sl, #0
 800940a:	9b07      	ldr	r3, [sp, #28]
 800940c:	2b00      	cmp	r3, #0
 800940e:	f43f ae16 	beq.w	800903e <_strtod_l+0x7e>
 8009412:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009414:	4648      	mov	r0, r9
 8009416:	f001 ff02 	bl	800b21e <_Bfree>
 800941a:	9905      	ldr	r1, [sp, #20]
 800941c:	4648      	mov	r0, r9
 800941e:	f001 fefe 	bl	800b21e <_Bfree>
 8009422:	4641      	mov	r1, r8
 8009424:	4648      	mov	r0, r9
 8009426:	f001 fefa 	bl	800b21e <_Bfree>
 800942a:	9907      	ldr	r1, [sp, #28]
 800942c:	4648      	mov	r0, r9
 800942e:	f001 fef6 	bl	800b21e <_Bfree>
 8009432:	4621      	mov	r1, r4
 8009434:	4648      	mov	r0, r9
 8009436:	f001 fef2 	bl	800b21e <_Bfree>
 800943a:	e600      	b.n	800903e <_strtod_l+0x7e>
 800943c:	9a06      	ldr	r2, [sp, #24]
 800943e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009442:	4293      	cmp	r3, r2
 8009444:	dbba      	blt.n	80093bc <_strtod_l+0x3fc>
 8009446:	4d42      	ldr	r5, [pc, #264]	; (8009550 <_strtod_l+0x590>)
 8009448:	f1c4 040f 	rsb	r4, r4, #15
 800944c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009450:	4652      	mov	r2, sl
 8009452:	465b      	mov	r3, fp
 8009454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009458:	f7f7 f8d6 	bl	8000608 <__aeabi_dmul>
 800945c:	9b06      	ldr	r3, [sp, #24]
 800945e:	1b1c      	subs	r4, r3, r4
 8009460:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009464:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009468:	e78d      	b.n	8009386 <_strtod_l+0x3c6>
 800946a:	f113 0f16 	cmn.w	r3, #22
 800946e:	dba5      	blt.n	80093bc <_strtod_l+0x3fc>
 8009470:	4a37      	ldr	r2, [pc, #220]	; (8009550 <_strtod_l+0x590>)
 8009472:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009476:	e9d2 2300 	ldrd	r2, r3, [r2]
 800947a:	4650      	mov	r0, sl
 800947c:	4659      	mov	r1, fp
 800947e:	f7f7 f9ed 	bl	800085c <__aeabi_ddiv>
 8009482:	e782      	b.n	800938a <_strtod_l+0x3ca>
 8009484:	2300      	movs	r3, #0
 8009486:	4e33      	ldr	r6, [pc, #204]	; (8009554 <_strtod_l+0x594>)
 8009488:	ea4f 1828 	mov.w	r8, r8, asr #4
 800948c:	4650      	mov	r0, sl
 800948e:	4659      	mov	r1, fp
 8009490:	461d      	mov	r5, r3
 8009492:	f1b8 0f01 	cmp.w	r8, #1
 8009496:	dc21      	bgt.n	80094dc <_strtod_l+0x51c>
 8009498:	b10b      	cbz	r3, 800949e <_strtod_l+0x4de>
 800949a:	4682      	mov	sl, r0
 800949c:	468b      	mov	fp, r1
 800949e:	4b2d      	ldr	r3, [pc, #180]	; (8009554 <_strtod_l+0x594>)
 80094a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80094a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80094a8:	4652      	mov	r2, sl
 80094aa:	465b      	mov	r3, fp
 80094ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 80094b0:	f7f7 f8aa 	bl	8000608 <__aeabi_dmul>
 80094b4:	4b28      	ldr	r3, [pc, #160]	; (8009558 <_strtod_l+0x598>)
 80094b6:	460a      	mov	r2, r1
 80094b8:	400b      	ands	r3, r1
 80094ba:	4928      	ldr	r1, [pc, #160]	; (800955c <_strtod_l+0x59c>)
 80094bc:	428b      	cmp	r3, r1
 80094be:	4682      	mov	sl, r0
 80094c0:	d898      	bhi.n	80093f4 <_strtod_l+0x434>
 80094c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80094c6:	428b      	cmp	r3, r1
 80094c8:	bf86      	itte	hi
 80094ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009564 <_strtod_l+0x5a4>
 80094ce:	f04f 3aff 	movhi.w	sl, #4294967295
 80094d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80094d6:	2300      	movs	r3, #0
 80094d8:	9304      	str	r3, [sp, #16]
 80094da:	e077      	b.n	80095cc <_strtod_l+0x60c>
 80094dc:	f018 0f01 	tst.w	r8, #1
 80094e0:	d006      	beq.n	80094f0 <_strtod_l+0x530>
 80094e2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	f7f7 f88d 	bl	8000608 <__aeabi_dmul>
 80094ee:	2301      	movs	r3, #1
 80094f0:	3501      	adds	r5, #1
 80094f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80094f6:	e7cc      	b.n	8009492 <_strtod_l+0x4d2>
 80094f8:	d0ed      	beq.n	80094d6 <_strtod_l+0x516>
 80094fa:	f1c8 0800 	rsb	r8, r8, #0
 80094fe:	f018 020f 	ands.w	r2, r8, #15
 8009502:	d00a      	beq.n	800951a <_strtod_l+0x55a>
 8009504:	4b12      	ldr	r3, [pc, #72]	; (8009550 <_strtod_l+0x590>)
 8009506:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800950a:	4650      	mov	r0, sl
 800950c:	4659      	mov	r1, fp
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f7f7 f9a3 	bl	800085c <__aeabi_ddiv>
 8009516:	4682      	mov	sl, r0
 8009518:	468b      	mov	fp, r1
 800951a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800951e:	d0da      	beq.n	80094d6 <_strtod_l+0x516>
 8009520:	f1b8 0f1f 	cmp.w	r8, #31
 8009524:	dd20      	ble.n	8009568 <_strtod_l+0x5a8>
 8009526:	2400      	movs	r4, #0
 8009528:	46a0      	mov	r8, r4
 800952a:	9407      	str	r4, [sp, #28]
 800952c:	9405      	str	r4, [sp, #20]
 800952e:	2322      	movs	r3, #34	; 0x22
 8009530:	f04f 0a00 	mov.w	sl, #0
 8009534:	f04f 0b00 	mov.w	fp, #0
 8009538:	f8c9 3000 	str.w	r3, [r9]
 800953c:	e765      	b.n	800940a <_strtod_l+0x44a>
 800953e:	bf00      	nop
 8009540:	0800c571 	.word	0x0800c571
 8009544:	0800c5fb 	.word	0x0800c5fb
 8009548:	0800c579 	.word	0x0800c579
 800954c:	0800c5bc 	.word	0x0800c5bc
 8009550:	0800c6a0 	.word	0x0800c6a0
 8009554:	0800c678 	.word	0x0800c678
 8009558:	7ff00000 	.word	0x7ff00000
 800955c:	7ca00000 	.word	0x7ca00000
 8009560:	fff80000 	.word	0xfff80000
 8009564:	7fefffff 	.word	0x7fefffff
 8009568:	f018 0310 	ands.w	r3, r8, #16
 800956c:	bf18      	it	ne
 800956e:	236a      	movne	r3, #106	; 0x6a
 8009570:	4da0      	ldr	r5, [pc, #640]	; (80097f4 <_strtod_l+0x834>)
 8009572:	9304      	str	r3, [sp, #16]
 8009574:	4650      	mov	r0, sl
 8009576:	4659      	mov	r1, fp
 8009578:	2300      	movs	r3, #0
 800957a:	f1b8 0f00 	cmp.w	r8, #0
 800957e:	f300 810a 	bgt.w	8009796 <_strtod_l+0x7d6>
 8009582:	b10b      	cbz	r3, 8009588 <_strtod_l+0x5c8>
 8009584:	4682      	mov	sl, r0
 8009586:	468b      	mov	fp, r1
 8009588:	9b04      	ldr	r3, [sp, #16]
 800958a:	b1bb      	cbz	r3, 80095bc <_strtod_l+0x5fc>
 800958c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009590:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009594:	2b00      	cmp	r3, #0
 8009596:	4659      	mov	r1, fp
 8009598:	dd10      	ble.n	80095bc <_strtod_l+0x5fc>
 800959a:	2b1f      	cmp	r3, #31
 800959c:	f340 8107 	ble.w	80097ae <_strtod_l+0x7ee>
 80095a0:	2b34      	cmp	r3, #52	; 0x34
 80095a2:	bfde      	ittt	le
 80095a4:	3b20      	suble	r3, #32
 80095a6:	f04f 32ff 	movle.w	r2, #4294967295
 80095aa:	fa02 f303 	lslle.w	r3, r2, r3
 80095ae:	f04f 0a00 	mov.w	sl, #0
 80095b2:	bfcc      	ite	gt
 80095b4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80095b8:	ea03 0b01 	andle.w	fp, r3, r1
 80095bc:	2200      	movs	r2, #0
 80095be:	2300      	movs	r3, #0
 80095c0:	4650      	mov	r0, sl
 80095c2:	4659      	mov	r1, fp
 80095c4:	f7f7 fa88 	bl	8000ad8 <__aeabi_dcmpeq>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d1ac      	bne.n	8009526 <_strtod_l+0x566>
 80095cc:	9b07      	ldr	r3, [sp, #28]
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	9a05      	ldr	r2, [sp, #20]
 80095d2:	9908      	ldr	r1, [sp, #32]
 80095d4:	4623      	mov	r3, r4
 80095d6:	4648      	mov	r0, r9
 80095d8:	f001 fe73 	bl	800b2c2 <__s2b>
 80095dc:	9007      	str	r0, [sp, #28]
 80095de:	2800      	cmp	r0, #0
 80095e0:	f43f af08 	beq.w	80093f4 <_strtod_l+0x434>
 80095e4:	9a06      	ldr	r2, [sp, #24]
 80095e6:	9b06      	ldr	r3, [sp, #24]
 80095e8:	2a00      	cmp	r2, #0
 80095ea:	f1c3 0300 	rsb	r3, r3, #0
 80095ee:	bfa8      	it	ge
 80095f0:	2300      	movge	r3, #0
 80095f2:	930e      	str	r3, [sp, #56]	; 0x38
 80095f4:	2400      	movs	r4, #0
 80095f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80095fa:	9316      	str	r3, [sp, #88]	; 0x58
 80095fc:	46a0      	mov	r8, r4
 80095fe:	9b07      	ldr	r3, [sp, #28]
 8009600:	4648      	mov	r0, r9
 8009602:	6859      	ldr	r1, [r3, #4]
 8009604:	f001 fdd7 	bl	800b1b6 <_Balloc>
 8009608:	9005      	str	r0, [sp, #20]
 800960a:	2800      	cmp	r0, #0
 800960c:	f43f aef6 	beq.w	80093fc <_strtod_l+0x43c>
 8009610:	9b07      	ldr	r3, [sp, #28]
 8009612:	691a      	ldr	r2, [r3, #16]
 8009614:	3202      	adds	r2, #2
 8009616:	f103 010c 	add.w	r1, r3, #12
 800961a:	0092      	lsls	r2, r2, #2
 800961c:	300c      	adds	r0, #12
 800961e:	f001 fdbd 	bl	800b19c <memcpy>
 8009622:	aa1e      	add	r2, sp, #120	; 0x78
 8009624:	a91d      	add	r1, sp, #116	; 0x74
 8009626:	ec4b ab10 	vmov	d0, sl, fp
 800962a:	4648      	mov	r0, r9
 800962c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009630:	f002 f902 	bl	800b838 <__d2b>
 8009634:	901c      	str	r0, [sp, #112]	; 0x70
 8009636:	2800      	cmp	r0, #0
 8009638:	f43f aee0 	beq.w	80093fc <_strtod_l+0x43c>
 800963c:	2101      	movs	r1, #1
 800963e:	4648      	mov	r0, r9
 8009640:	f001 fecb 	bl	800b3da <__i2b>
 8009644:	4680      	mov	r8, r0
 8009646:	2800      	cmp	r0, #0
 8009648:	f43f aed8 	beq.w	80093fc <_strtod_l+0x43c>
 800964c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800964e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009650:	2e00      	cmp	r6, #0
 8009652:	bfab      	itete	ge
 8009654:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009656:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009658:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800965a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800965c:	bfac      	ite	ge
 800965e:	18f7      	addge	r7, r6, r3
 8009660:	1b9d      	sublt	r5, r3, r6
 8009662:	9b04      	ldr	r3, [sp, #16]
 8009664:	1af6      	subs	r6, r6, r3
 8009666:	4416      	add	r6, r2
 8009668:	4b63      	ldr	r3, [pc, #396]	; (80097f8 <_strtod_l+0x838>)
 800966a:	3e01      	subs	r6, #1
 800966c:	429e      	cmp	r6, r3
 800966e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009672:	f280 80af 	bge.w	80097d4 <_strtod_l+0x814>
 8009676:	1b9b      	subs	r3, r3, r6
 8009678:	2b1f      	cmp	r3, #31
 800967a:	eba2 0203 	sub.w	r2, r2, r3
 800967e:	f04f 0101 	mov.w	r1, #1
 8009682:	f300 809b 	bgt.w	80097bc <_strtod_l+0x7fc>
 8009686:	fa01 f303 	lsl.w	r3, r1, r3
 800968a:	930f      	str	r3, [sp, #60]	; 0x3c
 800968c:	2300      	movs	r3, #0
 800968e:	930a      	str	r3, [sp, #40]	; 0x28
 8009690:	18be      	adds	r6, r7, r2
 8009692:	9b04      	ldr	r3, [sp, #16]
 8009694:	42b7      	cmp	r7, r6
 8009696:	4415      	add	r5, r2
 8009698:	441d      	add	r5, r3
 800969a:	463b      	mov	r3, r7
 800969c:	bfa8      	it	ge
 800969e:	4633      	movge	r3, r6
 80096a0:	42ab      	cmp	r3, r5
 80096a2:	bfa8      	it	ge
 80096a4:	462b      	movge	r3, r5
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bfc2      	ittt	gt
 80096aa:	1af6      	subgt	r6, r6, r3
 80096ac:	1aed      	subgt	r5, r5, r3
 80096ae:	1aff      	subgt	r7, r7, r3
 80096b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096b2:	b1bb      	cbz	r3, 80096e4 <_strtod_l+0x724>
 80096b4:	4641      	mov	r1, r8
 80096b6:	461a      	mov	r2, r3
 80096b8:	4648      	mov	r0, r9
 80096ba:	f001 ff2d 	bl	800b518 <__pow5mult>
 80096be:	4680      	mov	r8, r0
 80096c0:	2800      	cmp	r0, #0
 80096c2:	f43f ae9b 	beq.w	80093fc <_strtod_l+0x43c>
 80096c6:	4601      	mov	r1, r0
 80096c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80096ca:	4648      	mov	r0, r9
 80096cc:	f001 fe8e 	bl	800b3ec <__multiply>
 80096d0:	900c      	str	r0, [sp, #48]	; 0x30
 80096d2:	2800      	cmp	r0, #0
 80096d4:	f43f ae92 	beq.w	80093fc <_strtod_l+0x43c>
 80096d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80096da:	4648      	mov	r0, r9
 80096dc:	f001 fd9f 	bl	800b21e <_Bfree>
 80096e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096e2:	931c      	str	r3, [sp, #112]	; 0x70
 80096e4:	2e00      	cmp	r6, #0
 80096e6:	dc7a      	bgt.n	80097de <_strtod_l+0x81e>
 80096e8:	9b06      	ldr	r3, [sp, #24]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	dd08      	ble.n	8009700 <_strtod_l+0x740>
 80096ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80096f0:	9905      	ldr	r1, [sp, #20]
 80096f2:	4648      	mov	r0, r9
 80096f4:	f001 ff10 	bl	800b518 <__pow5mult>
 80096f8:	9005      	str	r0, [sp, #20]
 80096fa:	2800      	cmp	r0, #0
 80096fc:	f43f ae7e 	beq.w	80093fc <_strtod_l+0x43c>
 8009700:	2d00      	cmp	r5, #0
 8009702:	dd08      	ble.n	8009716 <_strtod_l+0x756>
 8009704:	462a      	mov	r2, r5
 8009706:	9905      	ldr	r1, [sp, #20]
 8009708:	4648      	mov	r0, r9
 800970a:	f001 ff53 	bl	800b5b4 <__lshift>
 800970e:	9005      	str	r0, [sp, #20]
 8009710:	2800      	cmp	r0, #0
 8009712:	f43f ae73 	beq.w	80093fc <_strtod_l+0x43c>
 8009716:	2f00      	cmp	r7, #0
 8009718:	dd08      	ble.n	800972c <_strtod_l+0x76c>
 800971a:	4641      	mov	r1, r8
 800971c:	463a      	mov	r2, r7
 800971e:	4648      	mov	r0, r9
 8009720:	f001 ff48 	bl	800b5b4 <__lshift>
 8009724:	4680      	mov	r8, r0
 8009726:	2800      	cmp	r0, #0
 8009728:	f43f ae68 	beq.w	80093fc <_strtod_l+0x43c>
 800972c:	9a05      	ldr	r2, [sp, #20]
 800972e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009730:	4648      	mov	r0, r9
 8009732:	f001 ffad 	bl	800b690 <__mdiff>
 8009736:	4604      	mov	r4, r0
 8009738:	2800      	cmp	r0, #0
 800973a:	f43f ae5f 	beq.w	80093fc <_strtod_l+0x43c>
 800973e:	68c3      	ldr	r3, [r0, #12]
 8009740:	930c      	str	r3, [sp, #48]	; 0x30
 8009742:	2300      	movs	r3, #0
 8009744:	60c3      	str	r3, [r0, #12]
 8009746:	4641      	mov	r1, r8
 8009748:	f001 ff88 	bl	800b65c <__mcmp>
 800974c:	2800      	cmp	r0, #0
 800974e:	da55      	bge.n	80097fc <_strtod_l+0x83c>
 8009750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009752:	b9e3      	cbnz	r3, 800978e <_strtod_l+0x7ce>
 8009754:	f1ba 0f00 	cmp.w	sl, #0
 8009758:	d119      	bne.n	800978e <_strtod_l+0x7ce>
 800975a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800975e:	b9b3      	cbnz	r3, 800978e <_strtod_l+0x7ce>
 8009760:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009764:	0d1b      	lsrs	r3, r3, #20
 8009766:	051b      	lsls	r3, r3, #20
 8009768:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800976c:	d90f      	bls.n	800978e <_strtod_l+0x7ce>
 800976e:	6963      	ldr	r3, [r4, #20]
 8009770:	b913      	cbnz	r3, 8009778 <_strtod_l+0x7b8>
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	2b01      	cmp	r3, #1
 8009776:	dd0a      	ble.n	800978e <_strtod_l+0x7ce>
 8009778:	4621      	mov	r1, r4
 800977a:	2201      	movs	r2, #1
 800977c:	4648      	mov	r0, r9
 800977e:	f001 ff19 	bl	800b5b4 <__lshift>
 8009782:	4641      	mov	r1, r8
 8009784:	4604      	mov	r4, r0
 8009786:	f001 ff69 	bl	800b65c <__mcmp>
 800978a:	2800      	cmp	r0, #0
 800978c:	dc67      	bgt.n	800985e <_strtod_l+0x89e>
 800978e:	9b04      	ldr	r3, [sp, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d171      	bne.n	8009878 <_strtod_l+0x8b8>
 8009794:	e63d      	b.n	8009412 <_strtod_l+0x452>
 8009796:	f018 0f01 	tst.w	r8, #1
 800979a:	d004      	beq.n	80097a6 <_strtod_l+0x7e6>
 800979c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097a0:	f7f6 ff32 	bl	8000608 <__aeabi_dmul>
 80097a4:	2301      	movs	r3, #1
 80097a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80097aa:	3508      	adds	r5, #8
 80097ac:	e6e5      	b.n	800957a <_strtod_l+0x5ba>
 80097ae:	f04f 32ff 	mov.w	r2, #4294967295
 80097b2:	fa02 f303 	lsl.w	r3, r2, r3
 80097b6:	ea03 0a0a 	and.w	sl, r3, sl
 80097ba:	e6ff      	b.n	80095bc <_strtod_l+0x5fc>
 80097bc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80097c0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80097c4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80097c8:	36e2      	adds	r6, #226	; 0xe2
 80097ca:	fa01 f306 	lsl.w	r3, r1, r6
 80097ce:	930a      	str	r3, [sp, #40]	; 0x28
 80097d0:	910f      	str	r1, [sp, #60]	; 0x3c
 80097d2:	e75d      	b.n	8009690 <_strtod_l+0x6d0>
 80097d4:	2300      	movs	r3, #0
 80097d6:	930a      	str	r3, [sp, #40]	; 0x28
 80097d8:	2301      	movs	r3, #1
 80097da:	930f      	str	r3, [sp, #60]	; 0x3c
 80097dc:	e758      	b.n	8009690 <_strtod_l+0x6d0>
 80097de:	4632      	mov	r2, r6
 80097e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80097e2:	4648      	mov	r0, r9
 80097e4:	f001 fee6 	bl	800b5b4 <__lshift>
 80097e8:	901c      	str	r0, [sp, #112]	; 0x70
 80097ea:	2800      	cmp	r0, #0
 80097ec:	f47f af7c 	bne.w	80096e8 <_strtod_l+0x728>
 80097f0:	e604      	b.n	80093fc <_strtod_l+0x43c>
 80097f2:	bf00      	nop
 80097f4:	0800c5d0 	.word	0x0800c5d0
 80097f8:	fffffc02 	.word	0xfffffc02
 80097fc:	465d      	mov	r5, fp
 80097fe:	f040 8086 	bne.w	800990e <_strtod_l+0x94e>
 8009802:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009808:	b32a      	cbz	r2, 8009856 <_strtod_l+0x896>
 800980a:	4aaf      	ldr	r2, [pc, #700]	; (8009ac8 <_strtod_l+0xb08>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d153      	bne.n	80098b8 <_strtod_l+0x8f8>
 8009810:	9b04      	ldr	r3, [sp, #16]
 8009812:	4650      	mov	r0, sl
 8009814:	b1d3      	cbz	r3, 800984c <_strtod_l+0x88c>
 8009816:	4aad      	ldr	r2, [pc, #692]	; (8009acc <_strtod_l+0xb0c>)
 8009818:	402a      	ands	r2, r5
 800981a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800981e:	f04f 31ff 	mov.w	r1, #4294967295
 8009822:	d816      	bhi.n	8009852 <_strtod_l+0x892>
 8009824:	0d12      	lsrs	r2, r2, #20
 8009826:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800982a:	fa01 f303 	lsl.w	r3, r1, r3
 800982e:	4298      	cmp	r0, r3
 8009830:	d142      	bne.n	80098b8 <_strtod_l+0x8f8>
 8009832:	4ba7      	ldr	r3, [pc, #668]	; (8009ad0 <_strtod_l+0xb10>)
 8009834:	429d      	cmp	r5, r3
 8009836:	d102      	bne.n	800983e <_strtod_l+0x87e>
 8009838:	3001      	adds	r0, #1
 800983a:	f43f addf 	beq.w	80093fc <_strtod_l+0x43c>
 800983e:	4ba3      	ldr	r3, [pc, #652]	; (8009acc <_strtod_l+0xb0c>)
 8009840:	402b      	ands	r3, r5
 8009842:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009846:	f04f 0a00 	mov.w	sl, #0
 800984a:	e7a0      	b.n	800978e <_strtod_l+0x7ce>
 800984c:	f04f 33ff 	mov.w	r3, #4294967295
 8009850:	e7ed      	b.n	800982e <_strtod_l+0x86e>
 8009852:	460b      	mov	r3, r1
 8009854:	e7eb      	b.n	800982e <_strtod_l+0x86e>
 8009856:	bb7b      	cbnz	r3, 80098b8 <_strtod_l+0x8f8>
 8009858:	f1ba 0f00 	cmp.w	sl, #0
 800985c:	d12c      	bne.n	80098b8 <_strtod_l+0x8f8>
 800985e:	9904      	ldr	r1, [sp, #16]
 8009860:	4a9a      	ldr	r2, [pc, #616]	; (8009acc <_strtod_l+0xb0c>)
 8009862:	465b      	mov	r3, fp
 8009864:	b1f1      	cbz	r1, 80098a4 <_strtod_l+0x8e4>
 8009866:	ea02 010b 	and.w	r1, r2, fp
 800986a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800986e:	dc19      	bgt.n	80098a4 <_strtod_l+0x8e4>
 8009870:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009874:	f77f ae5b 	ble.w	800952e <_strtod_l+0x56e>
 8009878:	4a96      	ldr	r2, [pc, #600]	; (8009ad4 <_strtod_l+0xb14>)
 800987a:	2300      	movs	r3, #0
 800987c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009880:	4650      	mov	r0, sl
 8009882:	4659      	mov	r1, fp
 8009884:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009888:	f7f6 febe 	bl	8000608 <__aeabi_dmul>
 800988c:	4682      	mov	sl, r0
 800988e:	468b      	mov	fp, r1
 8009890:	2900      	cmp	r1, #0
 8009892:	f47f adbe 	bne.w	8009412 <_strtod_l+0x452>
 8009896:	2800      	cmp	r0, #0
 8009898:	f47f adbb 	bne.w	8009412 <_strtod_l+0x452>
 800989c:	2322      	movs	r3, #34	; 0x22
 800989e:	f8c9 3000 	str.w	r3, [r9]
 80098a2:	e5b6      	b.n	8009412 <_strtod_l+0x452>
 80098a4:	4013      	ands	r3, r2
 80098a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80098aa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80098ae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80098b2:	f04f 3aff 	mov.w	sl, #4294967295
 80098b6:	e76a      	b.n	800978e <_strtod_l+0x7ce>
 80098b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ba:	b193      	cbz	r3, 80098e2 <_strtod_l+0x922>
 80098bc:	422b      	tst	r3, r5
 80098be:	f43f af66 	beq.w	800978e <_strtod_l+0x7ce>
 80098c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098c4:	9a04      	ldr	r2, [sp, #16]
 80098c6:	4650      	mov	r0, sl
 80098c8:	4659      	mov	r1, fp
 80098ca:	b173      	cbz	r3, 80098ea <_strtod_l+0x92a>
 80098cc:	f7ff fb5c 	bl	8008f88 <sulp>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80098d8:	f7f6 fce0 	bl	800029c <__adddf3>
 80098dc:	4682      	mov	sl, r0
 80098de:	468b      	mov	fp, r1
 80098e0:	e755      	b.n	800978e <_strtod_l+0x7ce>
 80098e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098e4:	ea13 0f0a 	tst.w	r3, sl
 80098e8:	e7e9      	b.n	80098be <_strtod_l+0x8fe>
 80098ea:	f7ff fb4d 	bl	8008f88 <sulp>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80098f6:	f7f6 fccf 	bl	8000298 <__aeabi_dsub>
 80098fa:	2200      	movs	r2, #0
 80098fc:	2300      	movs	r3, #0
 80098fe:	4682      	mov	sl, r0
 8009900:	468b      	mov	fp, r1
 8009902:	f7f7 f8e9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009906:	2800      	cmp	r0, #0
 8009908:	f47f ae11 	bne.w	800952e <_strtod_l+0x56e>
 800990c:	e73f      	b.n	800978e <_strtod_l+0x7ce>
 800990e:	4641      	mov	r1, r8
 8009910:	4620      	mov	r0, r4
 8009912:	f001 ffe0 	bl	800b8d6 <__ratio>
 8009916:	ec57 6b10 	vmov	r6, r7, d0
 800991a:	2200      	movs	r2, #0
 800991c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009920:	ee10 0a10 	vmov	r0, s0
 8009924:	4639      	mov	r1, r7
 8009926:	f7f7 f8eb 	bl	8000b00 <__aeabi_dcmple>
 800992a:	2800      	cmp	r0, #0
 800992c:	d077      	beq.n	8009a1e <_strtod_l+0xa5e>
 800992e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009930:	2b00      	cmp	r3, #0
 8009932:	d04a      	beq.n	80099ca <_strtod_l+0xa0a>
 8009934:	4b68      	ldr	r3, [pc, #416]	; (8009ad8 <_strtod_l+0xb18>)
 8009936:	2200      	movs	r2, #0
 8009938:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800993c:	4f66      	ldr	r7, [pc, #408]	; (8009ad8 <_strtod_l+0xb18>)
 800993e:	2600      	movs	r6, #0
 8009940:	4b62      	ldr	r3, [pc, #392]	; (8009acc <_strtod_l+0xb0c>)
 8009942:	402b      	ands	r3, r5
 8009944:	930f      	str	r3, [sp, #60]	; 0x3c
 8009946:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009948:	4b64      	ldr	r3, [pc, #400]	; (8009adc <_strtod_l+0xb1c>)
 800994a:	429a      	cmp	r2, r3
 800994c:	f040 80ce 	bne.w	8009aec <_strtod_l+0xb2c>
 8009950:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009954:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009958:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800995c:	ec4b ab10 	vmov	d0, sl, fp
 8009960:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009964:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009968:	f001 fef0 	bl	800b74c <__ulp>
 800996c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009970:	ec53 2b10 	vmov	r2, r3, d0
 8009974:	f7f6 fe48 	bl	8000608 <__aeabi_dmul>
 8009978:	4652      	mov	r2, sl
 800997a:	465b      	mov	r3, fp
 800997c:	f7f6 fc8e 	bl	800029c <__adddf3>
 8009980:	460b      	mov	r3, r1
 8009982:	4952      	ldr	r1, [pc, #328]	; (8009acc <_strtod_l+0xb0c>)
 8009984:	4a56      	ldr	r2, [pc, #344]	; (8009ae0 <_strtod_l+0xb20>)
 8009986:	4019      	ands	r1, r3
 8009988:	4291      	cmp	r1, r2
 800998a:	4682      	mov	sl, r0
 800998c:	d95b      	bls.n	8009a46 <_strtod_l+0xa86>
 800998e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009990:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009994:	4293      	cmp	r3, r2
 8009996:	d103      	bne.n	80099a0 <_strtod_l+0x9e0>
 8009998:	9b08      	ldr	r3, [sp, #32]
 800999a:	3301      	adds	r3, #1
 800999c:	f43f ad2e 	beq.w	80093fc <_strtod_l+0x43c>
 80099a0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009ad0 <_strtod_l+0xb10>
 80099a4:	f04f 3aff 	mov.w	sl, #4294967295
 80099a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80099aa:	4648      	mov	r0, r9
 80099ac:	f001 fc37 	bl	800b21e <_Bfree>
 80099b0:	9905      	ldr	r1, [sp, #20]
 80099b2:	4648      	mov	r0, r9
 80099b4:	f001 fc33 	bl	800b21e <_Bfree>
 80099b8:	4641      	mov	r1, r8
 80099ba:	4648      	mov	r0, r9
 80099bc:	f001 fc2f 	bl	800b21e <_Bfree>
 80099c0:	4621      	mov	r1, r4
 80099c2:	4648      	mov	r0, r9
 80099c4:	f001 fc2b 	bl	800b21e <_Bfree>
 80099c8:	e619      	b.n	80095fe <_strtod_l+0x63e>
 80099ca:	f1ba 0f00 	cmp.w	sl, #0
 80099ce:	d11a      	bne.n	8009a06 <_strtod_l+0xa46>
 80099d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099d4:	b9eb      	cbnz	r3, 8009a12 <_strtod_l+0xa52>
 80099d6:	2200      	movs	r2, #0
 80099d8:	4b3f      	ldr	r3, [pc, #252]	; (8009ad8 <_strtod_l+0xb18>)
 80099da:	4630      	mov	r0, r6
 80099dc:	4639      	mov	r1, r7
 80099de:	f7f7 f885 	bl	8000aec <__aeabi_dcmplt>
 80099e2:	b9c8      	cbnz	r0, 8009a18 <_strtod_l+0xa58>
 80099e4:	4630      	mov	r0, r6
 80099e6:	4639      	mov	r1, r7
 80099e8:	2200      	movs	r2, #0
 80099ea:	4b3e      	ldr	r3, [pc, #248]	; (8009ae4 <_strtod_l+0xb24>)
 80099ec:	f7f6 fe0c 	bl	8000608 <__aeabi_dmul>
 80099f0:	4606      	mov	r6, r0
 80099f2:	460f      	mov	r7, r1
 80099f4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80099f8:	9618      	str	r6, [sp, #96]	; 0x60
 80099fa:	9319      	str	r3, [sp, #100]	; 0x64
 80099fc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009a00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009a04:	e79c      	b.n	8009940 <_strtod_l+0x980>
 8009a06:	f1ba 0f01 	cmp.w	sl, #1
 8009a0a:	d102      	bne.n	8009a12 <_strtod_l+0xa52>
 8009a0c:	2d00      	cmp	r5, #0
 8009a0e:	f43f ad8e 	beq.w	800952e <_strtod_l+0x56e>
 8009a12:	2200      	movs	r2, #0
 8009a14:	4b34      	ldr	r3, [pc, #208]	; (8009ae8 <_strtod_l+0xb28>)
 8009a16:	e78f      	b.n	8009938 <_strtod_l+0x978>
 8009a18:	2600      	movs	r6, #0
 8009a1a:	4f32      	ldr	r7, [pc, #200]	; (8009ae4 <_strtod_l+0xb24>)
 8009a1c:	e7ea      	b.n	80099f4 <_strtod_l+0xa34>
 8009a1e:	4b31      	ldr	r3, [pc, #196]	; (8009ae4 <_strtod_l+0xb24>)
 8009a20:	4630      	mov	r0, r6
 8009a22:	4639      	mov	r1, r7
 8009a24:	2200      	movs	r2, #0
 8009a26:	f7f6 fdef 	bl	8000608 <__aeabi_dmul>
 8009a2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a2c:	4606      	mov	r6, r0
 8009a2e:	460f      	mov	r7, r1
 8009a30:	b933      	cbnz	r3, 8009a40 <_strtod_l+0xa80>
 8009a32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a36:	9010      	str	r0, [sp, #64]	; 0x40
 8009a38:	9311      	str	r3, [sp, #68]	; 0x44
 8009a3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a3e:	e7df      	b.n	8009a00 <_strtod_l+0xa40>
 8009a40:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009a44:	e7f9      	b.n	8009a3a <_strtod_l+0xa7a>
 8009a46:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009a4a:	9b04      	ldr	r3, [sp, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1ab      	bne.n	80099a8 <_strtod_l+0x9e8>
 8009a50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a54:	0d1b      	lsrs	r3, r3, #20
 8009a56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a58:	051b      	lsls	r3, r3, #20
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	465d      	mov	r5, fp
 8009a5e:	d1a3      	bne.n	80099a8 <_strtod_l+0x9e8>
 8009a60:	4639      	mov	r1, r7
 8009a62:	4630      	mov	r0, r6
 8009a64:	f7f7 f880 	bl	8000b68 <__aeabi_d2iz>
 8009a68:	f7f6 fd64 	bl	8000534 <__aeabi_i2d>
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	4602      	mov	r2, r0
 8009a70:	4639      	mov	r1, r7
 8009a72:	4630      	mov	r0, r6
 8009a74:	f7f6 fc10 	bl	8000298 <__aeabi_dsub>
 8009a78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460f      	mov	r7, r1
 8009a7e:	b933      	cbnz	r3, 8009a8e <_strtod_l+0xace>
 8009a80:	f1ba 0f00 	cmp.w	sl, #0
 8009a84:	d103      	bne.n	8009a8e <_strtod_l+0xace>
 8009a86:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009a8a:	2d00      	cmp	r5, #0
 8009a8c:	d06d      	beq.n	8009b6a <_strtod_l+0xbaa>
 8009a8e:	a30a      	add	r3, pc, #40	; (adr r3, 8009ab8 <_strtod_l+0xaf8>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	4630      	mov	r0, r6
 8009a96:	4639      	mov	r1, r7
 8009a98:	f7f7 f828 	bl	8000aec <__aeabi_dcmplt>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f47f acb8 	bne.w	8009412 <_strtod_l+0x452>
 8009aa2:	a307      	add	r3, pc, #28	; (adr r3, 8009ac0 <_strtod_l+0xb00>)
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	4639      	mov	r1, r7
 8009aac:	f7f7 f83c 	bl	8000b28 <__aeabi_dcmpgt>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	f43f af79 	beq.w	80099a8 <_strtod_l+0x9e8>
 8009ab6:	e4ac      	b.n	8009412 <_strtod_l+0x452>
 8009ab8:	94a03595 	.word	0x94a03595
 8009abc:	3fdfffff 	.word	0x3fdfffff
 8009ac0:	35afe535 	.word	0x35afe535
 8009ac4:	3fe00000 	.word	0x3fe00000
 8009ac8:	000fffff 	.word	0x000fffff
 8009acc:	7ff00000 	.word	0x7ff00000
 8009ad0:	7fefffff 	.word	0x7fefffff
 8009ad4:	39500000 	.word	0x39500000
 8009ad8:	3ff00000 	.word	0x3ff00000
 8009adc:	7fe00000 	.word	0x7fe00000
 8009ae0:	7c9fffff 	.word	0x7c9fffff
 8009ae4:	3fe00000 	.word	0x3fe00000
 8009ae8:	bff00000 	.word	0xbff00000
 8009aec:	9b04      	ldr	r3, [sp, #16]
 8009aee:	b333      	cbz	r3, 8009b3e <_strtod_l+0xb7e>
 8009af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009af2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009af6:	d822      	bhi.n	8009b3e <_strtod_l+0xb7e>
 8009af8:	a327      	add	r3, pc, #156	; (adr r3, 8009b98 <_strtod_l+0xbd8>)
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	4630      	mov	r0, r6
 8009b00:	4639      	mov	r1, r7
 8009b02:	f7f6 fffd 	bl	8000b00 <__aeabi_dcmple>
 8009b06:	b1a0      	cbz	r0, 8009b32 <_strtod_l+0xb72>
 8009b08:	4639      	mov	r1, r7
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f7f7 f854 	bl	8000bb8 <__aeabi_d2uiz>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	bf08      	it	eq
 8009b14:	2001      	moveq	r0, #1
 8009b16:	f7f6 fcfd 	bl	8000514 <__aeabi_ui2d>
 8009b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	460f      	mov	r7, r1
 8009b20:	bb03      	cbnz	r3, 8009b64 <_strtod_l+0xba4>
 8009b22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b26:	9012      	str	r0, [sp, #72]	; 0x48
 8009b28:	9313      	str	r3, [sp, #76]	; 0x4c
 8009b2a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009b2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b36:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009b3a:	1a9b      	subs	r3, r3, r2
 8009b3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b3e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009b42:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009b46:	f001 fe01 	bl	800b74c <__ulp>
 8009b4a:	4650      	mov	r0, sl
 8009b4c:	ec53 2b10 	vmov	r2, r3, d0
 8009b50:	4659      	mov	r1, fp
 8009b52:	f7f6 fd59 	bl	8000608 <__aeabi_dmul>
 8009b56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b5a:	f7f6 fb9f 	bl	800029c <__adddf3>
 8009b5e:	4682      	mov	sl, r0
 8009b60:	468b      	mov	fp, r1
 8009b62:	e772      	b.n	8009a4a <_strtod_l+0xa8a>
 8009b64:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009b68:	e7df      	b.n	8009b2a <_strtod_l+0xb6a>
 8009b6a:	a30d      	add	r3, pc, #52	; (adr r3, 8009ba0 <_strtod_l+0xbe0>)
 8009b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b70:	f7f6 ffbc 	bl	8000aec <__aeabi_dcmplt>
 8009b74:	e79c      	b.n	8009ab0 <_strtod_l+0xaf0>
 8009b76:	2300      	movs	r3, #0
 8009b78:	930d      	str	r3, [sp, #52]	; 0x34
 8009b7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009b7e:	6013      	str	r3, [r2, #0]
 8009b80:	f7ff ba61 	b.w	8009046 <_strtod_l+0x86>
 8009b84:	2b65      	cmp	r3, #101	; 0x65
 8009b86:	f04f 0200 	mov.w	r2, #0
 8009b8a:	f43f ab4e 	beq.w	800922a <_strtod_l+0x26a>
 8009b8e:	2101      	movs	r1, #1
 8009b90:	4614      	mov	r4, r2
 8009b92:	9104      	str	r1, [sp, #16]
 8009b94:	f7ff bacb 	b.w	800912e <_strtod_l+0x16e>
 8009b98:	ffc00000 	.word	0xffc00000
 8009b9c:	41dfffff 	.word	0x41dfffff
 8009ba0:	94a03595 	.word	0x94a03595
 8009ba4:	3fcfffff 	.word	0x3fcfffff

08009ba8 <_strtod_r>:
 8009ba8:	4b05      	ldr	r3, [pc, #20]	; (8009bc0 <_strtod_r+0x18>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	b410      	push	{r4}
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	4c04      	ldr	r4, [pc, #16]	; (8009bc4 <_strtod_r+0x1c>)
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	bf08      	it	eq
 8009bb6:	4623      	moveq	r3, r4
 8009bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bbc:	f7ff ba00 	b.w	8008fc0 <_strtod_l>
 8009bc0:	20000180 	.word	0x20000180
 8009bc4:	200001e4 	.word	0x200001e4

08009bc8 <_strtol_l.isra.0>:
 8009bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bcc:	4680      	mov	r8, r0
 8009bce:	4689      	mov	r9, r1
 8009bd0:	4692      	mov	sl, r2
 8009bd2:	461e      	mov	r6, r3
 8009bd4:	460f      	mov	r7, r1
 8009bd6:	463d      	mov	r5, r7
 8009bd8:	9808      	ldr	r0, [sp, #32]
 8009bda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bde:	f001 fab7 	bl	800b150 <__locale_ctype_ptr_l>
 8009be2:	4420      	add	r0, r4
 8009be4:	7843      	ldrb	r3, [r0, #1]
 8009be6:	f013 0308 	ands.w	r3, r3, #8
 8009bea:	d132      	bne.n	8009c52 <_strtol_l.isra.0+0x8a>
 8009bec:	2c2d      	cmp	r4, #45	; 0x2d
 8009bee:	d132      	bne.n	8009c56 <_strtol_l.isra.0+0x8e>
 8009bf0:	787c      	ldrb	r4, [r7, #1]
 8009bf2:	1cbd      	adds	r5, r7, #2
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	2e00      	cmp	r6, #0
 8009bf8:	d05d      	beq.n	8009cb6 <_strtol_l.isra.0+0xee>
 8009bfa:	2e10      	cmp	r6, #16
 8009bfc:	d109      	bne.n	8009c12 <_strtol_l.isra.0+0x4a>
 8009bfe:	2c30      	cmp	r4, #48	; 0x30
 8009c00:	d107      	bne.n	8009c12 <_strtol_l.isra.0+0x4a>
 8009c02:	782b      	ldrb	r3, [r5, #0]
 8009c04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c08:	2b58      	cmp	r3, #88	; 0x58
 8009c0a:	d14f      	bne.n	8009cac <_strtol_l.isra.0+0xe4>
 8009c0c:	786c      	ldrb	r4, [r5, #1]
 8009c0e:	2610      	movs	r6, #16
 8009c10:	3502      	adds	r5, #2
 8009c12:	2a00      	cmp	r2, #0
 8009c14:	bf14      	ite	ne
 8009c16:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009c1a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009c1e:	2700      	movs	r7, #0
 8009c20:	fbb1 fcf6 	udiv	ip, r1, r6
 8009c24:	4638      	mov	r0, r7
 8009c26:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009c2a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009c2e:	2b09      	cmp	r3, #9
 8009c30:	d817      	bhi.n	8009c62 <_strtol_l.isra.0+0x9a>
 8009c32:	461c      	mov	r4, r3
 8009c34:	42a6      	cmp	r6, r4
 8009c36:	dd23      	ble.n	8009c80 <_strtol_l.isra.0+0xb8>
 8009c38:	1c7b      	adds	r3, r7, #1
 8009c3a:	d007      	beq.n	8009c4c <_strtol_l.isra.0+0x84>
 8009c3c:	4584      	cmp	ip, r0
 8009c3e:	d31c      	bcc.n	8009c7a <_strtol_l.isra.0+0xb2>
 8009c40:	d101      	bne.n	8009c46 <_strtol_l.isra.0+0x7e>
 8009c42:	45a6      	cmp	lr, r4
 8009c44:	db19      	blt.n	8009c7a <_strtol_l.isra.0+0xb2>
 8009c46:	fb00 4006 	mla	r0, r0, r6, r4
 8009c4a:	2701      	movs	r7, #1
 8009c4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c50:	e7eb      	b.n	8009c2a <_strtol_l.isra.0+0x62>
 8009c52:	462f      	mov	r7, r5
 8009c54:	e7bf      	b.n	8009bd6 <_strtol_l.isra.0+0xe>
 8009c56:	2c2b      	cmp	r4, #43	; 0x2b
 8009c58:	bf04      	itt	eq
 8009c5a:	1cbd      	addeq	r5, r7, #2
 8009c5c:	787c      	ldrbeq	r4, [r7, #1]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	e7c9      	b.n	8009bf6 <_strtol_l.isra.0+0x2e>
 8009c62:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009c66:	2b19      	cmp	r3, #25
 8009c68:	d801      	bhi.n	8009c6e <_strtol_l.isra.0+0xa6>
 8009c6a:	3c37      	subs	r4, #55	; 0x37
 8009c6c:	e7e2      	b.n	8009c34 <_strtol_l.isra.0+0x6c>
 8009c6e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009c72:	2b19      	cmp	r3, #25
 8009c74:	d804      	bhi.n	8009c80 <_strtol_l.isra.0+0xb8>
 8009c76:	3c57      	subs	r4, #87	; 0x57
 8009c78:	e7dc      	b.n	8009c34 <_strtol_l.isra.0+0x6c>
 8009c7a:	f04f 37ff 	mov.w	r7, #4294967295
 8009c7e:	e7e5      	b.n	8009c4c <_strtol_l.isra.0+0x84>
 8009c80:	1c7b      	adds	r3, r7, #1
 8009c82:	d108      	bne.n	8009c96 <_strtol_l.isra.0+0xce>
 8009c84:	2322      	movs	r3, #34	; 0x22
 8009c86:	f8c8 3000 	str.w	r3, [r8]
 8009c8a:	4608      	mov	r0, r1
 8009c8c:	f1ba 0f00 	cmp.w	sl, #0
 8009c90:	d107      	bne.n	8009ca2 <_strtol_l.isra.0+0xda>
 8009c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c96:	b102      	cbz	r2, 8009c9a <_strtol_l.isra.0+0xd2>
 8009c98:	4240      	negs	r0, r0
 8009c9a:	f1ba 0f00 	cmp.w	sl, #0
 8009c9e:	d0f8      	beq.n	8009c92 <_strtol_l.isra.0+0xca>
 8009ca0:	b10f      	cbz	r7, 8009ca6 <_strtol_l.isra.0+0xde>
 8009ca2:	f105 39ff 	add.w	r9, r5, #4294967295
 8009ca6:	f8ca 9000 	str.w	r9, [sl]
 8009caa:	e7f2      	b.n	8009c92 <_strtol_l.isra.0+0xca>
 8009cac:	2430      	movs	r4, #48	; 0x30
 8009cae:	2e00      	cmp	r6, #0
 8009cb0:	d1af      	bne.n	8009c12 <_strtol_l.isra.0+0x4a>
 8009cb2:	2608      	movs	r6, #8
 8009cb4:	e7ad      	b.n	8009c12 <_strtol_l.isra.0+0x4a>
 8009cb6:	2c30      	cmp	r4, #48	; 0x30
 8009cb8:	d0a3      	beq.n	8009c02 <_strtol_l.isra.0+0x3a>
 8009cba:	260a      	movs	r6, #10
 8009cbc:	e7a9      	b.n	8009c12 <_strtol_l.isra.0+0x4a>
	...

08009cc0 <_strtol_r>:
 8009cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cc2:	4c06      	ldr	r4, [pc, #24]	; (8009cdc <_strtol_r+0x1c>)
 8009cc4:	4d06      	ldr	r5, [pc, #24]	; (8009ce0 <_strtol_r+0x20>)
 8009cc6:	6824      	ldr	r4, [r4, #0]
 8009cc8:	6a24      	ldr	r4, [r4, #32]
 8009cca:	2c00      	cmp	r4, #0
 8009ccc:	bf08      	it	eq
 8009cce:	462c      	moveq	r4, r5
 8009cd0:	9400      	str	r4, [sp, #0]
 8009cd2:	f7ff ff79 	bl	8009bc8 <_strtol_l.isra.0>
 8009cd6:	b003      	add	sp, #12
 8009cd8:	bd30      	pop	{r4, r5, pc}
 8009cda:	bf00      	nop
 8009cdc:	20000180 	.word	0x20000180
 8009ce0:	200001e4 	.word	0x200001e4

08009ce4 <quorem>:
 8009ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce8:	6903      	ldr	r3, [r0, #16]
 8009cea:	690c      	ldr	r4, [r1, #16]
 8009cec:	42a3      	cmp	r3, r4
 8009cee:	4680      	mov	r8, r0
 8009cf0:	f2c0 8082 	blt.w	8009df8 <quorem+0x114>
 8009cf4:	3c01      	subs	r4, #1
 8009cf6:	f101 0714 	add.w	r7, r1, #20
 8009cfa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009cfe:	f100 0614 	add.w	r6, r0, #20
 8009d02:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009d06:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009d0a:	eb06 030c 	add.w	r3, r6, ip
 8009d0e:	3501      	adds	r5, #1
 8009d10:	eb07 090c 	add.w	r9, r7, ip
 8009d14:	9301      	str	r3, [sp, #4]
 8009d16:	fbb0 f5f5 	udiv	r5, r0, r5
 8009d1a:	b395      	cbz	r5, 8009d82 <quorem+0x9e>
 8009d1c:	f04f 0a00 	mov.w	sl, #0
 8009d20:	4638      	mov	r0, r7
 8009d22:	46b6      	mov	lr, r6
 8009d24:	46d3      	mov	fp, sl
 8009d26:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d2a:	b293      	uxth	r3, r2
 8009d2c:	fb05 a303 	mla	r3, r5, r3, sl
 8009d30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	ebab 0303 	sub.w	r3, fp, r3
 8009d3a:	0c12      	lsrs	r2, r2, #16
 8009d3c:	f8de b000 	ldr.w	fp, [lr]
 8009d40:	fb05 a202 	mla	r2, r5, r2, sl
 8009d44:	fa13 f38b 	uxtah	r3, r3, fp
 8009d48:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009d4c:	fa1f fb82 	uxth.w	fp, r2
 8009d50:	f8de 2000 	ldr.w	r2, [lr]
 8009d54:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009d58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d62:	4581      	cmp	r9, r0
 8009d64:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009d68:	f84e 3b04 	str.w	r3, [lr], #4
 8009d6c:	d2db      	bcs.n	8009d26 <quorem+0x42>
 8009d6e:	f856 300c 	ldr.w	r3, [r6, ip]
 8009d72:	b933      	cbnz	r3, 8009d82 <quorem+0x9e>
 8009d74:	9b01      	ldr	r3, [sp, #4]
 8009d76:	3b04      	subs	r3, #4
 8009d78:	429e      	cmp	r6, r3
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	d330      	bcc.n	8009de0 <quorem+0xfc>
 8009d7e:	f8c8 4010 	str.w	r4, [r8, #16]
 8009d82:	4640      	mov	r0, r8
 8009d84:	f001 fc6a 	bl	800b65c <__mcmp>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	db25      	blt.n	8009dd8 <quorem+0xf4>
 8009d8c:	3501      	adds	r5, #1
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f04f 0c00 	mov.w	ip, #0
 8009d94:	f857 2b04 	ldr.w	r2, [r7], #4
 8009d98:	f8d0 e000 	ldr.w	lr, [r0]
 8009d9c:	b293      	uxth	r3, r2
 8009d9e:	ebac 0303 	sub.w	r3, ip, r3
 8009da2:	0c12      	lsrs	r2, r2, #16
 8009da4:	fa13 f38e 	uxtah	r3, r3, lr
 8009da8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009dac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009db6:	45b9      	cmp	r9, r7
 8009db8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009dbc:	f840 3b04 	str.w	r3, [r0], #4
 8009dc0:	d2e8      	bcs.n	8009d94 <quorem+0xb0>
 8009dc2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009dc6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009dca:	b92a      	cbnz	r2, 8009dd8 <quorem+0xf4>
 8009dcc:	3b04      	subs	r3, #4
 8009dce:	429e      	cmp	r6, r3
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	d30b      	bcc.n	8009dec <quorem+0x108>
 8009dd4:	f8c8 4010 	str.w	r4, [r8, #16]
 8009dd8:	4628      	mov	r0, r5
 8009dda:	b003      	add	sp, #12
 8009ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de0:	6812      	ldr	r2, [r2, #0]
 8009de2:	3b04      	subs	r3, #4
 8009de4:	2a00      	cmp	r2, #0
 8009de6:	d1ca      	bne.n	8009d7e <quorem+0x9a>
 8009de8:	3c01      	subs	r4, #1
 8009dea:	e7c5      	b.n	8009d78 <quorem+0x94>
 8009dec:	6812      	ldr	r2, [r2, #0]
 8009dee:	3b04      	subs	r3, #4
 8009df0:	2a00      	cmp	r2, #0
 8009df2:	d1ef      	bne.n	8009dd4 <quorem+0xf0>
 8009df4:	3c01      	subs	r4, #1
 8009df6:	e7ea      	b.n	8009dce <quorem+0xea>
 8009df8:	2000      	movs	r0, #0
 8009dfa:	e7ee      	b.n	8009dda <quorem+0xf6>
 8009dfc:	0000      	movs	r0, r0
	...

08009e00 <_dtoa_r>:
 8009e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	ec57 6b10 	vmov	r6, r7, d0
 8009e08:	b097      	sub	sp, #92	; 0x5c
 8009e0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e0c:	9106      	str	r1, [sp, #24]
 8009e0e:	4604      	mov	r4, r0
 8009e10:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e12:	9312      	str	r3, [sp, #72]	; 0x48
 8009e14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e18:	e9cd 6700 	strd	r6, r7, [sp]
 8009e1c:	b93d      	cbnz	r5, 8009e2e <_dtoa_r+0x2e>
 8009e1e:	2010      	movs	r0, #16
 8009e20:	f7fe f966 	bl	80080f0 <malloc>
 8009e24:	6260      	str	r0, [r4, #36]	; 0x24
 8009e26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e2a:	6005      	str	r5, [r0, #0]
 8009e2c:	60c5      	str	r5, [r0, #12]
 8009e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e30:	6819      	ldr	r1, [r3, #0]
 8009e32:	b151      	cbz	r1, 8009e4a <_dtoa_r+0x4a>
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	604a      	str	r2, [r1, #4]
 8009e38:	2301      	movs	r3, #1
 8009e3a:	4093      	lsls	r3, r2
 8009e3c:	608b      	str	r3, [r1, #8]
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f001 f9ed 	bl	800b21e <_Bfree>
 8009e44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e46:	2200      	movs	r2, #0
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	1e3b      	subs	r3, r7, #0
 8009e4c:	bfbb      	ittet	lt
 8009e4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009e52:	9301      	strlt	r3, [sp, #4]
 8009e54:	2300      	movge	r3, #0
 8009e56:	2201      	movlt	r2, #1
 8009e58:	bfac      	ite	ge
 8009e5a:	f8c8 3000 	strge.w	r3, [r8]
 8009e5e:	f8c8 2000 	strlt.w	r2, [r8]
 8009e62:	4baf      	ldr	r3, [pc, #700]	; (800a120 <_dtoa_r+0x320>)
 8009e64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e68:	ea33 0308 	bics.w	r3, r3, r8
 8009e6c:	d114      	bne.n	8009e98 <_dtoa_r+0x98>
 8009e6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e70:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	9b00      	ldr	r3, [sp, #0]
 8009e78:	b923      	cbnz	r3, 8009e84 <_dtoa_r+0x84>
 8009e7a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	f000 8542 	beq.w	800a908 <_dtoa_r+0xb08>
 8009e84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e86:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a134 <_dtoa_r+0x334>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 8544 	beq.w	800a918 <_dtoa_r+0xb18>
 8009e90:	f10b 0303 	add.w	r3, fp, #3
 8009e94:	f000 bd3e 	b.w	800a914 <_dtoa_r+0xb14>
 8009e98:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	f7f6 fe18 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ea8:	4681      	mov	r9, r0
 8009eaa:	b168      	cbz	r0, 8009ec8 <_dtoa_r+0xc8>
 8009eac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009eae:	2301      	movs	r3, #1
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 8524 	beq.w	800a902 <_dtoa_r+0xb02>
 8009eba:	4b9a      	ldr	r3, [pc, #616]	; (800a124 <_dtoa_r+0x324>)
 8009ebc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ebe:	f103 3bff 	add.w	fp, r3, #4294967295
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	f000 bd28 	b.w	800a918 <_dtoa_r+0xb18>
 8009ec8:	aa14      	add	r2, sp, #80	; 0x50
 8009eca:	a915      	add	r1, sp, #84	; 0x54
 8009ecc:	ec47 6b10 	vmov	d0, r6, r7
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f001 fcb1 	bl	800b838 <__d2b>
 8009ed6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009eda:	9004      	str	r0, [sp, #16]
 8009edc:	2d00      	cmp	r5, #0
 8009ede:	d07c      	beq.n	8009fda <_dtoa_r+0x1da>
 8009ee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ee4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009ee8:	46b2      	mov	sl, r6
 8009eea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009eee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ef2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4b8b      	ldr	r3, [pc, #556]	; (800a128 <_dtoa_r+0x328>)
 8009efa:	4650      	mov	r0, sl
 8009efc:	4659      	mov	r1, fp
 8009efe:	f7f6 f9cb 	bl	8000298 <__aeabi_dsub>
 8009f02:	a381      	add	r3, pc, #516	; (adr r3, 800a108 <_dtoa_r+0x308>)
 8009f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f08:	f7f6 fb7e 	bl	8000608 <__aeabi_dmul>
 8009f0c:	a380      	add	r3, pc, #512	; (adr r3, 800a110 <_dtoa_r+0x310>)
 8009f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f12:	f7f6 f9c3 	bl	800029c <__adddf3>
 8009f16:	4606      	mov	r6, r0
 8009f18:	4628      	mov	r0, r5
 8009f1a:	460f      	mov	r7, r1
 8009f1c:	f7f6 fb0a 	bl	8000534 <__aeabi_i2d>
 8009f20:	a37d      	add	r3, pc, #500	; (adr r3, 800a118 <_dtoa_r+0x318>)
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	f7f6 fb6f 	bl	8000608 <__aeabi_dmul>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	4630      	mov	r0, r6
 8009f30:	4639      	mov	r1, r7
 8009f32:	f7f6 f9b3 	bl	800029c <__adddf3>
 8009f36:	4606      	mov	r6, r0
 8009f38:	460f      	mov	r7, r1
 8009f3a:	f7f6 fe15 	bl	8000b68 <__aeabi_d2iz>
 8009f3e:	2200      	movs	r2, #0
 8009f40:	4682      	mov	sl, r0
 8009f42:	2300      	movs	r3, #0
 8009f44:	4630      	mov	r0, r6
 8009f46:	4639      	mov	r1, r7
 8009f48:	f7f6 fdd0 	bl	8000aec <__aeabi_dcmplt>
 8009f4c:	b148      	cbz	r0, 8009f62 <_dtoa_r+0x162>
 8009f4e:	4650      	mov	r0, sl
 8009f50:	f7f6 faf0 	bl	8000534 <__aeabi_i2d>
 8009f54:	4632      	mov	r2, r6
 8009f56:	463b      	mov	r3, r7
 8009f58:	f7f6 fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f5c:	b908      	cbnz	r0, 8009f62 <_dtoa_r+0x162>
 8009f5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f62:	f1ba 0f16 	cmp.w	sl, #22
 8009f66:	d859      	bhi.n	800a01c <_dtoa_r+0x21c>
 8009f68:	4970      	ldr	r1, [pc, #448]	; (800a12c <_dtoa_r+0x32c>)
 8009f6a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009f6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f76:	f7f6 fdd7 	bl	8000b28 <__aeabi_dcmpgt>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d050      	beq.n	800a020 <_dtoa_r+0x220>
 8009f7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f82:	2300      	movs	r3, #0
 8009f84:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f88:	1b5d      	subs	r5, r3, r5
 8009f8a:	f1b5 0801 	subs.w	r8, r5, #1
 8009f8e:	bf49      	itett	mi
 8009f90:	f1c5 0301 	rsbmi	r3, r5, #1
 8009f94:	2300      	movpl	r3, #0
 8009f96:	9305      	strmi	r3, [sp, #20]
 8009f98:	f04f 0800 	movmi.w	r8, #0
 8009f9c:	bf58      	it	pl
 8009f9e:	9305      	strpl	r3, [sp, #20]
 8009fa0:	f1ba 0f00 	cmp.w	sl, #0
 8009fa4:	db3e      	blt.n	800a024 <_dtoa_r+0x224>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	44d0      	add	r8, sl
 8009faa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009fae:	9307      	str	r3, [sp, #28]
 8009fb0:	9b06      	ldr	r3, [sp, #24]
 8009fb2:	2b09      	cmp	r3, #9
 8009fb4:	f200 8090 	bhi.w	800a0d8 <_dtoa_r+0x2d8>
 8009fb8:	2b05      	cmp	r3, #5
 8009fba:	bfc4      	itt	gt
 8009fbc:	3b04      	subgt	r3, #4
 8009fbe:	9306      	strgt	r3, [sp, #24]
 8009fc0:	9b06      	ldr	r3, [sp, #24]
 8009fc2:	f1a3 0302 	sub.w	r3, r3, #2
 8009fc6:	bfcc      	ite	gt
 8009fc8:	2500      	movgt	r5, #0
 8009fca:	2501      	movle	r5, #1
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	f200 808f 	bhi.w	800a0f0 <_dtoa_r+0x2f0>
 8009fd2:	e8df f003 	tbb	[pc, r3]
 8009fd6:	7f7d      	.short	0x7f7d
 8009fd8:	7131      	.short	0x7131
 8009fda:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009fde:	441d      	add	r5, r3
 8009fe0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009fe4:	2820      	cmp	r0, #32
 8009fe6:	dd13      	ble.n	800a010 <_dtoa_r+0x210>
 8009fe8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009fec:	9b00      	ldr	r3, [sp, #0]
 8009fee:	fa08 f800 	lsl.w	r8, r8, r0
 8009ff2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009ff6:	fa23 f000 	lsr.w	r0, r3, r0
 8009ffa:	ea48 0000 	orr.w	r0, r8, r0
 8009ffe:	f7f6 fa89 	bl	8000514 <__aeabi_ui2d>
 800a002:	2301      	movs	r3, #1
 800a004:	4682      	mov	sl, r0
 800a006:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a00a:	3d01      	subs	r5, #1
 800a00c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a00e:	e772      	b.n	8009ef6 <_dtoa_r+0xf6>
 800a010:	9b00      	ldr	r3, [sp, #0]
 800a012:	f1c0 0020 	rsb	r0, r0, #32
 800a016:	fa03 f000 	lsl.w	r0, r3, r0
 800a01a:	e7f0      	b.n	8009ffe <_dtoa_r+0x1fe>
 800a01c:	2301      	movs	r3, #1
 800a01e:	e7b1      	b.n	8009f84 <_dtoa_r+0x184>
 800a020:	900f      	str	r0, [sp, #60]	; 0x3c
 800a022:	e7b0      	b.n	8009f86 <_dtoa_r+0x186>
 800a024:	9b05      	ldr	r3, [sp, #20]
 800a026:	eba3 030a 	sub.w	r3, r3, sl
 800a02a:	9305      	str	r3, [sp, #20]
 800a02c:	f1ca 0300 	rsb	r3, sl, #0
 800a030:	9307      	str	r3, [sp, #28]
 800a032:	2300      	movs	r3, #0
 800a034:	930e      	str	r3, [sp, #56]	; 0x38
 800a036:	e7bb      	b.n	8009fb0 <_dtoa_r+0x1b0>
 800a038:	2301      	movs	r3, #1
 800a03a:	930a      	str	r3, [sp, #40]	; 0x28
 800a03c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a03e:	2b00      	cmp	r3, #0
 800a040:	dd59      	ble.n	800a0f6 <_dtoa_r+0x2f6>
 800a042:	9302      	str	r3, [sp, #8]
 800a044:	4699      	mov	r9, r3
 800a046:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a048:	2200      	movs	r2, #0
 800a04a:	6072      	str	r2, [r6, #4]
 800a04c:	2204      	movs	r2, #4
 800a04e:	f102 0014 	add.w	r0, r2, #20
 800a052:	4298      	cmp	r0, r3
 800a054:	6871      	ldr	r1, [r6, #4]
 800a056:	d953      	bls.n	800a100 <_dtoa_r+0x300>
 800a058:	4620      	mov	r0, r4
 800a05a:	f001 f8ac 	bl	800b1b6 <_Balloc>
 800a05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a060:	6030      	str	r0, [r6, #0]
 800a062:	f1b9 0f0e 	cmp.w	r9, #14
 800a066:	f8d3 b000 	ldr.w	fp, [r3]
 800a06a:	f200 80e6 	bhi.w	800a23a <_dtoa_r+0x43a>
 800a06e:	2d00      	cmp	r5, #0
 800a070:	f000 80e3 	beq.w	800a23a <_dtoa_r+0x43a>
 800a074:	ed9d 7b00 	vldr	d7, [sp]
 800a078:	f1ba 0f00 	cmp.w	sl, #0
 800a07c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a080:	dd74      	ble.n	800a16c <_dtoa_r+0x36c>
 800a082:	4a2a      	ldr	r2, [pc, #168]	; (800a12c <_dtoa_r+0x32c>)
 800a084:	f00a 030f 	and.w	r3, sl, #15
 800a088:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a08c:	ed93 7b00 	vldr	d7, [r3]
 800a090:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a094:	06f0      	lsls	r0, r6, #27
 800a096:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a09a:	d565      	bpl.n	800a168 <_dtoa_r+0x368>
 800a09c:	4b24      	ldr	r3, [pc, #144]	; (800a130 <_dtoa_r+0x330>)
 800a09e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0a6:	f7f6 fbd9 	bl	800085c <__aeabi_ddiv>
 800a0aa:	e9cd 0100 	strd	r0, r1, [sp]
 800a0ae:	f006 060f 	and.w	r6, r6, #15
 800a0b2:	2503      	movs	r5, #3
 800a0b4:	4f1e      	ldr	r7, [pc, #120]	; (800a130 <_dtoa_r+0x330>)
 800a0b6:	e04c      	b.n	800a152 <_dtoa_r+0x352>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a0bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0be:	4453      	add	r3, sl
 800a0c0:	f103 0901 	add.w	r9, r3, #1
 800a0c4:	9302      	str	r3, [sp, #8]
 800a0c6:	464b      	mov	r3, r9
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	bfb8      	it	lt
 800a0cc:	2301      	movlt	r3, #1
 800a0ce:	e7ba      	b.n	800a046 <_dtoa_r+0x246>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	e7b2      	b.n	800a03a <_dtoa_r+0x23a>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	e7f0      	b.n	800a0ba <_dtoa_r+0x2ba>
 800a0d8:	2501      	movs	r5, #1
 800a0da:	2300      	movs	r3, #0
 800a0dc:	9306      	str	r3, [sp, #24]
 800a0de:	950a      	str	r5, [sp, #40]	; 0x28
 800a0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e4:	9302      	str	r3, [sp, #8]
 800a0e6:	4699      	mov	r9, r3
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2312      	movs	r3, #18
 800a0ec:	920b      	str	r2, [sp, #44]	; 0x2c
 800a0ee:	e7aa      	b.n	800a046 <_dtoa_r+0x246>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a0f4:	e7f4      	b.n	800a0e0 <_dtoa_r+0x2e0>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	9302      	str	r3, [sp, #8]
 800a0fa:	4699      	mov	r9, r3
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	e7f5      	b.n	800a0ec <_dtoa_r+0x2ec>
 800a100:	3101      	adds	r1, #1
 800a102:	6071      	str	r1, [r6, #4]
 800a104:	0052      	lsls	r2, r2, #1
 800a106:	e7a2      	b.n	800a04e <_dtoa_r+0x24e>
 800a108:	636f4361 	.word	0x636f4361
 800a10c:	3fd287a7 	.word	0x3fd287a7
 800a110:	8b60c8b3 	.word	0x8b60c8b3
 800a114:	3fc68a28 	.word	0x3fc68a28
 800a118:	509f79fb 	.word	0x509f79fb
 800a11c:	3fd34413 	.word	0x3fd34413
 800a120:	7ff00000 	.word	0x7ff00000
 800a124:	0800c57d 	.word	0x0800c57d
 800a128:	3ff80000 	.word	0x3ff80000
 800a12c:	0800c6a0 	.word	0x0800c6a0
 800a130:	0800c678 	.word	0x0800c678
 800a134:	0800c601 	.word	0x0800c601
 800a138:	07f1      	lsls	r1, r6, #31
 800a13a:	d508      	bpl.n	800a14e <_dtoa_r+0x34e>
 800a13c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a140:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a144:	f7f6 fa60 	bl	8000608 <__aeabi_dmul>
 800a148:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a14c:	3501      	adds	r5, #1
 800a14e:	1076      	asrs	r6, r6, #1
 800a150:	3708      	adds	r7, #8
 800a152:	2e00      	cmp	r6, #0
 800a154:	d1f0      	bne.n	800a138 <_dtoa_r+0x338>
 800a156:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a15a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a15e:	f7f6 fb7d 	bl	800085c <__aeabi_ddiv>
 800a162:	e9cd 0100 	strd	r0, r1, [sp]
 800a166:	e01a      	b.n	800a19e <_dtoa_r+0x39e>
 800a168:	2502      	movs	r5, #2
 800a16a:	e7a3      	b.n	800a0b4 <_dtoa_r+0x2b4>
 800a16c:	f000 80a0 	beq.w	800a2b0 <_dtoa_r+0x4b0>
 800a170:	f1ca 0600 	rsb	r6, sl, #0
 800a174:	4b9f      	ldr	r3, [pc, #636]	; (800a3f4 <_dtoa_r+0x5f4>)
 800a176:	4fa0      	ldr	r7, [pc, #640]	; (800a3f8 <_dtoa_r+0x5f8>)
 800a178:	f006 020f 	and.w	r2, r6, #15
 800a17c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a184:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a188:	f7f6 fa3e 	bl	8000608 <__aeabi_dmul>
 800a18c:	e9cd 0100 	strd	r0, r1, [sp]
 800a190:	1136      	asrs	r6, r6, #4
 800a192:	2300      	movs	r3, #0
 800a194:	2502      	movs	r5, #2
 800a196:	2e00      	cmp	r6, #0
 800a198:	d17f      	bne.n	800a29a <_dtoa_r+0x49a>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1e1      	bne.n	800a162 <_dtoa_r+0x362>
 800a19e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 8087 	beq.w	800a2b4 <_dtoa_r+0x4b4>
 800a1a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	4b93      	ldr	r3, [pc, #588]	; (800a3fc <_dtoa_r+0x5fc>)
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	f7f6 fc9b 	bl	8000aec <__aeabi_dcmplt>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d07c      	beq.n	800a2b4 <_dtoa_r+0x4b4>
 800a1ba:	f1b9 0f00 	cmp.w	r9, #0
 800a1be:	d079      	beq.n	800a2b4 <_dtoa_r+0x4b4>
 800a1c0:	9b02      	ldr	r3, [sp, #8]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dd35      	ble.n	800a232 <_dtoa_r+0x432>
 800a1c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a1ca:	9308      	str	r3, [sp, #32]
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	4b8b      	ldr	r3, [pc, #556]	; (800a400 <_dtoa_r+0x600>)
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f7f6 fa18 	bl	8000608 <__aeabi_dmul>
 800a1d8:	e9cd 0100 	strd	r0, r1, [sp]
 800a1dc:	9f02      	ldr	r7, [sp, #8]
 800a1de:	3501      	adds	r5, #1
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f7f6 f9a7 	bl	8000534 <__aeabi_i2d>
 800a1e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1ea:	f7f6 fa0d 	bl	8000608 <__aeabi_dmul>
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	4b84      	ldr	r3, [pc, #528]	; (800a404 <_dtoa_r+0x604>)
 800a1f2:	f7f6 f853 	bl	800029c <__adddf3>
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a1fc:	2f00      	cmp	r7, #0
 800a1fe:	d15d      	bne.n	800a2bc <_dtoa_r+0x4bc>
 800a200:	2200      	movs	r2, #0
 800a202:	4b81      	ldr	r3, [pc, #516]	; (800a408 <_dtoa_r+0x608>)
 800a204:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a208:	f7f6 f846 	bl	8000298 <__aeabi_dsub>
 800a20c:	462a      	mov	r2, r5
 800a20e:	4633      	mov	r3, r6
 800a210:	e9cd 0100 	strd	r0, r1, [sp]
 800a214:	f7f6 fc88 	bl	8000b28 <__aeabi_dcmpgt>
 800a218:	2800      	cmp	r0, #0
 800a21a:	f040 8288 	bne.w	800a72e <_dtoa_r+0x92e>
 800a21e:	462a      	mov	r2, r5
 800a220:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a224:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a228:	f7f6 fc60 	bl	8000aec <__aeabi_dcmplt>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	f040 827c 	bne.w	800a72a <_dtoa_r+0x92a>
 800a232:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a236:	e9cd 2300 	strd	r2, r3, [sp]
 800a23a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f2c0 8150 	blt.w	800a4e2 <_dtoa_r+0x6e2>
 800a242:	f1ba 0f0e 	cmp.w	sl, #14
 800a246:	f300 814c 	bgt.w	800a4e2 <_dtoa_r+0x6e2>
 800a24a:	4b6a      	ldr	r3, [pc, #424]	; (800a3f4 <_dtoa_r+0x5f4>)
 800a24c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a250:	ed93 7b00 	vldr	d7, [r3]
 800a254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a256:	2b00      	cmp	r3, #0
 800a258:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a25c:	f280 80d8 	bge.w	800a410 <_dtoa_r+0x610>
 800a260:	f1b9 0f00 	cmp.w	r9, #0
 800a264:	f300 80d4 	bgt.w	800a410 <_dtoa_r+0x610>
 800a268:	f040 825e 	bne.w	800a728 <_dtoa_r+0x928>
 800a26c:	2200      	movs	r2, #0
 800a26e:	4b66      	ldr	r3, [pc, #408]	; (800a408 <_dtoa_r+0x608>)
 800a270:	ec51 0b17 	vmov	r0, r1, d7
 800a274:	f7f6 f9c8 	bl	8000608 <__aeabi_dmul>
 800a278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a27c:	f7f6 fc4a 	bl	8000b14 <__aeabi_dcmpge>
 800a280:	464f      	mov	r7, r9
 800a282:	464e      	mov	r6, r9
 800a284:	2800      	cmp	r0, #0
 800a286:	f040 8234 	bne.w	800a6f2 <_dtoa_r+0x8f2>
 800a28a:	2331      	movs	r3, #49	; 0x31
 800a28c:	f10b 0501 	add.w	r5, fp, #1
 800a290:	f88b 3000 	strb.w	r3, [fp]
 800a294:	f10a 0a01 	add.w	sl, sl, #1
 800a298:	e22f      	b.n	800a6fa <_dtoa_r+0x8fa>
 800a29a:	07f2      	lsls	r2, r6, #31
 800a29c:	d505      	bpl.n	800a2aa <_dtoa_r+0x4aa>
 800a29e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2a2:	f7f6 f9b1 	bl	8000608 <__aeabi_dmul>
 800a2a6:	3501      	adds	r5, #1
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	1076      	asrs	r6, r6, #1
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	e772      	b.n	800a196 <_dtoa_r+0x396>
 800a2b0:	2502      	movs	r5, #2
 800a2b2:	e774      	b.n	800a19e <_dtoa_r+0x39e>
 800a2b4:	f8cd a020 	str.w	sl, [sp, #32]
 800a2b8:	464f      	mov	r7, r9
 800a2ba:	e791      	b.n	800a1e0 <_dtoa_r+0x3e0>
 800a2bc:	4b4d      	ldr	r3, [pc, #308]	; (800a3f4 <_dtoa_r+0x5f4>)
 800a2be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d047      	beq.n	800a35c <_dtoa_r+0x55c>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	494e      	ldr	r1, [pc, #312]	; (800a40c <_dtoa_r+0x60c>)
 800a2d4:	f7f6 fac2 	bl	800085c <__aeabi_ddiv>
 800a2d8:	462a      	mov	r2, r5
 800a2da:	4633      	mov	r3, r6
 800a2dc:	f7f5 ffdc 	bl	8000298 <__aeabi_dsub>
 800a2e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a2e4:	465d      	mov	r5, fp
 800a2e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2ea:	f7f6 fc3d 	bl	8000b68 <__aeabi_d2iz>
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	f7f6 f920 	bl	8000534 <__aeabi_i2d>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2fc:	f7f5 ffcc 	bl	8000298 <__aeabi_dsub>
 800a300:	3630      	adds	r6, #48	; 0x30
 800a302:	f805 6b01 	strb.w	r6, [r5], #1
 800a306:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a30a:	e9cd 0100 	strd	r0, r1, [sp]
 800a30e:	f7f6 fbed 	bl	8000aec <__aeabi_dcmplt>
 800a312:	2800      	cmp	r0, #0
 800a314:	d163      	bne.n	800a3de <_dtoa_r+0x5de>
 800a316:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a31a:	2000      	movs	r0, #0
 800a31c:	4937      	ldr	r1, [pc, #220]	; (800a3fc <_dtoa_r+0x5fc>)
 800a31e:	f7f5 ffbb 	bl	8000298 <__aeabi_dsub>
 800a322:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a326:	f7f6 fbe1 	bl	8000aec <__aeabi_dcmplt>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	f040 80b7 	bne.w	800a49e <_dtoa_r+0x69e>
 800a330:	eba5 030b 	sub.w	r3, r5, fp
 800a334:	429f      	cmp	r7, r3
 800a336:	f77f af7c 	ble.w	800a232 <_dtoa_r+0x432>
 800a33a:	2200      	movs	r2, #0
 800a33c:	4b30      	ldr	r3, [pc, #192]	; (800a400 <_dtoa_r+0x600>)
 800a33e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a342:	f7f6 f961 	bl	8000608 <__aeabi_dmul>
 800a346:	2200      	movs	r2, #0
 800a348:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a34c:	4b2c      	ldr	r3, [pc, #176]	; (800a400 <_dtoa_r+0x600>)
 800a34e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a352:	f7f6 f959 	bl	8000608 <__aeabi_dmul>
 800a356:	e9cd 0100 	strd	r0, r1, [sp]
 800a35a:	e7c4      	b.n	800a2e6 <_dtoa_r+0x4e6>
 800a35c:	462a      	mov	r2, r5
 800a35e:	4633      	mov	r3, r6
 800a360:	f7f6 f952 	bl	8000608 <__aeabi_dmul>
 800a364:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a368:	eb0b 0507 	add.w	r5, fp, r7
 800a36c:	465e      	mov	r6, fp
 800a36e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a372:	f7f6 fbf9 	bl	8000b68 <__aeabi_d2iz>
 800a376:	4607      	mov	r7, r0
 800a378:	f7f6 f8dc 	bl	8000534 <__aeabi_i2d>
 800a37c:	3730      	adds	r7, #48	; 0x30
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a386:	f7f5 ff87 	bl	8000298 <__aeabi_dsub>
 800a38a:	f806 7b01 	strb.w	r7, [r6], #1
 800a38e:	42ae      	cmp	r6, r5
 800a390:	e9cd 0100 	strd	r0, r1, [sp]
 800a394:	f04f 0200 	mov.w	r2, #0
 800a398:	d126      	bne.n	800a3e8 <_dtoa_r+0x5e8>
 800a39a:	4b1c      	ldr	r3, [pc, #112]	; (800a40c <_dtoa_r+0x60c>)
 800a39c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3a0:	f7f5 ff7c 	bl	800029c <__adddf3>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3ac:	f7f6 fbbc 	bl	8000b28 <__aeabi_dcmpgt>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d174      	bne.n	800a49e <_dtoa_r+0x69e>
 800a3b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	4914      	ldr	r1, [pc, #80]	; (800a40c <_dtoa_r+0x60c>)
 800a3bc:	f7f5 ff6c 	bl	8000298 <__aeabi_dsub>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3c8:	f7f6 fb90 	bl	8000aec <__aeabi_dcmplt>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	f43f af30 	beq.w	800a232 <_dtoa_r+0x432>
 800a3d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3d6:	2b30      	cmp	r3, #48	; 0x30
 800a3d8:	f105 32ff 	add.w	r2, r5, #4294967295
 800a3dc:	d002      	beq.n	800a3e4 <_dtoa_r+0x5e4>
 800a3de:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a3e2:	e04a      	b.n	800a47a <_dtoa_r+0x67a>
 800a3e4:	4615      	mov	r5, r2
 800a3e6:	e7f4      	b.n	800a3d2 <_dtoa_r+0x5d2>
 800a3e8:	4b05      	ldr	r3, [pc, #20]	; (800a400 <_dtoa_r+0x600>)
 800a3ea:	f7f6 f90d 	bl	8000608 <__aeabi_dmul>
 800a3ee:	e9cd 0100 	strd	r0, r1, [sp]
 800a3f2:	e7bc      	b.n	800a36e <_dtoa_r+0x56e>
 800a3f4:	0800c6a0 	.word	0x0800c6a0
 800a3f8:	0800c678 	.word	0x0800c678
 800a3fc:	3ff00000 	.word	0x3ff00000
 800a400:	40240000 	.word	0x40240000
 800a404:	401c0000 	.word	0x401c0000
 800a408:	40140000 	.word	0x40140000
 800a40c:	3fe00000 	.word	0x3fe00000
 800a410:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a414:	465d      	mov	r5, fp
 800a416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a41a:	4630      	mov	r0, r6
 800a41c:	4639      	mov	r1, r7
 800a41e:	f7f6 fa1d 	bl	800085c <__aeabi_ddiv>
 800a422:	f7f6 fba1 	bl	8000b68 <__aeabi_d2iz>
 800a426:	4680      	mov	r8, r0
 800a428:	f7f6 f884 	bl	8000534 <__aeabi_i2d>
 800a42c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a430:	f7f6 f8ea 	bl	8000608 <__aeabi_dmul>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4630      	mov	r0, r6
 800a43a:	4639      	mov	r1, r7
 800a43c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a440:	f7f5 ff2a 	bl	8000298 <__aeabi_dsub>
 800a444:	f805 6b01 	strb.w	r6, [r5], #1
 800a448:	eba5 060b 	sub.w	r6, r5, fp
 800a44c:	45b1      	cmp	r9, r6
 800a44e:	4602      	mov	r2, r0
 800a450:	460b      	mov	r3, r1
 800a452:	d139      	bne.n	800a4c8 <_dtoa_r+0x6c8>
 800a454:	f7f5 ff22 	bl	800029c <__adddf3>
 800a458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a45c:	4606      	mov	r6, r0
 800a45e:	460f      	mov	r7, r1
 800a460:	f7f6 fb62 	bl	8000b28 <__aeabi_dcmpgt>
 800a464:	b9c8      	cbnz	r0, 800a49a <_dtoa_r+0x69a>
 800a466:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a46a:	4630      	mov	r0, r6
 800a46c:	4639      	mov	r1, r7
 800a46e:	f7f6 fb33 	bl	8000ad8 <__aeabi_dcmpeq>
 800a472:	b110      	cbz	r0, 800a47a <_dtoa_r+0x67a>
 800a474:	f018 0f01 	tst.w	r8, #1
 800a478:	d10f      	bne.n	800a49a <_dtoa_r+0x69a>
 800a47a:	9904      	ldr	r1, [sp, #16]
 800a47c:	4620      	mov	r0, r4
 800a47e:	f000 fece 	bl	800b21e <_Bfree>
 800a482:	2300      	movs	r3, #0
 800a484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a486:	702b      	strb	r3, [r5, #0]
 800a488:	f10a 0301 	add.w	r3, sl, #1
 800a48c:	6013      	str	r3, [r2, #0]
 800a48e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 8241 	beq.w	800a918 <_dtoa_r+0xb18>
 800a496:	601d      	str	r5, [r3, #0]
 800a498:	e23e      	b.n	800a918 <_dtoa_r+0xb18>
 800a49a:	f8cd a020 	str.w	sl, [sp, #32]
 800a49e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4a2:	2a39      	cmp	r2, #57	; 0x39
 800a4a4:	f105 33ff 	add.w	r3, r5, #4294967295
 800a4a8:	d108      	bne.n	800a4bc <_dtoa_r+0x6bc>
 800a4aa:	459b      	cmp	fp, r3
 800a4ac:	d10a      	bne.n	800a4c4 <_dtoa_r+0x6c4>
 800a4ae:	9b08      	ldr	r3, [sp, #32]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	9308      	str	r3, [sp, #32]
 800a4b4:	2330      	movs	r3, #48	; 0x30
 800a4b6:	f88b 3000 	strb.w	r3, [fp]
 800a4ba:	465b      	mov	r3, fp
 800a4bc:	781a      	ldrb	r2, [r3, #0]
 800a4be:	3201      	adds	r2, #1
 800a4c0:	701a      	strb	r2, [r3, #0]
 800a4c2:	e78c      	b.n	800a3de <_dtoa_r+0x5de>
 800a4c4:	461d      	mov	r5, r3
 800a4c6:	e7ea      	b.n	800a49e <_dtoa_r+0x69e>
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	4b9b      	ldr	r3, [pc, #620]	; (800a738 <_dtoa_r+0x938>)
 800a4cc:	f7f6 f89c 	bl	8000608 <__aeabi_dmul>
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	460f      	mov	r7, r1
 800a4d8:	f7f6 fafe 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d09a      	beq.n	800a416 <_dtoa_r+0x616>
 800a4e0:	e7cb      	b.n	800a47a <_dtoa_r+0x67a>
 800a4e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4e4:	2a00      	cmp	r2, #0
 800a4e6:	f000 808b 	beq.w	800a600 <_dtoa_r+0x800>
 800a4ea:	9a06      	ldr	r2, [sp, #24]
 800a4ec:	2a01      	cmp	r2, #1
 800a4ee:	dc6e      	bgt.n	800a5ce <_dtoa_r+0x7ce>
 800a4f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a4f2:	2a00      	cmp	r2, #0
 800a4f4:	d067      	beq.n	800a5c6 <_dtoa_r+0x7c6>
 800a4f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a4fa:	9f07      	ldr	r7, [sp, #28]
 800a4fc:	9d05      	ldr	r5, [sp, #20]
 800a4fe:	9a05      	ldr	r2, [sp, #20]
 800a500:	2101      	movs	r1, #1
 800a502:	441a      	add	r2, r3
 800a504:	4620      	mov	r0, r4
 800a506:	9205      	str	r2, [sp, #20]
 800a508:	4498      	add	r8, r3
 800a50a:	f000 ff66 	bl	800b3da <__i2b>
 800a50e:	4606      	mov	r6, r0
 800a510:	2d00      	cmp	r5, #0
 800a512:	dd0c      	ble.n	800a52e <_dtoa_r+0x72e>
 800a514:	f1b8 0f00 	cmp.w	r8, #0
 800a518:	dd09      	ble.n	800a52e <_dtoa_r+0x72e>
 800a51a:	4545      	cmp	r5, r8
 800a51c:	9a05      	ldr	r2, [sp, #20]
 800a51e:	462b      	mov	r3, r5
 800a520:	bfa8      	it	ge
 800a522:	4643      	movge	r3, r8
 800a524:	1ad2      	subs	r2, r2, r3
 800a526:	9205      	str	r2, [sp, #20]
 800a528:	1aed      	subs	r5, r5, r3
 800a52a:	eba8 0803 	sub.w	r8, r8, r3
 800a52e:	9b07      	ldr	r3, [sp, #28]
 800a530:	b1eb      	cbz	r3, 800a56e <_dtoa_r+0x76e>
 800a532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a534:	2b00      	cmp	r3, #0
 800a536:	d067      	beq.n	800a608 <_dtoa_r+0x808>
 800a538:	b18f      	cbz	r7, 800a55e <_dtoa_r+0x75e>
 800a53a:	4631      	mov	r1, r6
 800a53c:	463a      	mov	r2, r7
 800a53e:	4620      	mov	r0, r4
 800a540:	f000 ffea 	bl	800b518 <__pow5mult>
 800a544:	9a04      	ldr	r2, [sp, #16]
 800a546:	4601      	mov	r1, r0
 800a548:	4606      	mov	r6, r0
 800a54a:	4620      	mov	r0, r4
 800a54c:	f000 ff4e 	bl	800b3ec <__multiply>
 800a550:	9904      	ldr	r1, [sp, #16]
 800a552:	9008      	str	r0, [sp, #32]
 800a554:	4620      	mov	r0, r4
 800a556:	f000 fe62 	bl	800b21e <_Bfree>
 800a55a:	9b08      	ldr	r3, [sp, #32]
 800a55c:	9304      	str	r3, [sp, #16]
 800a55e:	9b07      	ldr	r3, [sp, #28]
 800a560:	1bda      	subs	r2, r3, r7
 800a562:	d004      	beq.n	800a56e <_dtoa_r+0x76e>
 800a564:	9904      	ldr	r1, [sp, #16]
 800a566:	4620      	mov	r0, r4
 800a568:	f000 ffd6 	bl	800b518 <__pow5mult>
 800a56c:	9004      	str	r0, [sp, #16]
 800a56e:	2101      	movs	r1, #1
 800a570:	4620      	mov	r0, r4
 800a572:	f000 ff32 	bl	800b3da <__i2b>
 800a576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a578:	4607      	mov	r7, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f000 81d0 	beq.w	800a920 <_dtoa_r+0xb20>
 800a580:	461a      	mov	r2, r3
 800a582:	4601      	mov	r1, r0
 800a584:	4620      	mov	r0, r4
 800a586:	f000 ffc7 	bl	800b518 <__pow5mult>
 800a58a:	9b06      	ldr	r3, [sp, #24]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	4607      	mov	r7, r0
 800a590:	dc40      	bgt.n	800a614 <_dtoa_r+0x814>
 800a592:	9b00      	ldr	r3, [sp, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d139      	bne.n	800a60c <_dtoa_r+0x80c>
 800a598:	9b01      	ldr	r3, [sp, #4]
 800a59a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d136      	bne.n	800a610 <_dtoa_r+0x810>
 800a5a2:	9b01      	ldr	r3, [sp, #4]
 800a5a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5a8:	0d1b      	lsrs	r3, r3, #20
 800a5aa:	051b      	lsls	r3, r3, #20
 800a5ac:	b12b      	cbz	r3, 800a5ba <_dtoa_r+0x7ba>
 800a5ae:	9b05      	ldr	r3, [sp, #20]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	9305      	str	r3, [sp, #20]
 800a5b4:	f108 0801 	add.w	r8, r8, #1
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	9307      	str	r3, [sp, #28]
 800a5bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d12a      	bne.n	800a618 <_dtoa_r+0x818>
 800a5c2:	2001      	movs	r0, #1
 800a5c4:	e030      	b.n	800a628 <_dtoa_r+0x828>
 800a5c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a5c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5cc:	e795      	b.n	800a4fa <_dtoa_r+0x6fa>
 800a5ce:	9b07      	ldr	r3, [sp, #28]
 800a5d0:	f109 37ff 	add.w	r7, r9, #4294967295
 800a5d4:	42bb      	cmp	r3, r7
 800a5d6:	bfbf      	itttt	lt
 800a5d8:	9b07      	ldrlt	r3, [sp, #28]
 800a5da:	9707      	strlt	r7, [sp, #28]
 800a5dc:	1afa      	sublt	r2, r7, r3
 800a5de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a5e0:	bfbb      	ittet	lt
 800a5e2:	189b      	addlt	r3, r3, r2
 800a5e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a5e6:	1bdf      	subge	r7, r3, r7
 800a5e8:	2700      	movlt	r7, #0
 800a5ea:	f1b9 0f00 	cmp.w	r9, #0
 800a5ee:	bfb5      	itete	lt
 800a5f0:	9b05      	ldrlt	r3, [sp, #20]
 800a5f2:	9d05      	ldrge	r5, [sp, #20]
 800a5f4:	eba3 0509 	sublt.w	r5, r3, r9
 800a5f8:	464b      	movge	r3, r9
 800a5fa:	bfb8      	it	lt
 800a5fc:	2300      	movlt	r3, #0
 800a5fe:	e77e      	b.n	800a4fe <_dtoa_r+0x6fe>
 800a600:	9f07      	ldr	r7, [sp, #28]
 800a602:	9d05      	ldr	r5, [sp, #20]
 800a604:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a606:	e783      	b.n	800a510 <_dtoa_r+0x710>
 800a608:	9a07      	ldr	r2, [sp, #28]
 800a60a:	e7ab      	b.n	800a564 <_dtoa_r+0x764>
 800a60c:	2300      	movs	r3, #0
 800a60e:	e7d4      	b.n	800a5ba <_dtoa_r+0x7ba>
 800a610:	9b00      	ldr	r3, [sp, #0]
 800a612:	e7d2      	b.n	800a5ba <_dtoa_r+0x7ba>
 800a614:	2300      	movs	r3, #0
 800a616:	9307      	str	r3, [sp, #28]
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a61e:	6918      	ldr	r0, [r3, #16]
 800a620:	f000 fe8d 	bl	800b33e <__hi0bits>
 800a624:	f1c0 0020 	rsb	r0, r0, #32
 800a628:	4440      	add	r0, r8
 800a62a:	f010 001f 	ands.w	r0, r0, #31
 800a62e:	d047      	beq.n	800a6c0 <_dtoa_r+0x8c0>
 800a630:	f1c0 0320 	rsb	r3, r0, #32
 800a634:	2b04      	cmp	r3, #4
 800a636:	dd3b      	ble.n	800a6b0 <_dtoa_r+0x8b0>
 800a638:	9b05      	ldr	r3, [sp, #20]
 800a63a:	f1c0 001c 	rsb	r0, r0, #28
 800a63e:	4403      	add	r3, r0
 800a640:	9305      	str	r3, [sp, #20]
 800a642:	4405      	add	r5, r0
 800a644:	4480      	add	r8, r0
 800a646:	9b05      	ldr	r3, [sp, #20]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	dd05      	ble.n	800a658 <_dtoa_r+0x858>
 800a64c:	461a      	mov	r2, r3
 800a64e:	9904      	ldr	r1, [sp, #16]
 800a650:	4620      	mov	r0, r4
 800a652:	f000 ffaf 	bl	800b5b4 <__lshift>
 800a656:	9004      	str	r0, [sp, #16]
 800a658:	f1b8 0f00 	cmp.w	r8, #0
 800a65c:	dd05      	ble.n	800a66a <_dtoa_r+0x86a>
 800a65e:	4639      	mov	r1, r7
 800a660:	4642      	mov	r2, r8
 800a662:	4620      	mov	r0, r4
 800a664:	f000 ffa6 	bl	800b5b4 <__lshift>
 800a668:	4607      	mov	r7, r0
 800a66a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a66c:	b353      	cbz	r3, 800a6c4 <_dtoa_r+0x8c4>
 800a66e:	4639      	mov	r1, r7
 800a670:	9804      	ldr	r0, [sp, #16]
 800a672:	f000 fff3 	bl	800b65c <__mcmp>
 800a676:	2800      	cmp	r0, #0
 800a678:	da24      	bge.n	800a6c4 <_dtoa_r+0x8c4>
 800a67a:	2300      	movs	r3, #0
 800a67c:	220a      	movs	r2, #10
 800a67e:	9904      	ldr	r1, [sp, #16]
 800a680:	4620      	mov	r0, r4
 800a682:	f000 fde3 	bl	800b24c <__multadd>
 800a686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a688:	9004      	str	r0, [sp, #16]
 800a68a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f000 814d 	beq.w	800a92e <_dtoa_r+0xb2e>
 800a694:	2300      	movs	r3, #0
 800a696:	4631      	mov	r1, r6
 800a698:	220a      	movs	r2, #10
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fdd6 	bl	800b24c <__multadd>
 800a6a0:	9b02      	ldr	r3, [sp, #8]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	dc4f      	bgt.n	800a748 <_dtoa_r+0x948>
 800a6a8:	9b06      	ldr	r3, [sp, #24]
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	dd4c      	ble.n	800a748 <_dtoa_r+0x948>
 800a6ae:	e011      	b.n	800a6d4 <_dtoa_r+0x8d4>
 800a6b0:	d0c9      	beq.n	800a646 <_dtoa_r+0x846>
 800a6b2:	9a05      	ldr	r2, [sp, #20]
 800a6b4:	331c      	adds	r3, #28
 800a6b6:	441a      	add	r2, r3
 800a6b8:	9205      	str	r2, [sp, #20]
 800a6ba:	441d      	add	r5, r3
 800a6bc:	4498      	add	r8, r3
 800a6be:	e7c2      	b.n	800a646 <_dtoa_r+0x846>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	e7f6      	b.n	800a6b2 <_dtoa_r+0x8b2>
 800a6c4:	f1b9 0f00 	cmp.w	r9, #0
 800a6c8:	dc38      	bgt.n	800a73c <_dtoa_r+0x93c>
 800a6ca:	9b06      	ldr	r3, [sp, #24]
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	dd35      	ble.n	800a73c <_dtoa_r+0x93c>
 800a6d0:	f8cd 9008 	str.w	r9, [sp, #8]
 800a6d4:	9b02      	ldr	r3, [sp, #8]
 800a6d6:	b963      	cbnz	r3, 800a6f2 <_dtoa_r+0x8f2>
 800a6d8:	4639      	mov	r1, r7
 800a6da:	2205      	movs	r2, #5
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f000 fdb5 	bl	800b24c <__multadd>
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	4607      	mov	r7, r0
 800a6e6:	9804      	ldr	r0, [sp, #16]
 800a6e8:	f000 ffb8 	bl	800b65c <__mcmp>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	f73f adcc 	bgt.w	800a28a <_dtoa_r+0x48a>
 800a6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6f4:	465d      	mov	r5, fp
 800a6f6:	ea6f 0a03 	mvn.w	sl, r3
 800a6fa:	f04f 0900 	mov.w	r9, #0
 800a6fe:	4639      	mov	r1, r7
 800a700:	4620      	mov	r0, r4
 800a702:	f000 fd8c 	bl	800b21e <_Bfree>
 800a706:	2e00      	cmp	r6, #0
 800a708:	f43f aeb7 	beq.w	800a47a <_dtoa_r+0x67a>
 800a70c:	f1b9 0f00 	cmp.w	r9, #0
 800a710:	d005      	beq.n	800a71e <_dtoa_r+0x91e>
 800a712:	45b1      	cmp	r9, r6
 800a714:	d003      	beq.n	800a71e <_dtoa_r+0x91e>
 800a716:	4649      	mov	r1, r9
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 fd80 	bl	800b21e <_Bfree>
 800a71e:	4631      	mov	r1, r6
 800a720:	4620      	mov	r0, r4
 800a722:	f000 fd7c 	bl	800b21e <_Bfree>
 800a726:	e6a8      	b.n	800a47a <_dtoa_r+0x67a>
 800a728:	2700      	movs	r7, #0
 800a72a:	463e      	mov	r6, r7
 800a72c:	e7e1      	b.n	800a6f2 <_dtoa_r+0x8f2>
 800a72e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a732:	463e      	mov	r6, r7
 800a734:	e5a9      	b.n	800a28a <_dtoa_r+0x48a>
 800a736:	bf00      	nop
 800a738:	40240000 	.word	0x40240000
 800a73c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a73e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a742:	2b00      	cmp	r3, #0
 800a744:	f000 80fa 	beq.w	800a93c <_dtoa_r+0xb3c>
 800a748:	2d00      	cmp	r5, #0
 800a74a:	dd05      	ble.n	800a758 <_dtoa_r+0x958>
 800a74c:	4631      	mov	r1, r6
 800a74e:	462a      	mov	r2, r5
 800a750:	4620      	mov	r0, r4
 800a752:	f000 ff2f 	bl	800b5b4 <__lshift>
 800a756:	4606      	mov	r6, r0
 800a758:	9b07      	ldr	r3, [sp, #28]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d04c      	beq.n	800a7f8 <_dtoa_r+0x9f8>
 800a75e:	6871      	ldr	r1, [r6, #4]
 800a760:	4620      	mov	r0, r4
 800a762:	f000 fd28 	bl	800b1b6 <_Balloc>
 800a766:	6932      	ldr	r2, [r6, #16]
 800a768:	3202      	adds	r2, #2
 800a76a:	4605      	mov	r5, r0
 800a76c:	0092      	lsls	r2, r2, #2
 800a76e:	f106 010c 	add.w	r1, r6, #12
 800a772:	300c      	adds	r0, #12
 800a774:	f000 fd12 	bl	800b19c <memcpy>
 800a778:	2201      	movs	r2, #1
 800a77a:	4629      	mov	r1, r5
 800a77c:	4620      	mov	r0, r4
 800a77e:	f000 ff19 	bl	800b5b4 <__lshift>
 800a782:	9b00      	ldr	r3, [sp, #0]
 800a784:	f8cd b014 	str.w	fp, [sp, #20]
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	46b1      	mov	r9, r6
 800a78e:	9307      	str	r3, [sp, #28]
 800a790:	4606      	mov	r6, r0
 800a792:	4639      	mov	r1, r7
 800a794:	9804      	ldr	r0, [sp, #16]
 800a796:	f7ff faa5 	bl	8009ce4 <quorem>
 800a79a:	4649      	mov	r1, r9
 800a79c:	4605      	mov	r5, r0
 800a79e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a7a2:	9804      	ldr	r0, [sp, #16]
 800a7a4:	f000 ff5a 	bl	800b65c <__mcmp>
 800a7a8:	4632      	mov	r2, r6
 800a7aa:	9000      	str	r0, [sp, #0]
 800a7ac:	4639      	mov	r1, r7
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 ff6e 	bl	800b690 <__mdiff>
 800a7b4:	68c3      	ldr	r3, [r0, #12]
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	bb03      	cbnz	r3, 800a7fc <_dtoa_r+0x9fc>
 800a7ba:	4601      	mov	r1, r0
 800a7bc:	9008      	str	r0, [sp, #32]
 800a7be:	9804      	ldr	r0, [sp, #16]
 800a7c0:	f000 ff4c 	bl	800b65c <__mcmp>
 800a7c4:	9a08      	ldr	r2, [sp, #32]
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	9308      	str	r3, [sp, #32]
 800a7ce:	f000 fd26 	bl	800b21e <_Bfree>
 800a7d2:	9b08      	ldr	r3, [sp, #32]
 800a7d4:	b9a3      	cbnz	r3, 800a800 <_dtoa_r+0xa00>
 800a7d6:	9a06      	ldr	r2, [sp, #24]
 800a7d8:	b992      	cbnz	r2, 800a800 <_dtoa_r+0xa00>
 800a7da:	9a07      	ldr	r2, [sp, #28]
 800a7dc:	b982      	cbnz	r2, 800a800 <_dtoa_r+0xa00>
 800a7de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a7e2:	d029      	beq.n	800a838 <_dtoa_r+0xa38>
 800a7e4:	9b00      	ldr	r3, [sp, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	dd01      	ble.n	800a7ee <_dtoa_r+0x9ee>
 800a7ea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a7ee:	9b05      	ldr	r3, [sp, #20]
 800a7f0:	1c5d      	adds	r5, r3, #1
 800a7f2:	f883 8000 	strb.w	r8, [r3]
 800a7f6:	e782      	b.n	800a6fe <_dtoa_r+0x8fe>
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	e7c2      	b.n	800a782 <_dtoa_r+0x982>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e7e3      	b.n	800a7c8 <_dtoa_r+0x9c8>
 800a800:	9a00      	ldr	r2, [sp, #0]
 800a802:	2a00      	cmp	r2, #0
 800a804:	db04      	blt.n	800a810 <_dtoa_r+0xa10>
 800a806:	d125      	bne.n	800a854 <_dtoa_r+0xa54>
 800a808:	9a06      	ldr	r2, [sp, #24]
 800a80a:	bb1a      	cbnz	r2, 800a854 <_dtoa_r+0xa54>
 800a80c:	9a07      	ldr	r2, [sp, #28]
 800a80e:	bb0a      	cbnz	r2, 800a854 <_dtoa_r+0xa54>
 800a810:	2b00      	cmp	r3, #0
 800a812:	ddec      	ble.n	800a7ee <_dtoa_r+0x9ee>
 800a814:	2201      	movs	r2, #1
 800a816:	9904      	ldr	r1, [sp, #16]
 800a818:	4620      	mov	r0, r4
 800a81a:	f000 fecb 	bl	800b5b4 <__lshift>
 800a81e:	4639      	mov	r1, r7
 800a820:	9004      	str	r0, [sp, #16]
 800a822:	f000 ff1b 	bl	800b65c <__mcmp>
 800a826:	2800      	cmp	r0, #0
 800a828:	dc03      	bgt.n	800a832 <_dtoa_r+0xa32>
 800a82a:	d1e0      	bne.n	800a7ee <_dtoa_r+0x9ee>
 800a82c:	f018 0f01 	tst.w	r8, #1
 800a830:	d0dd      	beq.n	800a7ee <_dtoa_r+0x9ee>
 800a832:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a836:	d1d8      	bne.n	800a7ea <_dtoa_r+0x9ea>
 800a838:	9b05      	ldr	r3, [sp, #20]
 800a83a:	9a05      	ldr	r2, [sp, #20]
 800a83c:	1c5d      	adds	r5, r3, #1
 800a83e:	2339      	movs	r3, #57	; 0x39
 800a840:	7013      	strb	r3, [r2, #0]
 800a842:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a846:	2b39      	cmp	r3, #57	; 0x39
 800a848:	f105 32ff 	add.w	r2, r5, #4294967295
 800a84c:	d04f      	beq.n	800a8ee <_dtoa_r+0xaee>
 800a84e:	3301      	adds	r3, #1
 800a850:	7013      	strb	r3, [r2, #0]
 800a852:	e754      	b.n	800a6fe <_dtoa_r+0x8fe>
 800a854:	9a05      	ldr	r2, [sp, #20]
 800a856:	2b00      	cmp	r3, #0
 800a858:	f102 0501 	add.w	r5, r2, #1
 800a85c:	dd06      	ble.n	800a86c <_dtoa_r+0xa6c>
 800a85e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a862:	d0e9      	beq.n	800a838 <_dtoa_r+0xa38>
 800a864:	f108 0801 	add.w	r8, r8, #1
 800a868:	9b05      	ldr	r3, [sp, #20]
 800a86a:	e7c2      	b.n	800a7f2 <_dtoa_r+0x9f2>
 800a86c:	9a02      	ldr	r2, [sp, #8]
 800a86e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a872:	eba5 030b 	sub.w	r3, r5, fp
 800a876:	4293      	cmp	r3, r2
 800a878:	d021      	beq.n	800a8be <_dtoa_r+0xabe>
 800a87a:	2300      	movs	r3, #0
 800a87c:	220a      	movs	r2, #10
 800a87e:	9904      	ldr	r1, [sp, #16]
 800a880:	4620      	mov	r0, r4
 800a882:	f000 fce3 	bl	800b24c <__multadd>
 800a886:	45b1      	cmp	r9, r6
 800a888:	9004      	str	r0, [sp, #16]
 800a88a:	f04f 0300 	mov.w	r3, #0
 800a88e:	f04f 020a 	mov.w	r2, #10
 800a892:	4649      	mov	r1, r9
 800a894:	4620      	mov	r0, r4
 800a896:	d105      	bne.n	800a8a4 <_dtoa_r+0xaa4>
 800a898:	f000 fcd8 	bl	800b24c <__multadd>
 800a89c:	4681      	mov	r9, r0
 800a89e:	4606      	mov	r6, r0
 800a8a0:	9505      	str	r5, [sp, #20]
 800a8a2:	e776      	b.n	800a792 <_dtoa_r+0x992>
 800a8a4:	f000 fcd2 	bl	800b24c <__multadd>
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4681      	mov	r9, r0
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	220a      	movs	r2, #10
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 fccb 	bl	800b24c <__multadd>
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	e7f2      	b.n	800a8a0 <_dtoa_r+0xaa0>
 800a8ba:	f04f 0900 	mov.w	r9, #0
 800a8be:	2201      	movs	r2, #1
 800a8c0:	9904      	ldr	r1, [sp, #16]
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 fe76 	bl	800b5b4 <__lshift>
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	9004      	str	r0, [sp, #16]
 800a8cc:	f000 fec6 	bl	800b65c <__mcmp>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	dcb6      	bgt.n	800a842 <_dtoa_r+0xa42>
 800a8d4:	d102      	bne.n	800a8dc <_dtoa_r+0xadc>
 800a8d6:	f018 0f01 	tst.w	r8, #1
 800a8da:	d1b2      	bne.n	800a842 <_dtoa_r+0xa42>
 800a8dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8e0:	2b30      	cmp	r3, #48	; 0x30
 800a8e2:	f105 32ff 	add.w	r2, r5, #4294967295
 800a8e6:	f47f af0a 	bne.w	800a6fe <_dtoa_r+0x8fe>
 800a8ea:	4615      	mov	r5, r2
 800a8ec:	e7f6      	b.n	800a8dc <_dtoa_r+0xadc>
 800a8ee:	4593      	cmp	fp, r2
 800a8f0:	d105      	bne.n	800a8fe <_dtoa_r+0xafe>
 800a8f2:	2331      	movs	r3, #49	; 0x31
 800a8f4:	f10a 0a01 	add.w	sl, sl, #1
 800a8f8:	f88b 3000 	strb.w	r3, [fp]
 800a8fc:	e6ff      	b.n	800a6fe <_dtoa_r+0x8fe>
 800a8fe:	4615      	mov	r5, r2
 800a900:	e79f      	b.n	800a842 <_dtoa_r+0xa42>
 800a902:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a968 <_dtoa_r+0xb68>
 800a906:	e007      	b.n	800a918 <_dtoa_r+0xb18>
 800a908:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a90a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a96c <_dtoa_r+0xb6c>
 800a90e:	b11b      	cbz	r3, 800a918 <_dtoa_r+0xb18>
 800a910:	f10b 0308 	add.w	r3, fp, #8
 800a914:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a916:	6013      	str	r3, [r2, #0]
 800a918:	4658      	mov	r0, fp
 800a91a:	b017      	add	sp, #92	; 0x5c
 800a91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a920:	9b06      	ldr	r3, [sp, #24]
 800a922:	2b01      	cmp	r3, #1
 800a924:	f77f ae35 	ble.w	800a592 <_dtoa_r+0x792>
 800a928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a92a:	9307      	str	r3, [sp, #28]
 800a92c:	e649      	b.n	800a5c2 <_dtoa_r+0x7c2>
 800a92e:	9b02      	ldr	r3, [sp, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	dc03      	bgt.n	800a93c <_dtoa_r+0xb3c>
 800a934:	9b06      	ldr	r3, [sp, #24]
 800a936:	2b02      	cmp	r3, #2
 800a938:	f73f aecc 	bgt.w	800a6d4 <_dtoa_r+0x8d4>
 800a93c:	465d      	mov	r5, fp
 800a93e:	4639      	mov	r1, r7
 800a940:	9804      	ldr	r0, [sp, #16]
 800a942:	f7ff f9cf 	bl	8009ce4 <quorem>
 800a946:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a94a:	f805 8b01 	strb.w	r8, [r5], #1
 800a94e:	9a02      	ldr	r2, [sp, #8]
 800a950:	eba5 030b 	sub.w	r3, r5, fp
 800a954:	429a      	cmp	r2, r3
 800a956:	ddb0      	ble.n	800a8ba <_dtoa_r+0xaba>
 800a958:	2300      	movs	r3, #0
 800a95a:	220a      	movs	r2, #10
 800a95c:	9904      	ldr	r1, [sp, #16]
 800a95e:	4620      	mov	r0, r4
 800a960:	f000 fc74 	bl	800b24c <__multadd>
 800a964:	9004      	str	r0, [sp, #16]
 800a966:	e7ea      	b.n	800a93e <_dtoa_r+0xb3e>
 800a968:	0800c57c 	.word	0x0800c57c
 800a96c:	0800c5f8 	.word	0x0800c5f8

0800a970 <std>:
 800a970:	2300      	movs	r3, #0
 800a972:	b510      	push	{r4, lr}
 800a974:	4604      	mov	r4, r0
 800a976:	e9c0 3300 	strd	r3, r3, [r0]
 800a97a:	6083      	str	r3, [r0, #8]
 800a97c:	8181      	strh	r1, [r0, #12]
 800a97e:	6643      	str	r3, [r0, #100]	; 0x64
 800a980:	81c2      	strh	r2, [r0, #14]
 800a982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a986:	6183      	str	r3, [r0, #24]
 800a988:	4619      	mov	r1, r3
 800a98a:	2208      	movs	r2, #8
 800a98c:	305c      	adds	r0, #92	; 0x5c
 800a98e:	f7fd fbbf 	bl	8008110 <memset>
 800a992:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <std+0x38>)
 800a994:	6263      	str	r3, [r4, #36]	; 0x24
 800a996:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <std+0x3c>)
 800a998:	62a3      	str	r3, [r4, #40]	; 0x28
 800a99a:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <std+0x40>)
 800a99c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a99e:	4b05      	ldr	r3, [pc, #20]	; (800a9b4 <std+0x44>)
 800a9a0:	6224      	str	r4, [r4, #32]
 800a9a2:	6323      	str	r3, [r4, #48]	; 0x30
 800a9a4:	bd10      	pop	{r4, pc}
 800a9a6:	bf00      	nop
 800a9a8:	0800bef5 	.word	0x0800bef5
 800a9ac:	0800bf17 	.word	0x0800bf17
 800a9b0:	0800bf4f 	.word	0x0800bf4f
 800a9b4:	0800bf73 	.word	0x0800bf73

0800a9b8 <_cleanup_r>:
 800a9b8:	4901      	ldr	r1, [pc, #4]	; (800a9c0 <_cleanup_r+0x8>)
 800a9ba:	f000 b885 	b.w	800aac8 <_fwalk_reent>
 800a9be:	bf00      	nop
 800a9c0:	0800c28d 	.word	0x0800c28d

0800a9c4 <__sfmoreglue>:
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	1e4a      	subs	r2, r1, #1
 800a9c8:	2568      	movs	r5, #104	; 0x68
 800a9ca:	4355      	muls	r5, r2
 800a9cc:	460e      	mov	r6, r1
 800a9ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9d2:	f7fd fbf3 	bl	80081bc <_malloc_r>
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	b140      	cbz	r0, 800a9ec <__sfmoreglue+0x28>
 800a9da:	2100      	movs	r1, #0
 800a9dc:	e9c0 1600 	strd	r1, r6, [r0]
 800a9e0:	300c      	adds	r0, #12
 800a9e2:	60a0      	str	r0, [r4, #8]
 800a9e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9e8:	f7fd fb92 	bl	8008110 <memset>
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}

0800a9f0 <__sinit>:
 800a9f0:	6983      	ldr	r3, [r0, #24]
 800a9f2:	b510      	push	{r4, lr}
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	bb33      	cbnz	r3, 800aa46 <__sinit+0x56>
 800a9f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a9fc:	6503      	str	r3, [r0, #80]	; 0x50
 800a9fe:	4b12      	ldr	r3, [pc, #72]	; (800aa48 <__sinit+0x58>)
 800aa00:	4a12      	ldr	r2, [pc, #72]	; (800aa4c <__sinit+0x5c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6282      	str	r2, [r0, #40]	; 0x28
 800aa06:	4298      	cmp	r0, r3
 800aa08:	bf04      	itt	eq
 800aa0a:	2301      	moveq	r3, #1
 800aa0c:	6183      	streq	r3, [r0, #24]
 800aa0e:	f000 f81f 	bl	800aa50 <__sfp>
 800aa12:	6060      	str	r0, [r4, #4]
 800aa14:	4620      	mov	r0, r4
 800aa16:	f000 f81b 	bl	800aa50 <__sfp>
 800aa1a:	60a0      	str	r0, [r4, #8]
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f000 f817 	bl	800aa50 <__sfp>
 800aa22:	2200      	movs	r2, #0
 800aa24:	60e0      	str	r0, [r4, #12]
 800aa26:	2104      	movs	r1, #4
 800aa28:	6860      	ldr	r0, [r4, #4]
 800aa2a:	f7ff ffa1 	bl	800a970 <std>
 800aa2e:	2201      	movs	r2, #1
 800aa30:	2109      	movs	r1, #9
 800aa32:	68a0      	ldr	r0, [r4, #8]
 800aa34:	f7ff ff9c 	bl	800a970 <std>
 800aa38:	2202      	movs	r2, #2
 800aa3a:	2112      	movs	r1, #18
 800aa3c:	68e0      	ldr	r0, [r4, #12]
 800aa3e:	f7ff ff97 	bl	800a970 <std>
 800aa42:	2301      	movs	r3, #1
 800aa44:	61a3      	str	r3, [r4, #24]
 800aa46:	bd10      	pop	{r4, pc}
 800aa48:	0800c568 	.word	0x0800c568
 800aa4c:	0800a9b9 	.word	0x0800a9b9

0800aa50 <__sfp>:
 800aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa52:	4b1b      	ldr	r3, [pc, #108]	; (800aac0 <__sfp+0x70>)
 800aa54:	681e      	ldr	r6, [r3, #0]
 800aa56:	69b3      	ldr	r3, [r6, #24]
 800aa58:	4607      	mov	r7, r0
 800aa5a:	b913      	cbnz	r3, 800aa62 <__sfp+0x12>
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	f7ff ffc7 	bl	800a9f0 <__sinit>
 800aa62:	3648      	adds	r6, #72	; 0x48
 800aa64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	d503      	bpl.n	800aa74 <__sfp+0x24>
 800aa6c:	6833      	ldr	r3, [r6, #0]
 800aa6e:	b133      	cbz	r3, 800aa7e <__sfp+0x2e>
 800aa70:	6836      	ldr	r6, [r6, #0]
 800aa72:	e7f7      	b.n	800aa64 <__sfp+0x14>
 800aa74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa78:	b16d      	cbz	r5, 800aa96 <__sfp+0x46>
 800aa7a:	3468      	adds	r4, #104	; 0x68
 800aa7c:	e7f4      	b.n	800aa68 <__sfp+0x18>
 800aa7e:	2104      	movs	r1, #4
 800aa80:	4638      	mov	r0, r7
 800aa82:	f7ff ff9f 	bl	800a9c4 <__sfmoreglue>
 800aa86:	6030      	str	r0, [r6, #0]
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d1f1      	bne.n	800aa70 <__sfp+0x20>
 800aa8c:	230c      	movs	r3, #12
 800aa8e:	603b      	str	r3, [r7, #0]
 800aa90:	4604      	mov	r4, r0
 800aa92:	4620      	mov	r0, r4
 800aa94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa96:	4b0b      	ldr	r3, [pc, #44]	; (800aac4 <__sfp+0x74>)
 800aa98:	6665      	str	r5, [r4, #100]	; 0x64
 800aa9a:	e9c4 5500 	strd	r5, r5, [r4]
 800aa9e:	60a5      	str	r5, [r4, #8]
 800aaa0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800aaa4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800aaa8:	2208      	movs	r2, #8
 800aaaa:	4629      	mov	r1, r5
 800aaac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aab0:	f7fd fb2e 	bl	8008110 <memset>
 800aab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aabc:	e7e9      	b.n	800aa92 <__sfp+0x42>
 800aabe:	bf00      	nop
 800aac0:	0800c568 	.word	0x0800c568
 800aac4:	ffff0001 	.word	0xffff0001

0800aac8 <_fwalk_reent>:
 800aac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aacc:	4680      	mov	r8, r0
 800aace:	4689      	mov	r9, r1
 800aad0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aad4:	2600      	movs	r6, #0
 800aad6:	b914      	cbnz	r4, 800aade <_fwalk_reent+0x16>
 800aad8:	4630      	mov	r0, r6
 800aada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aade:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800aae2:	3f01      	subs	r7, #1
 800aae4:	d501      	bpl.n	800aaea <_fwalk_reent+0x22>
 800aae6:	6824      	ldr	r4, [r4, #0]
 800aae8:	e7f5      	b.n	800aad6 <_fwalk_reent+0xe>
 800aaea:	89ab      	ldrh	r3, [r5, #12]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d907      	bls.n	800ab00 <_fwalk_reent+0x38>
 800aaf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	d003      	beq.n	800ab00 <_fwalk_reent+0x38>
 800aaf8:	4629      	mov	r1, r5
 800aafa:	4640      	mov	r0, r8
 800aafc:	47c8      	blx	r9
 800aafe:	4306      	orrs	r6, r0
 800ab00:	3568      	adds	r5, #104	; 0x68
 800ab02:	e7ee      	b.n	800aae2 <_fwalk_reent+0x1a>

0800ab04 <rshift>:
 800ab04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab06:	6906      	ldr	r6, [r0, #16]
 800ab08:	114b      	asrs	r3, r1, #5
 800ab0a:	429e      	cmp	r6, r3
 800ab0c:	f100 0414 	add.w	r4, r0, #20
 800ab10:	dd30      	ble.n	800ab74 <rshift+0x70>
 800ab12:	f011 011f 	ands.w	r1, r1, #31
 800ab16:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ab1a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ab1e:	d108      	bne.n	800ab32 <rshift+0x2e>
 800ab20:	4621      	mov	r1, r4
 800ab22:	42b2      	cmp	r2, r6
 800ab24:	460b      	mov	r3, r1
 800ab26:	d211      	bcs.n	800ab4c <rshift+0x48>
 800ab28:	f852 3b04 	ldr.w	r3, [r2], #4
 800ab2c:	f841 3b04 	str.w	r3, [r1], #4
 800ab30:	e7f7      	b.n	800ab22 <rshift+0x1e>
 800ab32:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ab36:	f1c1 0c20 	rsb	ip, r1, #32
 800ab3a:	40cd      	lsrs	r5, r1
 800ab3c:	3204      	adds	r2, #4
 800ab3e:	4623      	mov	r3, r4
 800ab40:	42b2      	cmp	r2, r6
 800ab42:	4617      	mov	r7, r2
 800ab44:	d30c      	bcc.n	800ab60 <rshift+0x5c>
 800ab46:	601d      	str	r5, [r3, #0]
 800ab48:	b105      	cbz	r5, 800ab4c <rshift+0x48>
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	1b1a      	subs	r2, r3, r4
 800ab4e:	42a3      	cmp	r3, r4
 800ab50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab54:	bf08      	it	eq
 800ab56:	2300      	moveq	r3, #0
 800ab58:	6102      	str	r2, [r0, #16]
 800ab5a:	bf08      	it	eq
 800ab5c:	6143      	streq	r3, [r0, #20]
 800ab5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab60:	683f      	ldr	r7, [r7, #0]
 800ab62:	fa07 f70c 	lsl.w	r7, r7, ip
 800ab66:	433d      	orrs	r5, r7
 800ab68:	f843 5b04 	str.w	r5, [r3], #4
 800ab6c:	f852 5b04 	ldr.w	r5, [r2], #4
 800ab70:	40cd      	lsrs	r5, r1
 800ab72:	e7e5      	b.n	800ab40 <rshift+0x3c>
 800ab74:	4623      	mov	r3, r4
 800ab76:	e7e9      	b.n	800ab4c <rshift+0x48>

0800ab78 <__hexdig_fun>:
 800ab78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab7c:	2b09      	cmp	r3, #9
 800ab7e:	d802      	bhi.n	800ab86 <__hexdig_fun+0xe>
 800ab80:	3820      	subs	r0, #32
 800ab82:	b2c0      	uxtb	r0, r0
 800ab84:	4770      	bx	lr
 800ab86:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab8a:	2b05      	cmp	r3, #5
 800ab8c:	d801      	bhi.n	800ab92 <__hexdig_fun+0x1a>
 800ab8e:	3847      	subs	r0, #71	; 0x47
 800ab90:	e7f7      	b.n	800ab82 <__hexdig_fun+0xa>
 800ab92:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ab96:	2b05      	cmp	r3, #5
 800ab98:	d801      	bhi.n	800ab9e <__hexdig_fun+0x26>
 800ab9a:	3827      	subs	r0, #39	; 0x27
 800ab9c:	e7f1      	b.n	800ab82 <__hexdig_fun+0xa>
 800ab9e:	2000      	movs	r0, #0
 800aba0:	4770      	bx	lr

0800aba2 <__gethex>:
 800aba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba6:	b08b      	sub	sp, #44	; 0x2c
 800aba8:	468a      	mov	sl, r1
 800abaa:	9002      	str	r0, [sp, #8]
 800abac:	9816      	ldr	r0, [sp, #88]	; 0x58
 800abae:	9306      	str	r3, [sp, #24]
 800abb0:	4690      	mov	r8, r2
 800abb2:	f000 fad0 	bl	800b156 <__localeconv_l>
 800abb6:	6803      	ldr	r3, [r0, #0]
 800abb8:	9303      	str	r3, [sp, #12]
 800abba:	4618      	mov	r0, r3
 800abbc:	f7f5 fb10 	bl	80001e0 <strlen>
 800abc0:	9b03      	ldr	r3, [sp, #12]
 800abc2:	9001      	str	r0, [sp, #4]
 800abc4:	4403      	add	r3, r0
 800abc6:	f04f 0b00 	mov.w	fp, #0
 800abca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800abce:	9307      	str	r3, [sp, #28]
 800abd0:	f8da 3000 	ldr.w	r3, [sl]
 800abd4:	3302      	adds	r3, #2
 800abd6:	461f      	mov	r7, r3
 800abd8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800abdc:	2830      	cmp	r0, #48	; 0x30
 800abde:	d06c      	beq.n	800acba <__gethex+0x118>
 800abe0:	f7ff ffca 	bl	800ab78 <__hexdig_fun>
 800abe4:	4604      	mov	r4, r0
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d16a      	bne.n	800acc0 <__gethex+0x11e>
 800abea:	9a01      	ldr	r2, [sp, #4]
 800abec:	9903      	ldr	r1, [sp, #12]
 800abee:	4638      	mov	r0, r7
 800abf0:	f001 f9c3 	bl	800bf7a <strncmp>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d166      	bne.n	800acc6 <__gethex+0x124>
 800abf8:	9b01      	ldr	r3, [sp, #4]
 800abfa:	5cf8      	ldrb	r0, [r7, r3]
 800abfc:	18fe      	adds	r6, r7, r3
 800abfe:	f7ff ffbb 	bl	800ab78 <__hexdig_fun>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d062      	beq.n	800accc <__gethex+0x12a>
 800ac06:	4633      	mov	r3, r6
 800ac08:	7818      	ldrb	r0, [r3, #0]
 800ac0a:	2830      	cmp	r0, #48	; 0x30
 800ac0c:	461f      	mov	r7, r3
 800ac0e:	f103 0301 	add.w	r3, r3, #1
 800ac12:	d0f9      	beq.n	800ac08 <__gethex+0x66>
 800ac14:	f7ff ffb0 	bl	800ab78 <__hexdig_fun>
 800ac18:	fab0 f580 	clz	r5, r0
 800ac1c:	096d      	lsrs	r5, r5, #5
 800ac1e:	4634      	mov	r4, r6
 800ac20:	f04f 0b01 	mov.w	fp, #1
 800ac24:	463a      	mov	r2, r7
 800ac26:	4616      	mov	r6, r2
 800ac28:	3201      	adds	r2, #1
 800ac2a:	7830      	ldrb	r0, [r6, #0]
 800ac2c:	f7ff ffa4 	bl	800ab78 <__hexdig_fun>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d1f8      	bne.n	800ac26 <__gethex+0x84>
 800ac34:	9a01      	ldr	r2, [sp, #4]
 800ac36:	9903      	ldr	r1, [sp, #12]
 800ac38:	4630      	mov	r0, r6
 800ac3a:	f001 f99e 	bl	800bf7a <strncmp>
 800ac3e:	b950      	cbnz	r0, 800ac56 <__gethex+0xb4>
 800ac40:	b954      	cbnz	r4, 800ac58 <__gethex+0xb6>
 800ac42:	9b01      	ldr	r3, [sp, #4]
 800ac44:	18f4      	adds	r4, r6, r3
 800ac46:	4622      	mov	r2, r4
 800ac48:	4616      	mov	r6, r2
 800ac4a:	3201      	adds	r2, #1
 800ac4c:	7830      	ldrb	r0, [r6, #0]
 800ac4e:	f7ff ff93 	bl	800ab78 <__hexdig_fun>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d1f8      	bne.n	800ac48 <__gethex+0xa6>
 800ac56:	b10c      	cbz	r4, 800ac5c <__gethex+0xba>
 800ac58:	1ba4      	subs	r4, r4, r6
 800ac5a:	00a4      	lsls	r4, r4, #2
 800ac5c:	7833      	ldrb	r3, [r6, #0]
 800ac5e:	2b50      	cmp	r3, #80	; 0x50
 800ac60:	d001      	beq.n	800ac66 <__gethex+0xc4>
 800ac62:	2b70      	cmp	r3, #112	; 0x70
 800ac64:	d140      	bne.n	800ace8 <__gethex+0x146>
 800ac66:	7873      	ldrb	r3, [r6, #1]
 800ac68:	2b2b      	cmp	r3, #43	; 0x2b
 800ac6a:	d031      	beq.n	800acd0 <__gethex+0x12e>
 800ac6c:	2b2d      	cmp	r3, #45	; 0x2d
 800ac6e:	d033      	beq.n	800acd8 <__gethex+0x136>
 800ac70:	1c71      	adds	r1, r6, #1
 800ac72:	f04f 0900 	mov.w	r9, #0
 800ac76:	7808      	ldrb	r0, [r1, #0]
 800ac78:	f7ff ff7e 	bl	800ab78 <__hexdig_fun>
 800ac7c:	1e43      	subs	r3, r0, #1
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b18      	cmp	r3, #24
 800ac82:	d831      	bhi.n	800ace8 <__gethex+0x146>
 800ac84:	f1a0 0210 	sub.w	r2, r0, #16
 800ac88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac8c:	f7ff ff74 	bl	800ab78 <__hexdig_fun>
 800ac90:	1e43      	subs	r3, r0, #1
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b18      	cmp	r3, #24
 800ac96:	d922      	bls.n	800acde <__gethex+0x13c>
 800ac98:	f1b9 0f00 	cmp.w	r9, #0
 800ac9c:	d000      	beq.n	800aca0 <__gethex+0xfe>
 800ac9e:	4252      	negs	r2, r2
 800aca0:	4414      	add	r4, r2
 800aca2:	f8ca 1000 	str.w	r1, [sl]
 800aca6:	b30d      	cbz	r5, 800acec <__gethex+0x14a>
 800aca8:	f1bb 0f00 	cmp.w	fp, #0
 800acac:	bf0c      	ite	eq
 800acae:	2706      	moveq	r7, #6
 800acb0:	2700      	movne	r7, #0
 800acb2:	4638      	mov	r0, r7
 800acb4:	b00b      	add	sp, #44	; 0x2c
 800acb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acba:	f10b 0b01 	add.w	fp, fp, #1
 800acbe:	e78a      	b.n	800abd6 <__gethex+0x34>
 800acc0:	2500      	movs	r5, #0
 800acc2:	462c      	mov	r4, r5
 800acc4:	e7ae      	b.n	800ac24 <__gethex+0x82>
 800acc6:	463e      	mov	r6, r7
 800acc8:	2501      	movs	r5, #1
 800acca:	e7c7      	b.n	800ac5c <__gethex+0xba>
 800accc:	4604      	mov	r4, r0
 800acce:	e7fb      	b.n	800acc8 <__gethex+0x126>
 800acd0:	f04f 0900 	mov.w	r9, #0
 800acd4:	1cb1      	adds	r1, r6, #2
 800acd6:	e7ce      	b.n	800ac76 <__gethex+0xd4>
 800acd8:	f04f 0901 	mov.w	r9, #1
 800acdc:	e7fa      	b.n	800acd4 <__gethex+0x132>
 800acde:	230a      	movs	r3, #10
 800ace0:	fb03 0202 	mla	r2, r3, r2, r0
 800ace4:	3a10      	subs	r2, #16
 800ace6:	e7cf      	b.n	800ac88 <__gethex+0xe6>
 800ace8:	4631      	mov	r1, r6
 800acea:	e7da      	b.n	800aca2 <__gethex+0x100>
 800acec:	1bf3      	subs	r3, r6, r7
 800acee:	3b01      	subs	r3, #1
 800acf0:	4629      	mov	r1, r5
 800acf2:	2b07      	cmp	r3, #7
 800acf4:	dc49      	bgt.n	800ad8a <__gethex+0x1e8>
 800acf6:	9802      	ldr	r0, [sp, #8]
 800acf8:	f000 fa5d 	bl	800b1b6 <_Balloc>
 800acfc:	9b01      	ldr	r3, [sp, #4]
 800acfe:	f100 0914 	add.w	r9, r0, #20
 800ad02:	f04f 0b00 	mov.w	fp, #0
 800ad06:	f1c3 0301 	rsb	r3, r3, #1
 800ad0a:	4605      	mov	r5, r0
 800ad0c:	f8cd 9010 	str.w	r9, [sp, #16]
 800ad10:	46da      	mov	sl, fp
 800ad12:	9308      	str	r3, [sp, #32]
 800ad14:	42b7      	cmp	r7, r6
 800ad16:	d33b      	bcc.n	800ad90 <__gethex+0x1ee>
 800ad18:	9804      	ldr	r0, [sp, #16]
 800ad1a:	f840 ab04 	str.w	sl, [r0], #4
 800ad1e:	eba0 0009 	sub.w	r0, r0, r9
 800ad22:	1080      	asrs	r0, r0, #2
 800ad24:	6128      	str	r0, [r5, #16]
 800ad26:	0147      	lsls	r7, r0, #5
 800ad28:	4650      	mov	r0, sl
 800ad2a:	f000 fb08 	bl	800b33e <__hi0bits>
 800ad2e:	f8d8 6000 	ldr.w	r6, [r8]
 800ad32:	1a3f      	subs	r7, r7, r0
 800ad34:	42b7      	cmp	r7, r6
 800ad36:	dd64      	ble.n	800ae02 <__gethex+0x260>
 800ad38:	1bbf      	subs	r7, r7, r6
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	f000 fe17 	bl	800b970 <__any_on>
 800ad42:	4682      	mov	sl, r0
 800ad44:	b178      	cbz	r0, 800ad66 <__gethex+0x1c4>
 800ad46:	1e7b      	subs	r3, r7, #1
 800ad48:	1159      	asrs	r1, r3, #5
 800ad4a:	f003 021f 	and.w	r2, r3, #31
 800ad4e:	f04f 0a01 	mov.w	sl, #1
 800ad52:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ad56:	fa0a f202 	lsl.w	r2, sl, r2
 800ad5a:	420a      	tst	r2, r1
 800ad5c:	d003      	beq.n	800ad66 <__gethex+0x1c4>
 800ad5e:	4553      	cmp	r3, sl
 800ad60:	dc46      	bgt.n	800adf0 <__gethex+0x24e>
 800ad62:	f04f 0a02 	mov.w	sl, #2
 800ad66:	4639      	mov	r1, r7
 800ad68:	4628      	mov	r0, r5
 800ad6a:	f7ff fecb 	bl	800ab04 <rshift>
 800ad6e:	443c      	add	r4, r7
 800ad70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	da52      	bge.n	800ae1e <__gethex+0x27c>
 800ad78:	4629      	mov	r1, r5
 800ad7a:	9802      	ldr	r0, [sp, #8]
 800ad7c:	f000 fa4f 	bl	800b21e <_Bfree>
 800ad80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad82:	2300      	movs	r3, #0
 800ad84:	6013      	str	r3, [r2, #0]
 800ad86:	27a3      	movs	r7, #163	; 0xa3
 800ad88:	e793      	b.n	800acb2 <__gethex+0x110>
 800ad8a:	3101      	adds	r1, #1
 800ad8c:	105b      	asrs	r3, r3, #1
 800ad8e:	e7b0      	b.n	800acf2 <__gethex+0x150>
 800ad90:	1e73      	subs	r3, r6, #1
 800ad92:	9305      	str	r3, [sp, #20]
 800ad94:	9a07      	ldr	r2, [sp, #28]
 800ad96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d018      	beq.n	800add0 <__gethex+0x22e>
 800ad9e:	f1bb 0f20 	cmp.w	fp, #32
 800ada2:	d107      	bne.n	800adb4 <__gethex+0x212>
 800ada4:	9b04      	ldr	r3, [sp, #16]
 800ada6:	f8c3 a000 	str.w	sl, [r3]
 800adaa:	3304      	adds	r3, #4
 800adac:	f04f 0a00 	mov.w	sl, #0
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	46d3      	mov	fp, sl
 800adb4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800adb8:	f7ff fede 	bl	800ab78 <__hexdig_fun>
 800adbc:	f000 000f 	and.w	r0, r0, #15
 800adc0:	fa00 f00b 	lsl.w	r0, r0, fp
 800adc4:	ea4a 0a00 	orr.w	sl, sl, r0
 800adc8:	f10b 0b04 	add.w	fp, fp, #4
 800adcc:	9b05      	ldr	r3, [sp, #20]
 800adce:	e00d      	b.n	800adec <__gethex+0x24a>
 800add0:	9b05      	ldr	r3, [sp, #20]
 800add2:	9a08      	ldr	r2, [sp, #32]
 800add4:	4413      	add	r3, r2
 800add6:	42bb      	cmp	r3, r7
 800add8:	d3e1      	bcc.n	800ad9e <__gethex+0x1fc>
 800adda:	4618      	mov	r0, r3
 800addc:	9a01      	ldr	r2, [sp, #4]
 800adde:	9903      	ldr	r1, [sp, #12]
 800ade0:	9309      	str	r3, [sp, #36]	; 0x24
 800ade2:	f001 f8ca 	bl	800bf7a <strncmp>
 800ade6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade8:	2800      	cmp	r0, #0
 800adea:	d1d8      	bne.n	800ad9e <__gethex+0x1fc>
 800adec:	461e      	mov	r6, r3
 800adee:	e791      	b.n	800ad14 <__gethex+0x172>
 800adf0:	1eb9      	subs	r1, r7, #2
 800adf2:	4628      	mov	r0, r5
 800adf4:	f000 fdbc 	bl	800b970 <__any_on>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d0b2      	beq.n	800ad62 <__gethex+0x1c0>
 800adfc:	f04f 0a03 	mov.w	sl, #3
 800ae00:	e7b1      	b.n	800ad66 <__gethex+0x1c4>
 800ae02:	da09      	bge.n	800ae18 <__gethex+0x276>
 800ae04:	1bf7      	subs	r7, r6, r7
 800ae06:	4629      	mov	r1, r5
 800ae08:	463a      	mov	r2, r7
 800ae0a:	9802      	ldr	r0, [sp, #8]
 800ae0c:	f000 fbd2 	bl	800b5b4 <__lshift>
 800ae10:	1be4      	subs	r4, r4, r7
 800ae12:	4605      	mov	r5, r0
 800ae14:	f100 0914 	add.w	r9, r0, #20
 800ae18:	f04f 0a00 	mov.w	sl, #0
 800ae1c:	e7a8      	b.n	800ad70 <__gethex+0x1ce>
 800ae1e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ae22:	42a0      	cmp	r0, r4
 800ae24:	dd6a      	ble.n	800aefc <__gethex+0x35a>
 800ae26:	1b04      	subs	r4, r0, r4
 800ae28:	42a6      	cmp	r6, r4
 800ae2a:	dc2e      	bgt.n	800ae8a <__gethex+0x2e8>
 800ae2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d022      	beq.n	800ae7a <__gethex+0x2d8>
 800ae34:	2b03      	cmp	r3, #3
 800ae36:	d024      	beq.n	800ae82 <__gethex+0x2e0>
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d115      	bne.n	800ae68 <__gethex+0x2c6>
 800ae3c:	42a6      	cmp	r6, r4
 800ae3e:	d113      	bne.n	800ae68 <__gethex+0x2c6>
 800ae40:	2e01      	cmp	r6, #1
 800ae42:	dc0b      	bgt.n	800ae5c <__gethex+0x2ba>
 800ae44:	9a06      	ldr	r2, [sp, #24]
 800ae46:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae4a:	6013      	str	r3, [r2, #0]
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	612b      	str	r3, [r5, #16]
 800ae50:	f8c9 3000 	str.w	r3, [r9]
 800ae54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae56:	2762      	movs	r7, #98	; 0x62
 800ae58:	601d      	str	r5, [r3, #0]
 800ae5a:	e72a      	b.n	800acb2 <__gethex+0x110>
 800ae5c:	1e71      	subs	r1, r6, #1
 800ae5e:	4628      	mov	r0, r5
 800ae60:	f000 fd86 	bl	800b970 <__any_on>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d1ed      	bne.n	800ae44 <__gethex+0x2a2>
 800ae68:	4629      	mov	r1, r5
 800ae6a:	9802      	ldr	r0, [sp, #8]
 800ae6c:	f000 f9d7 	bl	800b21e <_Bfree>
 800ae70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae72:	2300      	movs	r3, #0
 800ae74:	6013      	str	r3, [r2, #0]
 800ae76:	2750      	movs	r7, #80	; 0x50
 800ae78:	e71b      	b.n	800acb2 <__gethex+0x110>
 800ae7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d0e1      	beq.n	800ae44 <__gethex+0x2a2>
 800ae80:	e7f2      	b.n	800ae68 <__gethex+0x2c6>
 800ae82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1dd      	bne.n	800ae44 <__gethex+0x2a2>
 800ae88:	e7ee      	b.n	800ae68 <__gethex+0x2c6>
 800ae8a:	1e67      	subs	r7, r4, #1
 800ae8c:	f1ba 0f00 	cmp.w	sl, #0
 800ae90:	d131      	bne.n	800aef6 <__gethex+0x354>
 800ae92:	b127      	cbz	r7, 800ae9e <__gethex+0x2fc>
 800ae94:	4639      	mov	r1, r7
 800ae96:	4628      	mov	r0, r5
 800ae98:	f000 fd6a 	bl	800b970 <__any_on>
 800ae9c:	4682      	mov	sl, r0
 800ae9e:	117a      	asrs	r2, r7, #5
 800aea0:	2301      	movs	r3, #1
 800aea2:	f007 071f 	and.w	r7, r7, #31
 800aea6:	fa03 f707 	lsl.w	r7, r3, r7
 800aeaa:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800aeae:	4621      	mov	r1, r4
 800aeb0:	421f      	tst	r7, r3
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	bf18      	it	ne
 800aeb6:	f04a 0a02 	orrne.w	sl, sl, #2
 800aeba:	1b36      	subs	r6, r6, r4
 800aebc:	f7ff fe22 	bl	800ab04 <rshift>
 800aec0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800aec4:	2702      	movs	r7, #2
 800aec6:	f1ba 0f00 	cmp.w	sl, #0
 800aeca:	d048      	beq.n	800af5e <__gethex+0x3bc>
 800aecc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d015      	beq.n	800af00 <__gethex+0x35e>
 800aed4:	2b03      	cmp	r3, #3
 800aed6:	d017      	beq.n	800af08 <__gethex+0x366>
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d109      	bne.n	800aef0 <__gethex+0x34e>
 800aedc:	f01a 0f02 	tst.w	sl, #2
 800aee0:	d006      	beq.n	800aef0 <__gethex+0x34e>
 800aee2:	f8d9 3000 	ldr.w	r3, [r9]
 800aee6:	ea4a 0a03 	orr.w	sl, sl, r3
 800aeea:	f01a 0f01 	tst.w	sl, #1
 800aeee:	d10e      	bne.n	800af0e <__gethex+0x36c>
 800aef0:	f047 0710 	orr.w	r7, r7, #16
 800aef4:	e033      	b.n	800af5e <__gethex+0x3bc>
 800aef6:	f04f 0a01 	mov.w	sl, #1
 800aefa:	e7d0      	b.n	800ae9e <__gethex+0x2fc>
 800aefc:	2701      	movs	r7, #1
 800aefe:	e7e2      	b.n	800aec6 <__gethex+0x324>
 800af00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af02:	f1c3 0301 	rsb	r3, r3, #1
 800af06:	9315      	str	r3, [sp, #84]	; 0x54
 800af08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d0f0      	beq.n	800aef0 <__gethex+0x34e>
 800af0e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800af12:	f105 0314 	add.w	r3, r5, #20
 800af16:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800af1a:	eb03 010a 	add.w	r1, r3, sl
 800af1e:	f04f 0c00 	mov.w	ip, #0
 800af22:	4618      	mov	r0, r3
 800af24:	f853 2b04 	ldr.w	r2, [r3], #4
 800af28:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af2c:	d01c      	beq.n	800af68 <__gethex+0x3c6>
 800af2e:	3201      	adds	r2, #1
 800af30:	6002      	str	r2, [r0, #0]
 800af32:	2f02      	cmp	r7, #2
 800af34:	f105 0314 	add.w	r3, r5, #20
 800af38:	d138      	bne.n	800afac <__gethex+0x40a>
 800af3a:	f8d8 2000 	ldr.w	r2, [r8]
 800af3e:	3a01      	subs	r2, #1
 800af40:	42b2      	cmp	r2, r6
 800af42:	d10a      	bne.n	800af5a <__gethex+0x3b8>
 800af44:	1171      	asrs	r1, r6, #5
 800af46:	2201      	movs	r2, #1
 800af48:	f006 061f 	and.w	r6, r6, #31
 800af4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af50:	fa02 f606 	lsl.w	r6, r2, r6
 800af54:	421e      	tst	r6, r3
 800af56:	bf18      	it	ne
 800af58:	4617      	movne	r7, r2
 800af5a:	f047 0720 	orr.w	r7, r7, #32
 800af5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af60:	601d      	str	r5, [r3, #0]
 800af62:	9b06      	ldr	r3, [sp, #24]
 800af64:	601c      	str	r4, [r3, #0]
 800af66:	e6a4      	b.n	800acb2 <__gethex+0x110>
 800af68:	4299      	cmp	r1, r3
 800af6a:	f843 cc04 	str.w	ip, [r3, #-4]
 800af6e:	d8d8      	bhi.n	800af22 <__gethex+0x380>
 800af70:	68ab      	ldr	r3, [r5, #8]
 800af72:	4599      	cmp	r9, r3
 800af74:	db12      	blt.n	800af9c <__gethex+0x3fa>
 800af76:	6869      	ldr	r1, [r5, #4]
 800af78:	9802      	ldr	r0, [sp, #8]
 800af7a:	3101      	adds	r1, #1
 800af7c:	f000 f91b 	bl	800b1b6 <_Balloc>
 800af80:	692a      	ldr	r2, [r5, #16]
 800af82:	3202      	adds	r2, #2
 800af84:	f105 010c 	add.w	r1, r5, #12
 800af88:	4683      	mov	fp, r0
 800af8a:	0092      	lsls	r2, r2, #2
 800af8c:	300c      	adds	r0, #12
 800af8e:	f000 f905 	bl	800b19c <memcpy>
 800af92:	4629      	mov	r1, r5
 800af94:	9802      	ldr	r0, [sp, #8]
 800af96:	f000 f942 	bl	800b21e <_Bfree>
 800af9a:	465d      	mov	r5, fp
 800af9c:	692b      	ldr	r3, [r5, #16]
 800af9e:	1c5a      	adds	r2, r3, #1
 800afa0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800afa4:	612a      	str	r2, [r5, #16]
 800afa6:	2201      	movs	r2, #1
 800afa8:	615a      	str	r2, [r3, #20]
 800afaa:	e7c2      	b.n	800af32 <__gethex+0x390>
 800afac:	692a      	ldr	r2, [r5, #16]
 800afae:	454a      	cmp	r2, r9
 800afb0:	dd0b      	ble.n	800afca <__gethex+0x428>
 800afb2:	2101      	movs	r1, #1
 800afb4:	4628      	mov	r0, r5
 800afb6:	f7ff fda5 	bl	800ab04 <rshift>
 800afba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afbe:	3401      	adds	r4, #1
 800afc0:	42a3      	cmp	r3, r4
 800afc2:	f6ff aed9 	blt.w	800ad78 <__gethex+0x1d6>
 800afc6:	2701      	movs	r7, #1
 800afc8:	e7c7      	b.n	800af5a <__gethex+0x3b8>
 800afca:	f016 061f 	ands.w	r6, r6, #31
 800afce:	d0fa      	beq.n	800afc6 <__gethex+0x424>
 800afd0:	449a      	add	sl, r3
 800afd2:	f1c6 0620 	rsb	r6, r6, #32
 800afd6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800afda:	f000 f9b0 	bl	800b33e <__hi0bits>
 800afde:	42b0      	cmp	r0, r6
 800afe0:	dbe7      	blt.n	800afb2 <__gethex+0x410>
 800afe2:	e7f0      	b.n	800afc6 <__gethex+0x424>

0800afe4 <L_shift>:
 800afe4:	f1c2 0208 	rsb	r2, r2, #8
 800afe8:	0092      	lsls	r2, r2, #2
 800afea:	b570      	push	{r4, r5, r6, lr}
 800afec:	f1c2 0620 	rsb	r6, r2, #32
 800aff0:	6843      	ldr	r3, [r0, #4]
 800aff2:	6804      	ldr	r4, [r0, #0]
 800aff4:	fa03 f506 	lsl.w	r5, r3, r6
 800aff8:	432c      	orrs	r4, r5
 800affa:	40d3      	lsrs	r3, r2
 800affc:	6004      	str	r4, [r0, #0]
 800affe:	f840 3f04 	str.w	r3, [r0, #4]!
 800b002:	4288      	cmp	r0, r1
 800b004:	d3f4      	bcc.n	800aff0 <L_shift+0xc>
 800b006:	bd70      	pop	{r4, r5, r6, pc}

0800b008 <__match>:
 800b008:	b530      	push	{r4, r5, lr}
 800b00a:	6803      	ldr	r3, [r0, #0]
 800b00c:	3301      	adds	r3, #1
 800b00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b012:	b914      	cbnz	r4, 800b01a <__match+0x12>
 800b014:	6003      	str	r3, [r0, #0]
 800b016:	2001      	movs	r0, #1
 800b018:	bd30      	pop	{r4, r5, pc}
 800b01a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b01e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b022:	2d19      	cmp	r5, #25
 800b024:	bf98      	it	ls
 800b026:	3220      	addls	r2, #32
 800b028:	42a2      	cmp	r2, r4
 800b02a:	d0f0      	beq.n	800b00e <__match+0x6>
 800b02c:	2000      	movs	r0, #0
 800b02e:	e7f3      	b.n	800b018 <__match+0x10>

0800b030 <__hexnan>:
 800b030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b034:	680b      	ldr	r3, [r1, #0]
 800b036:	6801      	ldr	r1, [r0, #0]
 800b038:	115f      	asrs	r7, r3, #5
 800b03a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b03e:	f013 031f 	ands.w	r3, r3, #31
 800b042:	b087      	sub	sp, #28
 800b044:	bf18      	it	ne
 800b046:	3704      	addne	r7, #4
 800b048:	2500      	movs	r5, #0
 800b04a:	1f3e      	subs	r6, r7, #4
 800b04c:	4682      	mov	sl, r0
 800b04e:	4690      	mov	r8, r2
 800b050:	9301      	str	r3, [sp, #4]
 800b052:	f847 5c04 	str.w	r5, [r7, #-4]
 800b056:	46b1      	mov	r9, r6
 800b058:	4634      	mov	r4, r6
 800b05a:	9502      	str	r5, [sp, #8]
 800b05c:	46ab      	mov	fp, r5
 800b05e:	784a      	ldrb	r2, [r1, #1]
 800b060:	1c4b      	adds	r3, r1, #1
 800b062:	9303      	str	r3, [sp, #12]
 800b064:	b342      	cbz	r2, 800b0b8 <__hexnan+0x88>
 800b066:	4610      	mov	r0, r2
 800b068:	9105      	str	r1, [sp, #20]
 800b06a:	9204      	str	r2, [sp, #16]
 800b06c:	f7ff fd84 	bl	800ab78 <__hexdig_fun>
 800b070:	2800      	cmp	r0, #0
 800b072:	d143      	bne.n	800b0fc <__hexnan+0xcc>
 800b074:	9a04      	ldr	r2, [sp, #16]
 800b076:	9905      	ldr	r1, [sp, #20]
 800b078:	2a20      	cmp	r2, #32
 800b07a:	d818      	bhi.n	800b0ae <__hexnan+0x7e>
 800b07c:	9b02      	ldr	r3, [sp, #8]
 800b07e:	459b      	cmp	fp, r3
 800b080:	dd13      	ble.n	800b0aa <__hexnan+0x7a>
 800b082:	454c      	cmp	r4, r9
 800b084:	d206      	bcs.n	800b094 <__hexnan+0x64>
 800b086:	2d07      	cmp	r5, #7
 800b088:	dc04      	bgt.n	800b094 <__hexnan+0x64>
 800b08a:	462a      	mov	r2, r5
 800b08c:	4649      	mov	r1, r9
 800b08e:	4620      	mov	r0, r4
 800b090:	f7ff ffa8 	bl	800afe4 <L_shift>
 800b094:	4544      	cmp	r4, r8
 800b096:	d944      	bls.n	800b122 <__hexnan+0xf2>
 800b098:	2300      	movs	r3, #0
 800b09a:	f1a4 0904 	sub.w	r9, r4, #4
 800b09e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0a2:	f8cd b008 	str.w	fp, [sp, #8]
 800b0a6:	464c      	mov	r4, r9
 800b0a8:	461d      	mov	r5, r3
 800b0aa:	9903      	ldr	r1, [sp, #12]
 800b0ac:	e7d7      	b.n	800b05e <__hexnan+0x2e>
 800b0ae:	2a29      	cmp	r2, #41	; 0x29
 800b0b0:	d14a      	bne.n	800b148 <__hexnan+0x118>
 800b0b2:	3102      	adds	r1, #2
 800b0b4:	f8ca 1000 	str.w	r1, [sl]
 800b0b8:	f1bb 0f00 	cmp.w	fp, #0
 800b0bc:	d044      	beq.n	800b148 <__hexnan+0x118>
 800b0be:	454c      	cmp	r4, r9
 800b0c0:	d206      	bcs.n	800b0d0 <__hexnan+0xa0>
 800b0c2:	2d07      	cmp	r5, #7
 800b0c4:	dc04      	bgt.n	800b0d0 <__hexnan+0xa0>
 800b0c6:	462a      	mov	r2, r5
 800b0c8:	4649      	mov	r1, r9
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f7ff ff8a 	bl	800afe4 <L_shift>
 800b0d0:	4544      	cmp	r4, r8
 800b0d2:	d928      	bls.n	800b126 <__hexnan+0xf6>
 800b0d4:	4643      	mov	r3, r8
 800b0d6:	f854 2b04 	ldr.w	r2, [r4], #4
 800b0da:	f843 2b04 	str.w	r2, [r3], #4
 800b0de:	42a6      	cmp	r6, r4
 800b0e0:	d2f9      	bcs.n	800b0d6 <__hexnan+0xa6>
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f843 2b04 	str.w	r2, [r3], #4
 800b0e8:	429e      	cmp	r6, r3
 800b0ea:	d2fb      	bcs.n	800b0e4 <__hexnan+0xb4>
 800b0ec:	6833      	ldr	r3, [r6, #0]
 800b0ee:	b91b      	cbnz	r3, 800b0f8 <__hexnan+0xc8>
 800b0f0:	4546      	cmp	r6, r8
 800b0f2:	d127      	bne.n	800b144 <__hexnan+0x114>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	6033      	str	r3, [r6, #0]
 800b0f8:	2005      	movs	r0, #5
 800b0fa:	e026      	b.n	800b14a <__hexnan+0x11a>
 800b0fc:	3501      	adds	r5, #1
 800b0fe:	2d08      	cmp	r5, #8
 800b100:	f10b 0b01 	add.w	fp, fp, #1
 800b104:	dd06      	ble.n	800b114 <__hexnan+0xe4>
 800b106:	4544      	cmp	r4, r8
 800b108:	d9cf      	bls.n	800b0aa <__hexnan+0x7a>
 800b10a:	2300      	movs	r3, #0
 800b10c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b110:	2501      	movs	r5, #1
 800b112:	3c04      	subs	r4, #4
 800b114:	6822      	ldr	r2, [r4, #0]
 800b116:	f000 000f 	and.w	r0, r0, #15
 800b11a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b11e:	6020      	str	r0, [r4, #0]
 800b120:	e7c3      	b.n	800b0aa <__hexnan+0x7a>
 800b122:	2508      	movs	r5, #8
 800b124:	e7c1      	b.n	800b0aa <__hexnan+0x7a>
 800b126:	9b01      	ldr	r3, [sp, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d0df      	beq.n	800b0ec <__hexnan+0xbc>
 800b12c:	f04f 32ff 	mov.w	r2, #4294967295
 800b130:	f1c3 0320 	rsb	r3, r3, #32
 800b134:	fa22 f303 	lsr.w	r3, r2, r3
 800b138:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b13c:	401a      	ands	r2, r3
 800b13e:	f847 2c04 	str.w	r2, [r7, #-4]
 800b142:	e7d3      	b.n	800b0ec <__hexnan+0xbc>
 800b144:	3e04      	subs	r6, #4
 800b146:	e7d1      	b.n	800b0ec <__hexnan+0xbc>
 800b148:	2004      	movs	r0, #4
 800b14a:	b007      	add	sp, #28
 800b14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b150 <__locale_ctype_ptr_l>:
 800b150:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b154:	4770      	bx	lr

0800b156 <__localeconv_l>:
 800b156:	30f0      	adds	r0, #240	; 0xf0
 800b158:	4770      	bx	lr
	...

0800b15c <_localeconv_r>:
 800b15c:	4b04      	ldr	r3, [pc, #16]	; (800b170 <_localeconv_r+0x14>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	6a18      	ldr	r0, [r3, #32]
 800b162:	4b04      	ldr	r3, [pc, #16]	; (800b174 <_localeconv_r+0x18>)
 800b164:	2800      	cmp	r0, #0
 800b166:	bf08      	it	eq
 800b168:	4618      	moveq	r0, r3
 800b16a:	30f0      	adds	r0, #240	; 0xf0
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	20000180 	.word	0x20000180
 800b174:	200001e4 	.word	0x200001e4

0800b178 <__ascii_mbtowc>:
 800b178:	b082      	sub	sp, #8
 800b17a:	b901      	cbnz	r1, 800b17e <__ascii_mbtowc+0x6>
 800b17c:	a901      	add	r1, sp, #4
 800b17e:	b142      	cbz	r2, 800b192 <__ascii_mbtowc+0x1a>
 800b180:	b14b      	cbz	r3, 800b196 <__ascii_mbtowc+0x1e>
 800b182:	7813      	ldrb	r3, [r2, #0]
 800b184:	600b      	str	r3, [r1, #0]
 800b186:	7812      	ldrb	r2, [r2, #0]
 800b188:	1c10      	adds	r0, r2, #0
 800b18a:	bf18      	it	ne
 800b18c:	2001      	movne	r0, #1
 800b18e:	b002      	add	sp, #8
 800b190:	4770      	bx	lr
 800b192:	4610      	mov	r0, r2
 800b194:	e7fb      	b.n	800b18e <__ascii_mbtowc+0x16>
 800b196:	f06f 0001 	mvn.w	r0, #1
 800b19a:	e7f8      	b.n	800b18e <__ascii_mbtowc+0x16>

0800b19c <memcpy>:
 800b19c:	b510      	push	{r4, lr}
 800b19e:	1e43      	subs	r3, r0, #1
 800b1a0:	440a      	add	r2, r1
 800b1a2:	4291      	cmp	r1, r2
 800b1a4:	d100      	bne.n	800b1a8 <memcpy+0xc>
 800b1a6:	bd10      	pop	{r4, pc}
 800b1a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1b0:	e7f7      	b.n	800b1a2 <memcpy+0x6>

0800b1b2 <__malloc_lock>:
 800b1b2:	4770      	bx	lr

0800b1b4 <__malloc_unlock>:
 800b1b4:	4770      	bx	lr

0800b1b6 <_Balloc>:
 800b1b6:	b570      	push	{r4, r5, r6, lr}
 800b1b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	460e      	mov	r6, r1
 800b1be:	b93d      	cbnz	r5, 800b1d0 <_Balloc+0x1a>
 800b1c0:	2010      	movs	r0, #16
 800b1c2:	f7fc ff95 	bl	80080f0 <malloc>
 800b1c6:	6260      	str	r0, [r4, #36]	; 0x24
 800b1c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b1cc:	6005      	str	r5, [r0, #0]
 800b1ce:	60c5      	str	r5, [r0, #12]
 800b1d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b1d2:	68eb      	ldr	r3, [r5, #12]
 800b1d4:	b183      	cbz	r3, 800b1f8 <_Balloc+0x42>
 800b1d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b1de:	b9b8      	cbnz	r0, 800b210 <_Balloc+0x5a>
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	fa01 f506 	lsl.w	r5, r1, r6
 800b1e6:	1d6a      	adds	r2, r5, #5
 800b1e8:	0092      	lsls	r2, r2, #2
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f000 fbe1 	bl	800b9b2 <_calloc_r>
 800b1f0:	b160      	cbz	r0, 800b20c <_Balloc+0x56>
 800b1f2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b1f6:	e00e      	b.n	800b216 <_Balloc+0x60>
 800b1f8:	2221      	movs	r2, #33	; 0x21
 800b1fa:	2104      	movs	r1, #4
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f000 fbd8 	bl	800b9b2 <_calloc_r>
 800b202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b204:	60e8      	str	r0, [r5, #12]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1e4      	bne.n	800b1d6 <_Balloc+0x20>
 800b20c:	2000      	movs	r0, #0
 800b20e:	bd70      	pop	{r4, r5, r6, pc}
 800b210:	6802      	ldr	r2, [r0, #0]
 800b212:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b216:	2300      	movs	r3, #0
 800b218:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b21c:	e7f7      	b.n	800b20e <_Balloc+0x58>

0800b21e <_Bfree>:
 800b21e:	b570      	push	{r4, r5, r6, lr}
 800b220:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b222:	4606      	mov	r6, r0
 800b224:	460d      	mov	r5, r1
 800b226:	b93c      	cbnz	r4, 800b238 <_Bfree+0x1a>
 800b228:	2010      	movs	r0, #16
 800b22a:	f7fc ff61 	bl	80080f0 <malloc>
 800b22e:	6270      	str	r0, [r6, #36]	; 0x24
 800b230:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b234:	6004      	str	r4, [r0, #0]
 800b236:	60c4      	str	r4, [r0, #12]
 800b238:	b13d      	cbz	r5, 800b24a <_Bfree+0x2c>
 800b23a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b23c:	686a      	ldr	r2, [r5, #4]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b244:	6029      	str	r1, [r5, #0]
 800b246:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b24a:	bd70      	pop	{r4, r5, r6, pc}

0800b24c <__multadd>:
 800b24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b250:	690d      	ldr	r5, [r1, #16]
 800b252:	461f      	mov	r7, r3
 800b254:	4606      	mov	r6, r0
 800b256:	460c      	mov	r4, r1
 800b258:	f101 0c14 	add.w	ip, r1, #20
 800b25c:	2300      	movs	r3, #0
 800b25e:	f8dc 0000 	ldr.w	r0, [ip]
 800b262:	b281      	uxth	r1, r0
 800b264:	fb02 7101 	mla	r1, r2, r1, r7
 800b268:	0c0f      	lsrs	r7, r1, #16
 800b26a:	0c00      	lsrs	r0, r0, #16
 800b26c:	fb02 7000 	mla	r0, r2, r0, r7
 800b270:	b289      	uxth	r1, r1
 800b272:	3301      	adds	r3, #1
 800b274:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b278:	429d      	cmp	r5, r3
 800b27a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b27e:	f84c 1b04 	str.w	r1, [ip], #4
 800b282:	dcec      	bgt.n	800b25e <__multadd+0x12>
 800b284:	b1d7      	cbz	r7, 800b2bc <__multadd+0x70>
 800b286:	68a3      	ldr	r3, [r4, #8]
 800b288:	42ab      	cmp	r3, r5
 800b28a:	dc12      	bgt.n	800b2b2 <__multadd+0x66>
 800b28c:	6861      	ldr	r1, [r4, #4]
 800b28e:	4630      	mov	r0, r6
 800b290:	3101      	adds	r1, #1
 800b292:	f7ff ff90 	bl	800b1b6 <_Balloc>
 800b296:	6922      	ldr	r2, [r4, #16]
 800b298:	3202      	adds	r2, #2
 800b29a:	f104 010c 	add.w	r1, r4, #12
 800b29e:	4680      	mov	r8, r0
 800b2a0:	0092      	lsls	r2, r2, #2
 800b2a2:	300c      	adds	r0, #12
 800b2a4:	f7ff ff7a 	bl	800b19c <memcpy>
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f7ff ffb7 	bl	800b21e <_Bfree>
 800b2b0:	4644      	mov	r4, r8
 800b2b2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2b6:	3501      	adds	r5, #1
 800b2b8:	615f      	str	r7, [r3, #20]
 800b2ba:	6125      	str	r5, [r4, #16]
 800b2bc:	4620      	mov	r0, r4
 800b2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2c2 <__s2b>:
 800b2c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c6:	460c      	mov	r4, r1
 800b2c8:	4615      	mov	r5, r2
 800b2ca:	461f      	mov	r7, r3
 800b2cc:	2209      	movs	r2, #9
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	4606      	mov	r6, r0
 800b2d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	2201      	movs	r2, #1
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	db20      	blt.n	800b320 <__s2b+0x5e>
 800b2de:	4630      	mov	r0, r6
 800b2e0:	f7ff ff69 	bl	800b1b6 <_Balloc>
 800b2e4:	9b08      	ldr	r3, [sp, #32]
 800b2e6:	6143      	str	r3, [r0, #20]
 800b2e8:	2d09      	cmp	r5, #9
 800b2ea:	f04f 0301 	mov.w	r3, #1
 800b2ee:	6103      	str	r3, [r0, #16]
 800b2f0:	dd19      	ble.n	800b326 <__s2b+0x64>
 800b2f2:	f104 0809 	add.w	r8, r4, #9
 800b2f6:	46c1      	mov	r9, r8
 800b2f8:	442c      	add	r4, r5
 800b2fa:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b2fe:	4601      	mov	r1, r0
 800b300:	3b30      	subs	r3, #48	; 0x30
 800b302:	220a      	movs	r2, #10
 800b304:	4630      	mov	r0, r6
 800b306:	f7ff ffa1 	bl	800b24c <__multadd>
 800b30a:	45a1      	cmp	r9, r4
 800b30c:	d1f5      	bne.n	800b2fa <__s2b+0x38>
 800b30e:	eb08 0405 	add.w	r4, r8, r5
 800b312:	3c08      	subs	r4, #8
 800b314:	1b2d      	subs	r5, r5, r4
 800b316:	1963      	adds	r3, r4, r5
 800b318:	42bb      	cmp	r3, r7
 800b31a:	db07      	blt.n	800b32c <__s2b+0x6a>
 800b31c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b320:	0052      	lsls	r2, r2, #1
 800b322:	3101      	adds	r1, #1
 800b324:	e7d9      	b.n	800b2da <__s2b+0x18>
 800b326:	340a      	adds	r4, #10
 800b328:	2509      	movs	r5, #9
 800b32a:	e7f3      	b.n	800b314 <__s2b+0x52>
 800b32c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b330:	4601      	mov	r1, r0
 800b332:	3b30      	subs	r3, #48	; 0x30
 800b334:	220a      	movs	r2, #10
 800b336:	4630      	mov	r0, r6
 800b338:	f7ff ff88 	bl	800b24c <__multadd>
 800b33c:	e7eb      	b.n	800b316 <__s2b+0x54>

0800b33e <__hi0bits>:
 800b33e:	0c02      	lsrs	r2, r0, #16
 800b340:	0412      	lsls	r2, r2, #16
 800b342:	4603      	mov	r3, r0
 800b344:	b9b2      	cbnz	r2, 800b374 <__hi0bits+0x36>
 800b346:	0403      	lsls	r3, r0, #16
 800b348:	2010      	movs	r0, #16
 800b34a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b34e:	bf04      	itt	eq
 800b350:	021b      	lsleq	r3, r3, #8
 800b352:	3008      	addeq	r0, #8
 800b354:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b358:	bf04      	itt	eq
 800b35a:	011b      	lsleq	r3, r3, #4
 800b35c:	3004      	addeq	r0, #4
 800b35e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b362:	bf04      	itt	eq
 800b364:	009b      	lsleq	r3, r3, #2
 800b366:	3002      	addeq	r0, #2
 800b368:	2b00      	cmp	r3, #0
 800b36a:	db06      	blt.n	800b37a <__hi0bits+0x3c>
 800b36c:	005b      	lsls	r3, r3, #1
 800b36e:	d503      	bpl.n	800b378 <__hi0bits+0x3a>
 800b370:	3001      	adds	r0, #1
 800b372:	4770      	bx	lr
 800b374:	2000      	movs	r0, #0
 800b376:	e7e8      	b.n	800b34a <__hi0bits+0xc>
 800b378:	2020      	movs	r0, #32
 800b37a:	4770      	bx	lr

0800b37c <__lo0bits>:
 800b37c:	6803      	ldr	r3, [r0, #0]
 800b37e:	f013 0207 	ands.w	r2, r3, #7
 800b382:	4601      	mov	r1, r0
 800b384:	d00b      	beq.n	800b39e <__lo0bits+0x22>
 800b386:	07da      	lsls	r2, r3, #31
 800b388:	d423      	bmi.n	800b3d2 <__lo0bits+0x56>
 800b38a:	0798      	lsls	r0, r3, #30
 800b38c:	bf49      	itett	mi
 800b38e:	085b      	lsrmi	r3, r3, #1
 800b390:	089b      	lsrpl	r3, r3, #2
 800b392:	2001      	movmi	r0, #1
 800b394:	600b      	strmi	r3, [r1, #0]
 800b396:	bf5c      	itt	pl
 800b398:	600b      	strpl	r3, [r1, #0]
 800b39a:	2002      	movpl	r0, #2
 800b39c:	4770      	bx	lr
 800b39e:	b298      	uxth	r0, r3
 800b3a0:	b9a8      	cbnz	r0, 800b3ce <__lo0bits+0x52>
 800b3a2:	0c1b      	lsrs	r3, r3, #16
 800b3a4:	2010      	movs	r0, #16
 800b3a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b3aa:	bf04      	itt	eq
 800b3ac:	0a1b      	lsreq	r3, r3, #8
 800b3ae:	3008      	addeq	r0, #8
 800b3b0:	071a      	lsls	r2, r3, #28
 800b3b2:	bf04      	itt	eq
 800b3b4:	091b      	lsreq	r3, r3, #4
 800b3b6:	3004      	addeq	r0, #4
 800b3b8:	079a      	lsls	r2, r3, #30
 800b3ba:	bf04      	itt	eq
 800b3bc:	089b      	lsreq	r3, r3, #2
 800b3be:	3002      	addeq	r0, #2
 800b3c0:	07da      	lsls	r2, r3, #31
 800b3c2:	d402      	bmi.n	800b3ca <__lo0bits+0x4e>
 800b3c4:	085b      	lsrs	r3, r3, #1
 800b3c6:	d006      	beq.n	800b3d6 <__lo0bits+0x5a>
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	600b      	str	r3, [r1, #0]
 800b3cc:	4770      	bx	lr
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	e7e9      	b.n	800b3a6 <__lo0bits+0x2a>
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	4770      	bx	lr
 800b3d6:	2020      	movs	r0, #32
 800b3d8:	4770      	bx	lr

0800b3da <__i2b>:
 800b3da:	b510      	push	{r4, lr}
 800b3dc:	460c      	mov	r4, r1
 800b3de:	2101      	movs	r1, #1
 800b3e0:	f7ff fee9 	bl	800b1b6 <_Balloc>
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	6144      	str	r4, [r0, #20]
 800b3e8:	6102      	str	r2, [r0, #16]
 800b3ea:	bd10      	pop	{r4, pc}

0800b3ec <__multiply>:
 800b3ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	4614      	mov	r4, r2
 800b3f2:	690a      	ldr	r2, [r1, #16]
 800b3f4:	6923      	ldr	r3, [r4, #16]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	bfb8      	it	lt
 800b3fa:	460b      	movlt	r3, r1
 800b3fc:	4688      	mov	r8, r1
 800b3fe:	bfbc      	itt	lt
 800b400:	46a0      	movlt	r8, r4
 800b402:	461c      	movlt	r4, r3
 800b404:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b408:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b40c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b410:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b414:	eb07 0609 	add.w	r6, r7, r9
 800b418:	42b3      	cmp	r3, r6
 800b41a:	bfb8      	it	lt
 800b41c:	3101      	addlt	r1, #1
 800b41e:	f7ff feca 	bl	800b1b6 <_Balloc>
 800b422:	f100 0514 	add.w	r5, r0, #20
 800b426:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b42a:	462b      	mov	r3, r5
 800b42c:	2200      	movs	r2, #0
 800b42e:	4573      	cmp	r3, lr
 800b430:	d316      	bcc.n	800b460 <__multiply+0x74>
 800b432:	f104 0214 	add.w	r2, r4, #20
 800b436:	f108 0114 	add.w	r1, r8, #20
 800b43a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b43e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	9b00      	ldr	r3, [sp, #0]
 800b446:	9201      	str	r2, [sp, #4]
 800b448:	4293      	cmp	r3, r2
 800b44a:	d80c      	bhi.n	800b466 <__multiply+0x7a>
 800b44c:	2e00      	cmp	r6, #0
 800b44e:	dd03      	ble.n	800b458 <__multiply+0x6c>
 800b450:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b454:	2b00      	cmp	r3, #0
 800b456:	d05d      	beq.n	800b514 <__multiply+0x128>
 800b458:	6106      	str	r6, [r0, #16]
 800b45a:	b003      	add	sp, #12
 800b45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b460:	f843 2b04 	str.w	r2, [r3], #4
 800b464:	e7e3      	b.n	800b42e <__multiply+0x42>
 800b466:	f8b2 b000 	ldrh.w	fp, [r2]
 800b46a:	f1bb 0f00 	cmp.w	fp, #0
 800b46e:	d023      	beq.n	800b4b8 <__multiply+0xcc>
 800b470:	4689      	mov	r9, r1
 800b472:	46ac      	mov	ip, r5
 800b474:	f04f 0800 	mov.w	r8, #0
 800b478:	f859 4b04 	ldr.w	r4, [r9], #4
 800b47c:	f8dc a000 	ldr.w	sl, [ip]
 800b480:	b2a3      	uxth	r3, r4
 800b482:	fa1f fa8a 	uxth.w	sl, sl
 800b486:	fb0b a303 	mla	r3, fp, r3, sl
 800b48a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b48e:	f8dc 4000 	ldr.w	r4, [ip]
 800b492:	4443      	add	r3, r8
 800b494:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b498:	fb0b 840a 	mla	r4, fp, sl, r8
 800b49c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b4a0:	46e2      	mov	sl, ip
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b4a8:	454f      	cmp	r7, r9
 800b4aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b4ae:	f84a 3b04 	str.w	r3, [sl], #4
 800b4b2:	d82b      	bhi.n	800b50c <__multiply+0x120>
 800b4b4:	f8cc 8004 	str.w	r8, [ip, #4]
 800b4b8:	9b01      	ldr	r3, [sp, #4]
 800b4ba:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b4be:	3204      	adds	r2, #4
 800b4c0:	f1ba 0f00 	cmp.w	sl, #0
 800b4c4:	d020      	beq.n	800b508 <__multiply+0x11c>
 800b4c6:	682b      	ldr	r3, [r5, #0]
 800b4c8:	4689      	mov	r9, r1
 800b4ca:	46a8      	mov	r8, r5
 800b4cc:	f04f 0b00 	mov.w	fp, #0
 800b4d0:	f8b9 c000 	ldrh.w	ip, [r9]
 800b4d4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b4d8:	fb0a 440c 	mla	r4, sl, ip, r4
 800b4dc:	445c      	add	r4, fp
 800b4de:	46c4      	mov	ip, r8
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b4e6:	f84c 3b04 	str.w	r3, [ip], #4
 800b4ea:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4ee:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b4f2:	0c1b      	lsrs	r3, r3, #16
 800b4f4:	fb0a b303 	mla	r3, sl, r3, fp
 800b4f8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b4fc:	454f      	cmp	r7, r9
 800b4fe:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b502:	d805      	bhi.n	800b510 <__multiply+0x124>
 800b504:	f8c8 3004 	str.w	r3, [r8, #4]
 800b508:	3504      	adds	r5, #4
 800b50a:	e79b      	b.n	800b444 <__multiply+0x58>
 800b50c:	46d4      	mov	ip, sl
 800b50e:	e7b3      	b.n	800b478 <__multiply+0x8c>
 800b510:	46e0      	mov	r8, ip
 800b512:	e7dd      	b.n	800b4d0 <__multiply+0xe4>
 800b514:	3e01      	subs	r6, #1
 800b516:	e799      	b.n	800b44c <__multiply+0x60>

0800b518 <__pow5mult>:
 800b518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b51c:	4615      	mov	r5, r2
 800b51e:	f012 0203 	ands.w	r2, r2, #3
 800b522:	4606      	mov	r6, r0
 800b524:	460f      	mov	r7, r1
 800b526:	d007      	beq.n	800b538 <__pow5mult+0x20>
 800b528:	3a01      	subs	r2, #1
 800b52a:	4c21      	ldr	r4, [pc, #132]	; (800b5b0 <__pow5mult+0x98>)
 800b52c:	2300      	movs	r3, #0
 800b52e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b532:	f7ff fe8b 	bl	800b24c <__multadd>
 800b536:	4607      	mov	r7, r0
 800b538:	10ad      	asrs	r5, r5, #2
 800b53a:	d035      	beq.n	800b5a8 <__pow5mult+0x90>
 800b53c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b53e:	b93c      	cbnz	r4, 800b550 <__pow5mult+0x38>
 800b540:	2010      	movs	r0, #16
 800b542:	f7fc fdd5 	bl	80080f0 <malloc>
 800b546:	6270      	str	r0, [r6, #36]	; 0x24
 800b548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b54c:	6004      	str	r4, [r0, #0]
 800b54e:	60c4      	str	r4, [r0, #12]
 800b550:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b558:	b94c      	cbnz	r4, 800b56e <__pow5mult+0x56>
 800b55a:	f240 2171 	movw	r1, #625	; 0x271
 800b55e:	4630      	mov	r0, r6
 800b560:	f7ff ff3b 	bl	800b3da <__i2b>
 800b564:	2300      	movs	r3, #0
 800b566:	f8c8 0008 	str.w	r0, [r8, #8]
 800b56a:	4604      	mov	r4, r0
 800b56c:	6003      	str	r3, [r0, #0]
 800b56e:	f04f 0800 	mov.w	r8, #0
 800b572:	07eb      	lsls	r3, r5, #31
 800b574:	d50a      	bpl.n	800b58c <__pow5mult+0x74>
 800b576:	4639      	mov	r1, r7
 800b578:	4622      	mov	r2, r4
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff ff36 	bl	800b3ec <__multiply>
 800b580:	4639      	mov	r1, r7
 800b582:	4681      	mov	r9, r0
 800b584:	4630      	mov	r0, r6
 800b586:	f7ff fe4a 	bl	800b21e <_Bfree>
 800b58a:	464f      	mov	r7, r9
 800b58c:	106d      	asrs	r5, r5, #1
 800b58e:	d00b      	beq.n	800b5a8 <__pow5mult+0x90>
 800b590:	6820      	ldr	r0, [r4, #0]
 800b592:	b938      	cbnz	r0, 800b5a4 <__pow5mult+0x8c>
 800b594:	4622      	mov	r2, r4
 800b596:	4621      	mov	r1, r4
 800b598:	4630      	mov	r0, r6
 800b59a:	f7ff ff27 	bl	800b3ec <__multiply>
 800b59e:	6020      	str	r0, [r4, #0]
 800b5a0:	f8c0 8000 	str.w	r8, [r0]
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	e7e4      	b.n	800b572 <__pow5mult+0x5a>
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ae:	bf00      	nop
 800b5b0:	0800c768 	.word	0x0800c768

0800b5b4 <__lshift>:
 800b5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5be:	6923      	ldr	r3, [r4, #16]
 800b5c0:	6849      	ldr	r1, [r1, #4]
 800b5c2:	eb0a 0903 	add.w	r9, sl, r3
 800b5c6:	68a3      	ldr	r3, [r4, #8]
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	4616      	mov	r6, r2
 800b5cc:	f109 0501 	add.w	r5, r9, #1
 800b5d0:	42ab      	cmp	r3, r5
 800b5d2:	db32      	blt.n	800b63a <__lshift+0x86>
 800b5d4:	4638      	mov	r0, r7
 800b5d6:	f7ff fdee 	bl	800b1b6 <_Balloc>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	4680      	mov	r8, r0
 800b5de:	f100 0114 	add.w	r1, r0, #20
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	4553      	cmp	r3, sl
 800b5e6:	db2b      	blt.n	800b640 <__lshift+0x8c>
 800b5e8:	6920      	ldr	r0, [r4, #16]
 800b5ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5ee:	f104 0314 	add.w	r3, r4, #20
 800b5f2:	f016 021f 	ands.w	r2, r6, #31
 800b5f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5fe:	d025      	beq.n	800b64c <__lshift+0x98>
 800b600:	f1c2 0e20 	rsb	lr, r2, #32
 800b604:	2000      	movs	r0, #0
 800b606:	681e      	ldr	r6, [r3, #0]
 800b608:	468a      	mov	sl, r1
 800b60a:	4096      	lsls	r6, r2
 800b60c:	4330      	orrs	r0, r6
 800b60e:	f84a 0b04 	str.w	r0, [sl], #4
 800b612:	f853 0b04 	ldr.w	r0, [r3], #4
 800b616:	459c      	cmp	ip, r3
 800b618:	fa20 f00e 	lsr.w	r0, r0, lr
 800b61c:	d814      	bhi.n	800b648 <__lshift+0x94>
 800b61e:	6048      	str	r0, [r1, #4]
 800b620:	b108      	cbz	r0, 800b626 <__lshift+0x72>
 800b622:	f109 0502 	add.w	r5, r9, #2
 800b626:	3d01      	subs	r5, #1
 800b628:	4638      	mov	r0, r7
 800b62a:	f8c8 5010 	str.w	r5, [r8, #16]
 800b62e:	4621      	mov	r1, r4
 800b630:	f7ff fdf5 	bl	800b21e <_Bfree>
 800b634:	4640      	mov	r0, r8
 800b636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63a:	3101      	adds	r1, #1
 800b63c:	005b      	lsls	r3, r3, #1
 800b63e:	e7c7      	b.n	800b5d0 <__lshift+0x1c>
 800b640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b644:	3301      	adds	r3, #1
 800b646:	e7cd      	b.n	800b5e4 <__lshift+0x30>
 800b648:	4651      	mov	r1, sl
 800b64a:	e7dc      	b.n	800b606 <__lshift+0x52>
 800b64c:	3904      	subs	r1, #4
 800b64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b652:	f841 2f04 	str.w	r2, [r1, #4]!
 800b656:	459c      	cmp	ip, r3
 800b658:	d8f9      	bhi.n	800b64e <__lshift+0x9a>
 800b65a:	e7e4      	b.n	800b626 <__lshift+0x72>

0800b65c <__mcmp>:
 800b65c:	6903      	ldr	r3, [r0, #16]
 800b65e:	690a      	ldr	r2, [r1, #16]
 800b660:	1a9b      	subs	r3, r3, r2
 800b662:	b530      	push	{r4, r5, lr}
 800b664:	d10c      	bne.n	800b680 <__mcmp+0x24>
 800b666:	0092      	lsls	r2, r2, #2
 800b668:	3014      	adds	r0, #20
 800b66a:	3114      	adds	r1, #20
 800b66c:	1884      	adds	r4, r0, r2
 800b66e:	4411      	add	r1, r2
 800b670:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b674:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b678:	4295      	cmp	r5, r2
 800b67a:	d003      	beq.n	800b684 <__mcmp+0x28>
 800b67c:	d305      	bcc.n	800b68a <__mcmp+0x2e>
 800b67e:	2301      	movs	r3, #1
 800b680:	4618      	mov	r0, r3
 800b682:	bd30      	pop	{r4, r5, pc}
 800b684:	42a0      	cmp	r0, r4
 800b686:	d3f3      	bcc.n	800b670 <__mcmp+0x14>
 800b688:	e7fa      	b.n	800b680 <__mcmp+0x24>
 800b68a:	f04f 33ff 	mov.w	r3, #4294967295
 800b68e:	e7f7      	b.n	800b680 <__mcmp+0x24>

0800b690 <__mdiff>:
 800b690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b694:	460d      	mov	r5, r1
 800b696:	4607      	mov	r7, r0
 800b698:	4611      	mov	r1, r2
 800b69a:	4628      	mov	r0, r5
 800b69c:	4614      	mov	r4, r2
 800b69e:	f7ff ffdd 	bl	800b65c <__mcmp>
 800b6a2:	1e06      	subs	r6, r0, #0
 800b6a4:	d108      	bne.n	800b6b8 <__mdiff+0x28>
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	4638      	mov	r0, r7
 800b6aa:	f7ff fd84 	bl	800b1b6 <_Balloc>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b8:	bfa4      	itt	ge
 800b6ba:	4623      	movge	r3, r4
 800b6bc:	462c      	movge	r4, r5
 800b6be:	4638      	mov	r0, r7
 800b6c0:	6861      	ldr	r1, [r4, #4]
 800b6c2:	bfa6      	itte	ge
 800b6c4:	461d      	movge	r5, r3
 800b6c6:	2600      	movge	r6, #0
 800b6c8:	2601      	movlt	r6, #1
 800b6ca:	f7ff fd74 	bl	800b1b6 <_Balloc>
 800b6ce:	692b      	ldr	r3, [r5, #16]
 800b6d0:	60c6      	str	r6, [r0, #12]
 800b6d2:	6926      	ldr	r6, [r4, #16]
 800b6d4:	f105 0914 	add.w	r9, r5, #20
 800b6d8:	f104 0214 	add.w	r2, r4, #20
 800b6dc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b6e0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b6e4:	f100 0514 	add.w	r5, r0, #20
 800b6e8:	f04f 0e00 	mov.w	lr, #0
 800b6ec:	f852 ab04 	ldr.w	sl, [r2], #4
 800b6f0:	f859 4b04 	ldr.w	r4, [r9], #4
 800b6f4:	fa1e f18a 	uxtah	r1, lr, sl
 800b6f8:	b2a3      	uxth	r3, r4
 800b6fa:	1ac9      	subs	r1, r1, r3
 800b6fc:	0c23      	lsrs	r3, r4, #16
 800b6fe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b702:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b706:	b289      	uxth	r1, r1
 800b708:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b70c:	45c8      	cmp	r8, r9
 800b70e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b712:	4694      	mov	ip, r2
 800b714:	f845 3b04 	str.w	r3, [r5], #4
 800b718:	d8e8      	bhi.n	800b6ec <__mdiff+0x5c>
 800b71a:	45bc      	cmp	ip, r7
 800b71c:	d304      	bcc.n	800b728 <__mdiff+0x98>
 800b71e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b722:	b183      	cbz	r3, 800b746 <__mdiff+0xb6>
 800b724:	6106      	str	r6, [r0, #16]
 800b726:	e7c5      	b.n	800b6b4 <__mdiff+0x24>
 800b728:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b72c:	fa1e f381 	uxtah	r3, lr, r1
 800b730:	141a      	asrs	r2, r3, #16
 800b732:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b736:	b29b      	uxth	r3, r3
 800b738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b73c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b740:	f845 3b04 	str.w	r3, [r5], #4
 800b744:	e7e9      	b.n	800b71a <__mdiff+0x8a>
 800b746:	3e01      	subs	r6, #1
 800b748:	e7e9      	b.n	800b71e <__mdiff+0x8e>
	...

0800b74c <__ulp>:
 800b74c:	4b12      	ldr	r3, [pc, #72]	; (800b798 <__ulp+0x4c>)
 800b74e:	ee10 2a90 	vmov	r2, s1
 800b752:	401a      	ands	r2, r3
 800b754:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	dd04      	ble.n	800b766 <__ulp+0x1a>
 800b75c:	2000      	movs	r0, #0
 800b75e:	4619      	mov	r1, r3
 800b760:	ec41 0b10 	vmov	d0, r0, r1
 800b764:	4770      	bx	lr
 800b766:	425b      	negs	r3, r3
 800b768:	151b      	asrs	r3, r3, #20
 800b76a:	2b13      	cmp	r3, #19
 800b76c:	f04f 0000 	mov.w	r0, #0
 800b770:	f04f 0100 	mov.w	r1, #0
 800b774:	dc04      	bgt.n	800b780 <__ulp+0x34>
 800b776:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b77a:	fa42 f103 	asr.w	r1, r2, r3
 800b77e:	e7ef      	b.n	800b760 <__ulp+0x14>
 800b780:	3b14      	subs	r3, #20
 800b782:	2b1e      	cmp	r3, #30
 800b784:	f04f 0201 	mov.w	r2, #1
 800b788:	bfda      	itte	le
 800b78a:	f1c3 031f 	rsble	r3, r3, #31
 800b78e:	fa02 f303 	lslle.w	r3, r2, r3
 800b792:	4613      	movgt	r3, r2
 800b794:	4618      	mov	r0, r3
 800b796:	e7e3      	b.n	800b760 <__ulp+0x14>
 800b798:	7ff00000 	.word	0x7ff00000

0800b79c <__b2d>:
 800b79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79e:	6905      	ldr	r5, [r0, #16]
 800b7a0:	f100 0714 	add.w	r7, r0, #20
 800b7a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b7a8:	1f2e      	subs	r6, r5, #4
 800b7aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f7ff fdc5 	bl	800b33e <__hi0bits>
 800b7b4:	f1c0 0320 	rsb	r3, r0, #32
 800b7b8:	280a      	cmp	r0, #10
 800b7ba:	600b      	str	r3, [r1, #0]
 800b7bc:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b834 <__b2d+0x98>
 800b7c0:	dc14      	bgt.n	800b7ec <__b2d+0x50>
 800b7c2:	f1c0 0e0b 	rsb	lr, r0, #11
 800b7c6:	fa24 f10e 	lsr.w	r1, r4, lr
 800b7ca:	42b7      	cmp	r7, r6
 800b7cc:	ea41 030c 	orr.w	r3, r1, ip
 800b7d0:	bf34      	ite	cc
 800b7d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b7d6:	2100      	movcs	r1, #0
 800b7d8:	3015      	adds	r0, #21
 800b7da:	fa04 f000 	lsl.w	r0, r4, r0
 800b7de:	fa21 f10e 	lsr.w	r1, r1, lr
 800b7e2:	ea40 0201 	orr.w	r2, r0, r1
 800b7e6:	ec43 2b10 	vmov	d0, r2, r3
 800b7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ec:	42b7      	cmp	r7, r6
 800b7ee:	bf3a      	itte	cc
 800b7f0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b7f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b7f8:	2100      	movcs	r1, #0
 800b7fa:	380b      	subs	r0, #11
 800b7fc:	d015      	beq.n	800b82a <__b2d+0x8e>
 800b7fe:	4084      	lsls	r4, r0
 800b800:	f1c0 0520 	rsb	r5, r0, #32
 800b804:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b808:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b80c:	42be      	cmp	r6, r7
 800b80e:	fa21 fc05 	lsr.w	ip, r1, r5
 800b812:	ea44 030c 	orr.w	r3, r4, ip
 800b816:	bf8c      	ite	hi
 800b818:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b81c:	2400      	movls	r4, #0
 800b81e:	fa01 f000 	lsl.w	r0, r1, r0
 800b822:	40ec      	lsrs	r4, r5
 800b824:	ea40 0204 	orr.w	r2, r0, r4
 800b828:	e7dd      	b.n	800b7e6 <__b2d+0x4a>
 800b82a:	ea44 030c 	orr.w	r3, r4, ip
 800b82e:	460a      	mov	r2, r1
 800b830:	e7d9      	b.n	800b7e6 <__b2d+0x4a>
 800b832:	bf00      	nop
 800b834:	3ff00000 	.word	0x3ff00000

0800b838 <__d2b>:
 800b838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b83c:	460e      	mov	r6, r1
 800b83e:	2101      	movs	r1, #1
 800b840:	ec59 8b10 	vmov	r8, r9, d0
 800b844:	4615      	mov	r5, r2
 800b846:	f7ff fcb6 	bl	800b1b6 <_Balloc>
 800b84a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b84e:	4607      	mov	r7, r0
 800b850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b854:	bb34      	cbnz	r4, 800b8a4 <__d2b+0x6c>
 800b856:	9301      	str	r3, [sp, #4]
 800b858:	f1b8 0300 	subs.w	r3, r8, #0
 800b85c:	d027      	beq.n	800b8ae <__d2b+0x76>
 800b85e:	a802      	add	r0, sp, #8
 800b860:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b864:	f7ff fd8a 	bl	800b37c <__lo0bits>
 800b868:	9900      	ldr	r1, [sp, #0]
 800b86a:	b1f0      	cbz	r0, 800b8aa <__d2b+0x72>
 800b86c:	9a01      	ldr	r2, [sp, #4]
 800b86e:	f1c0 0320 	rsb	r3, r0, #32
 800b872:	fa02 f303 	lsl.w	r3, r2, r3
 800b876:	430b      	orrs	r3, r1
 800b878:	40c2      	lsrs	r2, r0
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	9201      	str	r2, [sp, #4]
 800b87e:	9b01      	ldr	r3, [sp, #4]
 800b880:	61bb      	str	r3, [r7, #24]
 800b882:	2b00      	cmp	r3, #0
 800b884:	bf14      	ite	ne
 800b886:	2102      	movne	r1, #2
 800b888:	2101      	moveq	r1, #1
 800b88a:	6139      	str	r1, [r7, #16]
 800b88c:	b1c4      	cbz	r4, 800b8c0 <__d2b+0x88>
 800b88e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b892:	4404      	add	r4, r0
 800b894:	6034      	str	r4, [r6, #0]
 800b896:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b89a:	6028      	str	r0, [r5, #0]
 800b89c:	4638      	mov	r0, r7
 800b89e:	b003      	add	sp, #12
 800b8a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8a8:	e7d5      	b.n	800b856 <__d2b+0x1e>
 800b8aa:	6179      	str	r1, [r7, #20]
 800b8ac:	e7e7      	b.n	800b87e <__d2b+0x46>
 800b8ae:	a801      	add	r0, sp, #4
 800b8b0:	f7ff fd64 	bl	800b37c <__lo0bits>
 800b8b4:	9b01      	ldr	r3, [sp, #4]
 800b8b6:	617b      	str	r3, [r7, #20]
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	6139      	str	r1, [r7, #16]
 800b8bc:	3020      	adds	r0, #32
 800b8be:	e7e5      	b.n	800b88c <__d2b+0x54>
 800b8c0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b8c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8c8:	6030      	str	r0, [r6, #0]
 800b8ca:	6918      	ldr	r0, [r3, #16]
 800b8cc:	f7ff fd37 	bl	800b33e <__hi0bits>
 800b8d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b8d4:	e7e1      	b.n	800b89a <__d2b+0x62>

0800b8d6 <__ratio>:
 800b8d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8da:	4688      	mov	r8, r1
 800b8dc:	4669      	mov	r1, sp
 800b8de:	4681      	mov	r9, r0
 800b8e0:	f7ff ff5c 	bl	800b79c <__b2d>
 800b8e4:	a901      	add	r1, sp, #4
 800b8e6:	4640      	mov	r0, r8
 800b8e8:	ec57 6b10 	vmov	r6, r7, d0
 800b8ec:	f7ff ff56 	bl	800b79c <__b2d>
 800b8f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b8f8:	eba3 0c02 	sub.w	ip, r3, r2
 800b8fc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b900:	1a9b      	subs	r3, r3, r2
 800b902:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b906:	ec5b ab10 	vmov	sl, fp, d0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	bfce      	itee	gt
 800b90e:	463a      	movgt	r2, r7
 800b910:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b914:	465a      	movle	r2, fp
 800b916:	4659      	mov	r1, fp
 800b918:	463d      	mov	r5, r7
 800b91a:	bfd4      	ite	le
 800b91c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b920:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b924:	4630      	mov	r0, r6
 800b926:	ee10 2a10 	vmov	r2, s0
 800b92a:	460b      	mov	r3, r1
 800b92c:	4629      	mov	r1, r5
 800b92e:	f7f4 ff95 	bl	800085c <__aeabi_ddiv>
 800b932:	ec41 0b10 	vmov	d0, r0, r1
 800b936:	b003      	add	sp, #12
 800b938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b93c <__copybits>:
 800b93c:	3901      	subs	r1, #1
 800b93e:	b510      	push	{r4, lr}
 800b940:	1149      	asrs	r1, r1, #5
 800b942:	6914      	ldr	r4, [r2, #16]
 800b944:	3101      	adds	r1, #1
 800b946:	f102 0314 	add.w	r3, r2, #20
 800b94a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b94e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b952:	42a3      	cmp	r3, r4
 800b954:	4602      	mov	r2, r0
 800b956:	d303      	bcc.n	800b960 <__copybits+0x24>
 800b958:	2300      	movs	r3, #0
 800b95a:	428a      	cmp	r2, r1
 800b95c:	d305      	bcc.n	800b96a <__copybits+0x2e>
 800b95e:	bd10      	pop	{r4, pc}
 800b960:	f853 2b04 	ldr.w	r2, [r3], #4
 800b964:	f840 2b04 	str.w	r2, [r0], #4
 800b968:	e7f3      	b.n	800b952 <__copybits+0x16>
 800b96a:	f842 3b04 	str.w	r3, [r2], #4
 800b96e:	e7f4      	b.n	800b95a <__copybits+0x1e>

0800b970 <__any_on>:
 800b970:	f100 0214 	add.w	r2, r0, #20
 800b974:	6900      	ldr	r0, [r0, #16]
 800b976:	114b      	asrs	r3, r1, #5
 800b978:	4298      	cmp	r0, r3
 800b97a:	b510      	push	{r4, lr}
 800b97c:	db11      	blt.n	800b9a2 <__any_on+0x32>
 800b97e:	dd0a      	ble.n	800b996 <__any_on+0x26>
 800b980:	f011 011f 	ands.w	r1, r1, #31
 800b984:	d007      	beq.n	800b996 <__any_on+0x26>
 800b986:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b98a:	fa24 f001 	lsr.w	r0, r4, r1
 800b98e:	fa00 f101 	lsl.w	r1, r0, r1
 800b992:	428c      	cmp	r4, r1
 800b994:	d10b      	bne.n	800b9ae <__any_on+0x3e>
 800b996:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d803      	bhi.n	800b9a6 <__any_on+0x36>
 800b99e:	2000      	movs	r0, #0
 800b9a0:	bd10      	pop	{r4, pc}
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	e7f7      	b.n	800b996 <__any_on+0x26>
 800b9a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9aa:	2900      	cmp	r1, #0
 800b9ac:	d0f5      	beq.n	800b99a <__any_on+0x2a>
 800b9ae:	2001      	movs	r0, #1
 800b9b0:	e7f6      	b.n	800b9a0 <__any_on+0x30>

0800b9b2 <_calloc_r>:
 800b9b2:	b538      	push	{r3, r4, r5, lr}
 800b9b4:	fb02 f401 	mul.w	r4, r2, r1
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	f7fc fbff 	bl	80081bc <_malloc_r>
 800b9be:	4605      	mov	r5, r0
 800b9c0:	b118      	cbz	r0, 800b9ca <_calloc_r+0x18>
 800b9c2:	4622      	mov	r2, r4
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	f7fc fba3 	bl	8008110 <memset>
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	bd38      	pop	{r3, r4, r5, pc}

0800b9ce <__ssputs_r>:
 800b9ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d2:	688e      	ldr	r6, [r1, #8]
 800b9d4:	429e      	cmp	r6, r3
 800b9d6:	4682      	mov	sl, r0
 800b9d8:	460c      	mov	r4, r1
 800b9da:	4690      	mov	r8, r2
 800b9dc:	4699      	mov	r9, r3
 800b9de:	d837      	bhi.n	800ba50 <__ssputs_r+0x82>
 800b9e0:	898a      	ldrh	r2, [r1, #12]
 800b9e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9e6:	d031      	beq.n	800ba4c <__ssputs_r+0x7e>
 800b9e8:	6825      	ldr	r5, [r4, #0]
 800b9ea:	6909      	ldr	r1, [r1, #16]
 800b9ec:	1a6f      	subs	r7, r5, r1
 800b9ee:	6965      	ldr	r5, [r4, #20]
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9f6:	fb95 f5f3 	sdiv	r5, r5, r3
 800b9fa:	f109 0301 	add.w	r3, r9, #1
 800b9fe:	443b      	add	r3, r7
 800ba00:	429d      	cmp	r5, r3
 800ba02:	bf38      	it	cc
 800ba04:	461d      	movcc	r5, r3
 800ba06:	0553      	lsls	r3, r2, #21
 800ba08:	d530      	bpl.n	800ba6c <__ssputs_r+0x9e>
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	f7fc fbd6 	bl	80081bc <_malloc_r>
 800ba10:	4606      	mov	r6, r0
 800ba12:	b950      	cbnz	r0, 800ba2a <__ssputs_r+0x5c>
 800ba14:	230c      	movs	r3, #12
 800ba16:	f8ca 3000 	str.w	r3, [sl]
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba20:	81a3      	strh	r3, [r4, #12]
 800ba22:	f04f 30ff 	mov.w	r0, #4294967295
 800ba26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba2a:	463a      	mov	r2, r7
 800ba2c:	6921      	ldr	r1, [r4, #16]
 800ba2e:	f7ff fbb5 	bl	800b19c <memcpy>
 800ba32:	89a3      	ldrh	r3, [r4, #12]
 800ba34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba3c:	81a3      	strh	r3, [r4, #12]
 800ba3e:	6126      	str	r6, [r4, #16]
 800ba40:	6165      	str	r5, [r4, #20]
 800ba42:	443e      	add	r6, r7
 800ba44:	1bed      	subs	r5, r5, r7
 800ba46:	6026      	str	r6, [r4, #0]
 800ba48:	60a5      	str	r5, [r4, #8]
 800ba4a:	464e      	mov	r6, r9
 800ba4c:	454e      	cmp	r6, r9
 800ba4e:	d900      	bls.n	800ba52 <__ssputs_r+0x84>
 800ba50:	464e      	mov	r6, r9
 800ba52:	4632      	mov	r2, r6
 800ba54:	4641      	mov	r1, r8
 800ba56:	6820      	ldr	r0, [r4, #0]
 800ba58:	f000 fcb8 	bl	800c3cc <memmove>
 800ba5c:	68a3      	ldr	r3, [r4, #8]
 800ba5e:	1b9b      	subs	r3, r3, r6
 800ba60:	60a3      	str	r3, [r4, #8]
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	441e      	add	r6, r3
 800ba66:	6026      	str	r6, [r4, #0]
 800ba68:	2000      	movs	r0, #0
 800ba6a:	e7dc      	b.n	800ba26 <__ssputs_r+0x58>
 800ba6c:	462a      	mov	r2, r5
 800ba6e:	f000 fcc6 	bl	800c3fe <_realloc_r>
 800ba72:	4606      	mov	r6, r0
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d1e2      	bne.n	800ba3e <__ssputs_r+0x70>
 800ba78:	6921      	ldr	r1, [r4, #16]
 800ba7a:	4650      	mov	r0, sl
 800ba7c:	f7fc fb50 	bl	8008120 <_free_r>
 800ba80:	e7c8      	b.n	800ba14 <__ssputs_r+0x46>
	...

0800ba84 <_svfiprintf_r>:
 800ba84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba88:	461d      	mov	r5, r3
 800ba8a:	898b      	ldrh	r3, [r1, #12]
 800ba8c:	061f      	lsls	r7, r3, #24
 800ba8e:	b09d      	sub	sp, #116	; 0x74
 800ba90:	4680      	mov	r8, r0
 800ba92:	460c      	mov	r4, r1
 800ba94:	4616      	mov	r6, r2
 800ba96:	d50f      	bpl.n	800bab8 <_svfiprintf_r+0x34>
 800ba98:	690b      	ldr	r3, [r1, #16]
 800ba9a:	b96b      	cbnz	r3, 800bab8 <_svfiprintf_r+0x34>
 800ba9c:	2140      	movs	r1, #64	; 0x40
 800ba9e:	f7fc fb8d 	bl	80081bc <_malloc_r>
 800baa2:	6020      	str	r0, [r4, #0]
 800baa4:	6120      	str	r0, [r4, #16]
 800baa6:	b928      	cbnz	r0, 800bab4 <_svfiprintf_r+0x30>
 800baa8:	230c      	movs	r3, #12
 800baaa:	f8c8 3000 	str.w	r3, [r8]
 800baae:	f04f 30ff 	mov.w	r0, #4294967295
 800bab2:	e0c8      	b.n	800bc46 <_svfiprintf_r+0x1c2>
 800bab4:	2340      	movs	r3, #64	; 0x40
 800bab6:	6163      	str	r3, [r4, #20]
 800bab8:	2300      	movs	r3, #0
 800baba:	9309      	str	r3, [sp, #36]	; 0x24
 800babc:	2320      	movs	r3, #32
 800babe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bac2:	2330      	movs	r3, #48	; 0x30
 800bac4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bac8:	9503      	str	r5, [sp, #12]
 800baca:	f04f 0b01 	mov.w	fp, #1
 800bace:	4637      	mov	r7, r6
 800bad0:	463d      	mov	r5, r7
 800bad2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bad6:	b10b      	cbz	r3, 800badc <_svfiprintf_r+0x58>
 800bad8:	2b25      	cmp	r3, #37	; 0x25
 800bada:	d13e      	bne.n	800bb5a <_svfiprintf_r+0xd6>
 800badc:	ebb7 0a06 	subs.w	sl, r7, r6
 800bae0:	d00b      	beq.n	800bafa <_svfiprintf_r+0x76>
 800bae2:	4653      	mov	r3, sl
 800bae4:	4632      	mov	r2, r6
 800bae6:	4621      	mov	r1, r4
 800bae8:	4640      	mov	r0, r8
 800baea:	f7ff ff70 	bl	800b9ce <__ssputs_r>
 800baee:	3001      	adds	r0, #1
 800baf0:	f000 80a4 	beq.w	800bc3c <_svfiprintf_r+0x1b8>
 800baf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf6:	4453      	add	r3, sl
 800baf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bafa:	783b      	ldrb	r3, [r7, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f000 809d 	beq.w	800bc3c <_svfiprintf_r+0x1b8>
 800bb02:	2300      	movs	r3, #0
 800bb04:	f04f 32ff 	mov.w	r2, #4294967295
 800bb08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb0c:	9304      	str	r3, [sp, #16]
 800bb0e:	9307      	str	r3, [sp, #28]
 800bb10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb14:	931a      	str	r3, [sp, #104]	; 0x68
 800bb16:	462f      	mov	r7, r5
 800bb18:	2205      	movs	r2, #5
 800bb1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bb1e:	4850      	ldr	r0, [pc, #320]	; (800bc60 <_svfiprintf_r+0x1dc>)
 800bb20:	f7f4 fb66 	bl	80001f0 <memchr>
 800bb24:	9b04      	ldr	r3, [sp, #16]
 800bb26:	b9d0      	cbnz	r0, 800bb5e <_svfiprintf_r+0xda>
 800bb28:	06d9      	lsls	r1, r3, #27
 800bb2a:	bf44      	itt	mi
 800bb2c:	2220      	movmi	r2, #32
 800bb2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb32:	071a      	lsls	r2, r3, #28
 800bb34:	bf44      	itt	mi
 800bb36:	222b      	movmi	r2, #43	; 0x2b
 800bb38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb3c:	782a      	ldrb	r2, [r5, #0]
 800bb3e:	2a2a      	cmp	r2, #42	; 0x2a
 800bb40:	d015      	beq.n	800bb6e <_svfiprintf_r+0xea>
 800bb42:	9a07      	ldr	r2, [sp, #28]
 800bb44:	462f      	mov	r7, r5
 800bb46:	2000      	movs	r0, #0
 800bb48:	250a      	movs	r5, #10
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb50:	3b30      	subs	r3, #48	; 0x30
 800bb52:	2b09      	cmp	r3, #9
 800bb54:	d94d      	bls.n	800bbf2 <_svfiprintf_r+0x16e>
 800bb56:	b1b8      	cbz	r0, 800bb88 <_svfiprintf_r+0x104>
 800bb58:	e00f      	b.n	800bb7a <_svfiprintf_r+0xf6>
 800bb5a:	462f      	mov	r7, r5
 800bb5c:	e7b8      	b.n	800bad0 <_svfiprintf_r+0x4c>
 800bb5e:	4a40      	ldr	r2, [pc, #256]	; (800bc60 <_svfiprintf_r+0x1dc>)
 800bb60:	1a80      	subs	r0, r0, r2
 800bb62:	fa0b f000 	lsl.w	r0, fp, r0
 800bb66:	4318      	orrs	r0, r3
 800bb68:	9004      	str	r0, [sp, #16]
 800bb6a:	463d      	mov	r5, r7
 800bb6c:	e7d3      	b.n	800bb16 <_svfiprintf_r+0x92>
 800bb6e:	9a03      	ldr	r2, [sp, #12]
 800bb70:	1d11      	adds	r1, r2, #4
 800bb72:	6812      	ldr	r2, [r2, #0]
 800bb74:	9103      	str	r1, [sp, #12]
 800bb76:	2a00      	cmp	r2, #0
 800bb78:	db01      	blt.n	800bb7e <_svfiprintf_r+0xfa>
 800bb7a:	9207      	str	r2, [sp, #28]
 800bb7c:	e004      	b.n	800bb88 <_svfiprintf_r+0x104>
 800bb7e:	4252      	negs	r2, r2
 800bb80:	f043 0302 	orr.w	r3, r3, #2
 800bb84:	9207      	str	r2, [sp, #28]
 800bb86:	9304      	str	r3, [sp, #16]
 800bb88:	783b      	ldrb	r3, [r7, #0]
 800bb8a:	2b2e      	cmp	r3, #46	; 0x2e
 800bb8c:	d10c      	bne.n	800bba8 <_svfiprintf_r+0x124>
 800bb8e:	787b      	ldrb	r3, [r7, #1]
 800bb90:	2b2a      	cmp	r3, #42	; 0x2a
 800bb92:	d133      	bne.n	800bbfc <_svfiprintf_r+0x178>
 800bb94:	9b03      	ldr	r3, [sp, #12]
 800bb96:	1d1a      	adds	r2, r3, #4
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	9203      	str	r2, [sp, #12]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	bfb8      	it	lt
 800bba0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bba4:	3702      	adds	r7, #2
 800bba6:	9305      	str	r3, [sp, #20]
 800bba8:	4d2e      	ldr	r5, [pc, #184]	; (800bc64 <_svfiprintf_r+0x1e0>)
 800bbaa:	7839      	ldrb	r1, [r7, #0]
 800bbac:	2203      	movs	r2, #3
 800bbae:	4628      	mov	r0, r5
 800bbb0:	f7f4 fb1e 	bl	80001f0 <memchr>
 800bbb4:	b138      	cbz	r0, 800bbc6 <_svfiprintf_r+0x142>
 800bbb6:	2340      	movs	r3, #64	; 0x40
 800bbb8:	1b40      	subs	r0, r0, r5
 800bbba:	fa03 f000 	lsl.w	r0, r3, r0
 800bbbe:	9b04      	ldr	r3, [sp, #16]
 800bbc0:	4303      	orrs	r3, r0
 800bbc2:	3701      	adds	r7, #1
 800bbc4:	9304      	str	r3, [sp, #16]
 800bbc6:	7839      	ldrb	r1, [r7, #0]
 800bbc8:	4827      	ldr	r0, [pc, #156]	; (800bc68 <_svfiprintf_r+0x1e4>)
 800bbca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbce:	2206      	movs	r2, #6
 800bbd0:	1c7e      	adds	r6, r7, #1
 800bbd2:	f7f4 fb0d 	bl	80001f0 <memchr>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d038      	beq.n	800bc4c <_svfiprintf_r+0x1c8>
 800bbda:	4b24      	ldr	r3, [pc, #144]	; (800bc6c <_svfiprintf_r+0x1e8>)
 800bbdc:	bb13      	cbnz	r3, 800bc24 <_svfiprintf_r+0x1a0>
 800bbde:	9b03      	ldr	r3, [sp, #12]
 800bbe0:	3307      	adds	r3, #7
 800bbe2:	f023 0307 	bic.w	r3, r3, #7
 800bbe6:	3308      	adds	r3, #8
 800bbe8:	9303      	str	r3, [sp, #12]
 800bbea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbec:	444b      	add	r3, r9
 800bbee:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf0:	e76d      	b.n	800bace <_svfiprintf_r+0x4a>
 800bbf2:	fb05 3202 	mla	r2, r5, r2, r3
 800bbf6:	2001      	movs	r0, #1
 800bbf8:	460f      	mov	r7, r1
 800bbfa:	e7a6      	b.n	800bb4a <_svfiprintf_r+0xc6>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	3701      	adds	r7, #1
 800bc00:	9305      	str	r3, [sp, #20]
 800bc02:	4619      	mov	r1, r3
 800bc04:	250a      	movs	r5, #10
 800bc06:	4638      	mov	r0, r7
 800bc08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc0c:	3a30      	subs	r2, #48	; 0x30
 800bc0e:	2a09      	cmp	r2, #9
 800bc10:	d903      	bls.n	800bc1a <_svfiprintf_r+0x196>
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d0c8      	beq.n	800bba8 <_svfiprintf_r+0x124>
 800bc16:	9105      	str	r1, [sp, #20]
 800bc18:	e7c6      	b.n	800bba8 <_svfiprintf_r+0x124>
 800bc1a:	fb05 2101 	mla	r1, r5, r1, r2
 800bc1e:	2301      	movs	r3, #1
 800bc20:	4607      	mov	r7, r0
 800bc22:	e7f0      	b.n	800bc06 <_svfiprintf_r+0x182>
 800bc24:	ab03      	add	r3, sp, #12
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	4622      	mov	r2, r4
 800bc2a:	4b11      	ldr	r3, [pc, #68]	; (800bc70 <_svfiprintf_r+0x1ec>)
 800bc2c:	a904      	add	r1, sp, #16
 800bc2e:	4640      	mov	r0, r8
 800bc30:	f7fc fbb2 	bl	8008398 <_printf_float>
 800bc34:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bc38:	4681      	mov	r9, r0
 800bc3a:	d1d6      	bne.n	800bbea <_svfiprintf_r+0x166>
 800bc3c:	89a3      	ldrh	r3, [r4, #12]
 800bc3e:	065b      	lsls	r3, r3, #25
 800bc40:	f53f af35 	bmi.w	800baae <_svfiprintf_r+0x2a>
 800bc44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc46:	b01d      	add	sp, #116	; 0x74
 800bc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4c:	ab03      	add	r3, sp, #12
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	4622      	mov	r2, r4
 800bc52:	4b07      	ldr	r3, [pc, #28]	; (800bc70 <_svfiprintf_r+0x1ec>)
 800bc54:	a904      	add	r1, sp, #16
 800bc56:	4640      	mov	r0, r8
 800bc58:	f7fc fe54 	bl	8008904 <_printf_i>
 800bc5c:	e7ea      	b.n	800bc34 <_svfiprintf_r+0x1b0>
 800bc5e:	bf00      	nop
 800bc60:	0800c774 	.word	0x0800c774
 800bc64:	0800c77a 	.word	0x0800c77a
 800bc68:	0800c77e 	.word	0x0800c77e
 800bc6c:	08008399 	.word	0x08008399
 800bc70:	0800b9cf 	.word	0x0800b9cf

0800bc74 <__sfputc_r>:
 800bc74:	6893      	ldr	r3, [r2, #8]
 800bc76:	3b01      	subs	r3, #1
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	b410      	push	{r4}
 800bc7c:	6093      	str	r3, [r2, #8]
 800bc7e:	da08      	bge.n	800bc92 <__sfputc_r+0x1e>
 800bc80:	6994      	ldr	r4, [r2, #24]
 800bc82:	42a3      	cmp	r3, r4
 800bc84:	db01      	blt.n	800bc8a <__sfputc_r+0x16>
 800bc86:	290a      	cmp	r1, #10
 800bc88:	d103      	bne.n	800bc92 <__sfputc_r+0x1e>
 800bc8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc8e:	f000 b987 	b.w	800bfa0 <__swbuf_r>
 800bc92:	6813      	ldr	r3, [r2, #0]
 800bc94:	1c58      	adds	r0, r3, #1
 800bc96:	6010      	str	r0, [r2, #0]
 800bc98:	7019      	strb	r1, [r3, #0]
 800bc9a:	4608      	mov	r0, r1
 800bc9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <__sfputs_r>:
 800bca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca4:	4606      	mov	r6, r0
 800bca6:	460f      	mov	r7, r1
 800bca8:	4614      	mov	r4, r2
 800bcaa:	18d5      	adds	r5, r2, r3
 800bcac:	42ac      	cmp	r4, r5
 800bcae:	d101      	bne.n	800bcb4 <__sfputs_r+0x12>
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	e007      	b.n	800bcc4 <__sfputs_r+0x22>
 800bcb4:	463a      	mov	r2, r7
 800bcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcba:	4630      	mov	r0, r6
 800bcbc:	f7ff ffda 	bl	800bc74 <__sfputc_r>
 800bcc0:	1c43      	adds	r3, r0, #1
 800bcc2:	d1f3      	bne.n	800bcac <__sfputs_r+0xa>
 800bcc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcc8 <_vfiprintf_r>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	460c      	mov	r4, r1
 800bcce:	b09d      	sub	sp, #116	; 0x74
 800bcd0:	4617      	mov	r7, r2
 800bcd2:	461d      	mov	r5, r3
 800bcd4:	4606      	mov	r6, r0
 800bcd6:	b118      	cbz	r0, 800bce0 <_vfiprintf_r+0x18>
 800bcd8:	6983      	ldr	r3, [r0, #24]
 800bcda:	b90b      	cbnz	r3, 800bce0 <_vfiprintf_r+0x18>
 800bcdc:	f7fe fe88 	bl	800a9f0 <__sinit>
 800bce0:	4b7c      	ldr	r3, [pc, #496]	; (800bed4 <_vfiprintf_r+0x20c>)
 800bce2:	429c      	cmp	r4, r3
 800bce4:	d158      	bne.n	800bd98 <_vfiprintf_r+0xd0>
 800bce6:	6874      	ldr	r4, [r6, #4]
 800bce8:	89a3      	ldrh	r3, [r4, #12]
 800bcea:	0718      	lsls	r0, r3, #28
 800bcec:	d55e      	bpl.n	800bdac <_vfiprintf_r+0xe4>
 800bcee:	6923      	ldr	r3, [r4, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d05b      	beq.n	800bdac <_vfiprintf_r+0xe4>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf8:	2320      	movs	r3, #32
 800bcfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcfe:	2330      	movs	r3, #48	; 0x30
 800bd00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd04:	9503      	str	r5, [sp, #12]
 800bd06:	f04f 0b01 	mov.w	fp, #1
 800bd0a:	46b8      	mov	r8, r7
 800bd0c:	4645      	mov	r5, r8
 800bd0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd12:	b10b      	cbz	r3, 800bd18 <_vfiprintf_r+0x50>
 800bd14:	2b25      	cmp	r3, #37	; 0x25
 800bd16:	d154      	bne.n	800bdc2 <_vfiprintf_r+0xfa>
 800bd18:	ebb8 0a07 	subs.w	sl, r8, r7
 800bd1c:	d00b      	beq.n	800bd36 <_vfiprintf_r+0x6e>
 800bd1e:	4653      	mov	r3, sl
 800bd20:	463a      	mov	r2, r7
 800bd22:	4621      	mov	r1, r4
 800bd24:	4630      	mov	r0, r6
 800bd26:	f7ff ffbc 	bl	800bca2 <__sfputs_r>
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	f000 80c2 	beq.w	800beb4 <_vfiprintf_r+0x1ec>
 800bd30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd32:	4453      	add	r3, sl
 800bd34:	9309      	str	r3, [sp, #36]	; 0x24
 800bd36:	f898 3000 	ldrb.w	r3, [r8]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 80ba 	beq.w	800beb4 <_vfiprintf_r+0x1ec>
 800bd40:	2300      	movs	r3, #0
 800bd42:	f04f 32ff 	mov.w	r2, #4294967295
 800bd46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd4a:	9304      	str	r3, [sp, #16]
 800bd4c:	9307      	str	r3, [sp, #28]
 800bd4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd52:	931a      	str	r3, [sp, #104]	; 0x68
 800bd54:	46a8      	mov	r8, r5
 800bd56:	2205      	movs	r2, #5
 800bd58:	f818 1b01 	ldrb.w	r1, [r8], #1
 800bd5c:	485e      	ldr	r0, [pc, #376]	; (800bed8 <_vfiprintf_r+0x210>)
 800bd5e:	f7f4 fa47 	bl	80001f0 <memchr>
 800bd62:	9b04      	ldr	r3, [sp, #16]
 800bd64:	bb78      	cbnz	r0, 800bdc6 <_vfiprintf_r+0xfe>
 800bd66:	06d9      	lsls	r1, r3, #27
 800bd68:	bf44      	itt	mi
 800bd6a:	2220      	movmi	r2, #32
 800bd6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd70:	071a      	lsls	r2, r3, #28
 800bd72:	bf44      	itt	mi
 800bd74:	222b      	movmi	r2, #43	; 0x2b
 800bd76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd7a:	782a      	ldrb	r2, [r5, #0]
 800bd7c:	2a2a      	cmp	r2, #42	; 0x2a
 800bd7e:	d02a      	beq.n	800bdd6 <_vfiprintf_r+0x10e>
 800bd80:	9a07      	ldr	r2, [sp, #28]
 800bd82:	46a8      	mov	r8, r5
 800bd84:	2000      	movs	r0, #0
 800bd86:	250a      	movs	r5, #10
 800bd88:	4641      	mov	r1, r8
 800bd8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd8e:	3b30      	subs	r3, #48	; 0x30
 800bd90:	2b09      	cmp	r3, #9
 800bd92:	d969      	bls.n	800be68 <_vfiprintf_r+0x1a0>
 800bd94:	b360      	cbz	r0, 800bdf0 <_vfiprintf_r+0x128>
 800bd96:	e024      	b.n	800bde2 <_vfiprintf_r+0x11a>
 800bd98:	4b50      	ldr	r3, [pc, #320]	; (800bedc <_vfiprintf_r+0x214>)
 800bd9a:	429c      	cmp	r4, r3
 800bd9c:	d101      	bne.n	800bda2 <_vfiprintf_r+0xda>
 800bd9e:	68b4      	ldr	r4, [r6, #8]
 800bda0:	e7a2      	b.n	800bce8 <_vfiprintf_r+0x20>
 800bda2:	4b4f      	ldr	r3, [pc, #316]	; (800bee0 <_vfiprintf_r+0x218>)
 800bda4:	429c      	cmp	r4, r3
 800bda6:	bf08      	it	eq
 800bda8:	68f4      	ldreq	r4, [r6, #12]
 800bdaa:	e79d      	b.n	800bce8 <_vfiprintf_r+0x20>
 800bdac:	4621      	mov	r1, r4
 800bdae:	4630      	mov	r0, r6
 800bdb0:	f000 f968 	bl	800c084 <__swsetup_r>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d09d      	beq.n	800bcf4 <_vfiprintf_r+0x2c>
 800bdb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbc:	b01d      	add	sp, #116	; 0x74
 800bdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc2:	46a8      	mov	r8, r5
 800bdc4:	e7a2      	b.n	800bd0c <_vfiprintf_r+0x44>
 800bdc6:	4a44      	ldr	r2, [pc, #272]	; (800bed8 <_vfiprintf_r+0x210>)
 800bdc8:	1a80      	subs	r0, r0, r2
 800bdca:	fa0b f000 	lsl.w	r0, fp, r0
 800bdce:	4318      	orrs	r0, r3
 800bdd0:	9004      	str	r0, [sp, #16]
 800bdd2:	4645      	mov	r5, r8
 800bdd4:	e7be      	b.n	800bd54 <_vfiprintf_r+0x8c>
 800bdd6:	9a03      	ldr	r2, [sp, #12]
 800bdd8:	1d11      	adds	r1, r2, #4
 800bdda:	6812      	ldr	r2, [r2, #0]
 800bddc:	9103      	str	r1, [sp, #12]
 800bdde:	2a00      	cmp	r2, #0
 800bde0:	db01      	blt.n	800bde6 <_vfiprintf_r+0x11e>
 800bde2:	9207      	str	r2, [sp, #28]
 800bde4:	e004      	b.n	800bdf0 <_vfiprintf_r+0x128>
 800bde6:	4252      	negs	r2, r2
 800bde8:	f043 0302 	orr.w	r3, r3, #2
 800bdec:	9207      	str	r2, [sp, #28]
 800bdee:	9304      	str	r3, [sp, #16]
 800bdf0:	f898 3000 	ldrb.w	r3, [r8]
 800bdf4:	2b2e      	cmp	r3, #46	; 0x2e
 800bdf6:	d10e      	bne.n	800be16 <_vfiprintf_r+0x14e>
 800bdf8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bdfc:	2b2a      	cmp	r3, #42	; 0x2a
 800bdfe:	d138      	bne.n	800be72 <_vfiprintf_r+0x1aa>
 800be00:	9b03      	ldr	r3, [sp, #12]
 800be02:	1d1a      	adds	r2, r3, #4
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	9203      	str	r2, [sp, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	bfb8      	it	lt
 800be0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800be10:	f108 0802 	add.w	r8, r8, #2
 800be14:	9305      	str	r3, [sp, #20]
 800be16:	4d33      	ldr	r5, [pc, #204]	; (800bee4 <_vfiprintf_r+0x21c>)
 800be18:	f898 1000 	ldrb.w	r1, [r8]
 800be1c:	2203      	movs	r2, #3
 800be1e:	4628      	mov	r0, r5
 800be20:	f7f4 f9e6 	bl	80001f0 <memchr>
 800be24:	b140      	cbz	r0, 800be38 <_vfiprintf_r+0x170>
 800be26:	2340      	movs	r3, #64	; 0x40
 800be28:	1b40      	subs	r0, r0, r5
 800be2a:	fa03 f000 	lsl.w	r0, r3, r0
 800be2e:	9b04      	ldr	r3, [sp, #16]
 800be30:	4303      	orrs	r3, r0
 800be32:	f108 0801 	add.w	r8, r8, #1
 800be36:	9304      	str	r3, [sp, #16]
 800be38:	f898 1000 	ldrb.w	r1, [r8]
 800be3c:	482a      	ldr	r0, [pc, #168]	; (800bee8 <_vfiprintf_r+0x220>)
 800be3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be42:	2206      	movs	r2, #6
 800be44:	f108 0701 	add.w	r7, r8, #1
 800be48:	f7f4 f9d2 	bl	80001f0 <memchr>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	d037      	beq.n	800bec0 <_vfiprintf_r+0x1f8>
 800be50:	4b26      	ldr	r3, [pc, #152]	; (800beec <_vfiprintf_r+0x224>)
 800be52:	bb1b      	cbnz	r3, 800be9c <_vfiprintf_r+0x1d4>
 800be54:	9b03      	ldr	r3, [sp, #12]
 800be56:	3307      	adds	r3, #7
 800be58:	f023 0307 	bic.w	r3, r3, #7
 800be5c:	3308      	adds	r3, #8
 800be5e:	9303      	str	r3, [sp, #12]
 800be60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be62:	444b      	add	r3, r9
 800be64:	9309      	str	r3, [sp, #36]	; 0x24
 800be66:	e750      	b.n	800bd0a <_vfiprintf_r+0x42>
 800be68:	fb05 3202 	mla	r2, r5, r2, r3
 800be6c:	2001      	movs	r0, #1
 800be6e:	4688      	mov	r8, r1
 800be70:	e78a      	b.n	800bd88 <_vfiprintf_r+0xc0>
 800be72:	2300      	movs	r3, #0
 800be74:	f108 0801 	add.w	r8, r8, #1
 800be78:	9305      	str	r3, [sp, #20]
 800be7a:	4619      	mov	r1, r3
 800be7c:	250a      	movs	r5, #10
 800be7e:	4640      	mov	r0, r8
 800be80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be84:	3a30      	subs	r2, #48	; 0x30
 800be86:	2a09      	cmp	r2, #9
 800be88:	d903      	bls.n	800be92 <_vfiprintf_r+0x1ca>
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0c3      	beq.n	800be16 <_vfiprintf_r+0x14e>
 800be8e:	9105      	str	r1, [sp, #20]
 800be90:	e7c1      	b.n	800be16 <_vfiprintf_r+0x14e>
 800be92:	fb05 2101 	mla	r1, r5, r1, r2
 800be96:	2301      	movs	r3, #1
 800be98:	4680      	mov	r8, r0
 800be9a:	e7f0      	b.n	800be7e <_vfiprintf_r+0x1b6>
 800be9c:	ab03      	add	r3, sp, #12
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	4622      	mov	r2, r4
 800bea2:	4b13      	ldr	r3, [pc, #76]	; (800bef0 <_vfiprintf_r+0x228>)
 800bea4:	a904      	add	r1, sp, #16
 800bea6:	4630      	mov	r0, r6
 800bea8:	f7fc fa76 	bl	8008398 <_printf_float>
 800beac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800beb0:	4681      	mov	r9, r0
 800beb2:	d1d5      	bne.n	800be60 <_vfiprintf_r+0x198>
 800beb4:	89a3      	ldrh	r3, [r4, #12]
 800beb6:	065b      	lsls	r3, r3, #25
 800beb8:	f53f af7e 	bmi.w	800bdb8 <_vfiprintf_r+0xf0>
 800bebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bebe:	e77d      	b.n	800bdbc <_vfiprintf_r+0xf4>
 800bec0:	ab03      	add	r3, sp, #12
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	4622      	mov	r2, r4
 800bec6:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <_vfiprintf_r+0x228>)
 800bec8:	a904      	add	r1, sp, #16
 800beca:	4630      	mov	r0, r6
 800becc:	f7fc fd1a 	bl	8008904 <_printf_i>
 800bed0:	e7ec      	b.n	800beac <_vfiprintf_r+0x1e4>
 800bed2:	bf00      	nop
 800bed4:	0800c628 	.word	0x0800c628
 800bed8:	0800c774 	.word	0x0800c774
 800bedc:	0800c648 	.word	0x0800c648
 800bee0:	0800c608 	.word	0x0800c608
 800bee4:	0800c77a 	.word	0x0800c77a
 800bee8:	0800c77e 	.word	0x0800c77e
 800beec:	08008399 	.word	0x08008399
 800bef0:	0800bca3 	.word	0x0800bca3

0800bef4 <__sread>:
 800bef4:	b510      	push	{r4, lr}
 800bef6:	460c      	mov	r4, r1
 800bef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800befc:	f000 faa6 	bl	800c44c <_read_r>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	bfab      	itete	ge
 800bf04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf06:	89a3      	ldrhlt	r3, [r4, #12]
 800bf08:	181b      	addge	r3, r3, r0
 800bf0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf0e:	bfac      	ite	ge
 800bf10:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf12:	81a3      	strhlt	r3, [r4, #12]
 800bf14:	bd10      	pop	{r4, pc}

0800bf16 <__swrite>:
 800bf16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1a:	461f      	mov	r7, r3
 800bf1c:	898b      	ldrh	r3, [r1, #12]
 800bf1e:	05db      	lsls	r3, r3, #23
 800bf20:	4605      	mov	r5, r0
 800bf22:	460c      	mov	r4, r1
 800bf24:	4616      	mov	r6, r2
 800bf26:	d505      	bpl.n	800bf34 <__swrite+0x1e>
 800bf28:	2302      	movs	r3, #2
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf30:	f000 f9d6 	bl	800c2e0 <_lseek_r>
 800bf34:	89a3      	ldrh	r3, [r4, #12]
 800bf36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf3e:	81a3      	strh	r3, [r4, #12]
 800bf40:	4632      	mov	r2, r6
 800bf42:	463b      	mov	r3, r7
 800bf44:	4628      	mov	r0, r5
 800bf46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4a:	f000 b889 	b.w	800c060 <_write_r>

0800bf4e <__sseek>:
 800bf4e:	b510      	push	{r4, lr}
 800bf50:	460c      	mov	r4, r1
 800bf52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf56:	f000 f9c3 	bl	800c2e0 <_lseek_r>
 800bf5a:	1c43      	adds	r3, r0, #1
 800bf5c:	89a3      	ldrh	r3, [r4, #12]
 800bf5e:	bf15      	itete	ne
 800bf60:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf6a:	81a3      	strheq	r3, [r4, #12]
 800bf6c:	bf18      	it	ne
 800bf6e:	81a3      	strhne	r3, [r4, #12]
 800bf70:	bd10      	pop	{r4, pc}

0800bf72 <__sclose>:
 800bf72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf76:	f000 b8f3 	b.w	800c160 <_close_r>

0800bf7a <strncmp>:
 800bf7a:	b510      	push	{r4, lr}
 800bf7c:	b16a      	cbz	r2, 800bf9a <strncmp+0x20>
 800bf7e:	3901      	subs	r1, #1
 800bf80:	1884      	adds	r4, r0, r2
 800bf82:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bf86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d103      	bne.n	800bf96 <strncmp+0x1c>
 800bf8e:	42a0      	cmp	r0, r4
 800bf90:	d001      	beq.n	800bf96 <strncmp+0x1c>
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1f5      	bne.n	800bf82 <strncmp+0x8>
 800bf96:	1a98      	subs	r0, r3, r2
 800bf98:	bd10      	pop	{r4, pc}
 800bf9a:	4610      	mov	r0, r2
 800bf9c:	e7fc      	b.n	800bf98 <strncmp+0x1e>
	...

0800bfa0 <__swbuf_r>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	460e      	mov	r6, r1
 800bfa4:	4614      	mov	r4, r2
 800bfa6:	4605      	mov	r5, r0
 800bfa8:	b118      	cbz	r0, 800bfb2 <__swbuf_r+0x12>
 800bfaa:	6983      	ldr	r3, [r0, #24]
 800bfac:	b90b      	cbnz	r3, 800bfb2 <__swbuf_r+0x12>
 800bfae:	f7fe fd1f 	bl	800a9f0 <__sinit>
 800bfb2:	4b21      	ldr	r3, [pc, #132]	; (800c038 <__swbuf_r+0x98>)
 800bfb4:	429c      	cmp	r4, r3
 800bfb6:	d12a      	bne.n	800c00e <__swbuf_r+0x6e>
 800bfb8:	686c      	ldr	r4, [r5, #4]
 800bfba:	69a3      	ldr	r3, [r4, #24]
 800bfbc:	60a3      	str	r3, [r4, #8]
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	071a      	lsls	r2, r3, #28
 800bfc2:	d52e      	bpl.n	800c022 <__swbuf_r+0x82>
 800bfc4:	6923      	ldr	r3, [r4, #16]
 800bfc6:	b363      	cbz	r3, 800c022 <__swbuf_r+0x82>
 800bfc8:	6923      	ldr	r3, [r4, #16]
 800bfca:	6820      	ldr	r0, [r4, #0]
 800bfcc:	1ac0      	subs	r0, r0, r3
 800bfce:	6963      	ldr	r3, [r4, #20]
 800bfd0:	b2f6      	uxtb	r6, r6
 800bfd2:	4283      	cmp	r3, r0
 800bfd4:	4637      	mov	r7, r6
 800bfd6:	dc04      	bgt.n	800bfe2 <__swbuf_r+0x42>
 800bfd8:	4621      	mov	r1, r4
 800bfda:	4628      	mov	r0, r5
 800bfdc:	f000 f956 	bl	800c28c <_fflush_r>
 800bfe0:	bb28      	cbnz	r0, 800c02e <__swbuf_r+0x8e>
 800bfe2:	68a3      	ldr	r3, [r4, #8]
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	60a3      	str	r3, [r4, #8]
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	6022      	str	r2, [r4, #0]
 800bfee:	701e      	strb	r6, [r3, #0]
 800bff0:	6963      	ldr	r3, [r4, #20]
 800bff2:	3001      	adds	r0, #1
 800bff4:	4283      	cmp	r3, r0
 800bff6:	d004      	beq.n	800c002 <__swbuf_r+0x62>
 800bff8:	89a3      	ldrh	r3, [r4, #12]
 800bffa:	07db      	lsls	r3, r3, #31
 800bffc:	d519      	bpl.n	800c032 <__swbuf_r+0x92>
 800bffe:	2e0a      	cmp	r6, #10
 800c000:	d117      	bne.n	800c032 <__swbuf_r+0x92>
 800c002:	4621      	mov	r1, r4
 800c004:	4628      	mov	r0, r5
 800c006:	f000 f941 	bl	800c28c <_fflush_r>
 800c00a:	b190      	cbz	r0, 800c032 <__swbuf_r+0x92>
 800c00c:	e00f      	b.n	800c02e <__swbuf_r+0x8e>
 800c00e:	4b0b      	ldr	r3, [pc, #44]	; (800c03c <__swbuf_r+0x9c>)
 800c010:	429c      	cmp	r4, r3
 800c012:	d101      	bne.n	800c018 <__swbuf_r+0x78>
 800c014:	68ac      	ldr	r4, [r5, #8]
 800c016:	e7d0      	b.n	800bfba <__swbuf_r+0x1a>
 800c018:	4b09      	ldr	r3, [pc, #36]	; (800c040 <__swbuf_r+0xa0>)
 800c01a:	429c      	cmp	r4, r3
 800c01c:	bf08      	it	eq
 800c01e:	68ec      	ldreq	r4, [r5, #12]
 800c020:	e7cb      	b.n	800bfba <__swbuf_r+0x1a>
 800c022:	4621      	mov	r1, r4
 800c024:	4628      	mov	r0, r5
 800c026:	f000 f82d 	bl	800c084 <__swsetup_r>
 800c02a:	2800      	cmp	r0, #0
 800c02c:	d0cc      	beq.n	800bfc8 <__swbuf_r+0x28>
 800c02e:	f04f 37ff 	mov.w	r7, #4294967295
 800c032:	4638      	mov	r0, r7
 800c034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c036:	bf00      	nop
 800c038:	0800c628 	.word	0x0800c628
 800c03c:	0800c648 	.word	0x0800c648
 800c040:	0800c608 	.word	0x0800c608

0800c044 <__ascii_wctomb>:
 800c044:	b149      	cbz	r1, 800c05a <__ascii_wctomb+0x16>
 800c046:	2aff      	cmp	r2, #255	; 0xff
 800c048:	bf85      	ittet	hi
 800c04a:	238a      	movhi	r3, #138	; 0x8a
 800c04c:	6003      	strhi	r3, [r0, #0]
 800c04e:	700a      	strbls	r2, [r1, #0]
 800c050:	f04f 30ff 	movhi.w	r0, #4294967295
 800c054:	bf98      	it	ls
 800c056:	2001      	movls	r0, #1
 800c058:	4770      	bx	lr
 800c05a:	4608      	mov	r0, r1
 800c05c:	4770      	bx	lr
	...

0800c060 <_write_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4c07      	ldr	r4, [pc, #28]	; (800c080 <_write_r+0x20>)
 800c064:	4605      	mov	r5, r0
 800c066:	4608      	mov	r0, r1
 800c068:	4611      	mov	r1, r2
 800c06a:	2200      	movs	r2, #0
 800c06c:	6022      	str	r2, [r4, #0]
 800c06e:	461a      	mov	r2, r3
 800c070:	f7fb f86f 	bl	8007152 <_write>
 800c074:	1c43      	adds	r3, r0, #1
 800c076:	d102      	bne.n	800c07e <_write_r+0x1e>
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	b103      	cbz	r3, 800c07e <_write_r+0x1e>
 800c07c:	602b      	str	r3, [r5, #0]
 800c07e:	bd38      	pop	{r3, r4, r5, pc}
 800c080:	200020a8 	.word	0x200020a8

0800c084 <__swsetup_r>:
 800c084:	4b32      	ldr	r3, [pc, #200]	; (800c150 <__swsetup_r+0xcc>)
 800c086:	b570      	push	{r4, r5, r6, lr}
 800c088:	681d      	ldr	r5, [r3, #0]
 800c08a:	4606      	mov	r6, r0
 800c08c:	460c      	mov	r4, r1
 800c08e:	b125      	cbz	r5, 800c09a <__swsetup_r+0x16>
 800c090:	69ab      	ldr	r3, [r5, #24]
 800c092:	b913      	cbnz	r3, 800c09a <__swsetup_r+0x16>
 800c094:	4628      	mov	r0, r5
 800c096:	f7fe fcab 	bl	800a9f0 <__sinit>
 800c09a:	4b2e      	ldr	r3, [pc, #184]	; (800c154 <__swsetup_r+0xd0>)
 800c09c:	429c      	cmp	r4, r3
 800c09e:	d10f      	bne.n	800c0c0 <__swsetup_r+0x3c>
 800c0a0:	686c      	ldr	r4, [r5, #4]
 800c0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0a6:	b29a      	uxth	r2, r3
 800c0a8:	0715      	lsls	r5, r2, #28
 800c0aa:	d42c      	bmi.n	800c106 <__swsetup_r+0x82>
 800c0ac:	06d0      	lsls	r0, r2, #27
 800c0ae:	d411      	bmi.n	800c0d4 <__swsetup_r+0x50>
 800c0b0:	2209      	movs	r2, #9
 800c0b2:	6032      	str	r2, [r6, #0]
 800c0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0b8:	81a3      	strh	r3, [r4, #12]
 800c0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c0be:	e03e      	b.n	800c13e <__swsetup_r+0xba>
 800c0c0:	4b25      	ldr	r3, [pc, #148]	; (800c158 <__swsetup_r+0xd4>)
 800c0c2:	429c      	cmp	r4, r3
 800c0c4:	d101      	bne.n	800c0ca <__swsetup_r+0x46>
 800c0c6:	68ac      	ldr	r4, [r5, #8]
 800c0c8:	e7eb      	b.n	800c0a2 <__swsetup_r+0x1e>
 800c0ca:	4b24      	ldr	r3, [pc, #144]	; (800c15c <__swsetup_r+0xd8>)
 800c0cc:	429c      	cmp	r4, r3
 800c0ce:	bf08      	it	eq
 800c0d0:	68ec      	ldreq	r4, [r5, #12]
 800c0d2:	e7e6      	b.n	800c0a2 <__swsetup_r+0x1e>
 800c0d4:	0751      	lsls	r1, r2, #29
 800c0d6:	d512      	bpl.n	800c0fe <__swsetup_r+0x7a>
 800c0d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0da:	b141      	cbz	r1, 800c0ee <__swsetup_r+0x6a>
 800c0dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0e0:	4299      	cmp	r1, r3
 800c0e2:	d002      	beq.n	800c0ea <__swsetup_r+0x66>
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	f7fc f81b 	bl	8008120 <_free_r>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	6363      	str	r3, [r4, #52]	; 0x34
 800c0ee:	89a3      	ldrh	r3, [r4, #12]
 800c0f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0f4:	81a3      	strh	r3, [r4, #12]
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	6063      	str	r3, [r4, #4]
 800c0fa:	6923      	ldr	r3, [r4, #16]
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	f043 0308 	orr.w	r3, r3, #8
 800c104:	81a3      	strh	r3, [r4, #12]
 800c106:	6923      	ldr	r3, [r4, #16]
 800c108:	b94b      	cbnz	r3, 800c11e <__swsetup_r+0x9a>
 800c10a:	89a3      	ldrh	r3, [r4, #12]
 800c10c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c114:	d003      	beq.n	800c11e <__swsetup_r+0x9a>
 800c116:	4621      	mov	r1, r4
 800c118:	4630      	mov	r0, r6
 800c11a:	f000 f917 	bl	800c34c <__smakebuf_r>
 800c11e:	89a2      	ldrh	r2, [r4, #12]
 800c120:	f012 0301 	ands.w	r3, r2, #1
 800c124:	d00c      	beq.n	800c140 <__swsetup_r+0xbc>
 800c126:	2300      	movs	r3, #0
 800c128:	60a3      	str	r3, [r4, #8]
 800c12a:	6963      	ldr	r3, [r4, #20]
 800c12c:	425b      	negs	r3, r3
 800c12e:	61a3      	str	r3, [r4, #24]
 800c130:	6923      	ldr	r3, [r4, #16]
 800c132:	b953      	cbnz	r3, 800c14a <__swsetup_r+0xc6>
 800c134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c138:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c13c:	d1ba      	bne.n	800c0b4 <__swsetup_r+0x30>
 800c13e:	bd70      	pop	{r4, r5, r6, pc}
 800c140:	0792      	lsls	r2, r2, #30
 800c142:	bf58      	it	pl
 800c144:	6963      	ldrpl	r3, [r4, #20]
 800c146:	60a3      	str	r3, [r4, #8]
 800c148:	e7f2      	b.n	800c130 <__swsetup_r+0xac>
 800c14a:	2000      	movs	r0, #0
 800c14c:	e7f7      	b.n	800c13e <__swsetup_r+0xba>
 800c14e:	bf00      	nop
 800c150:	20000180 	.word	0x20000180
 800c154:	0800c628 	.word	0x0800c628
 800c158:	0800c648 	.word	0x0800c648
 800c15c:	0800c608 	.word	0x0800c608

0800c160 <_close_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4c06      	ldr	r4, [pc, #24]	; (800c17c <_close_r+0x1c>)
 800c164:	2300      	movs	r3, #0
 800c166:	4605      	mov	r5, r0
 800c168:	4608      	mov	r0, r1
 800c16a:	6023      	str	r3, [r4, #0]
 800c16c:	f7fb f9e9 	bl	8007542 <_close>
 800c170:	1c43      	adds	r3, r0, #1
 800c172:	d102      	bne.n	800c17a <_close_r+0x1a>
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	b103      	cbz	r3, 800c17a <_close_r+0x1a>
 800c178:	602b      	str	r3, [r5, #0]
 800c17a:	bd38      	pop	{r3, r4, r5, pc}
 800c17c:	200020a8 	.word	0x200020a8

0800c180 <__sflush_r>:
 800c180:	898a      	ldrh	r2, [r1, #12]
 800c182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c186:	4605      	mov	r5, r0
 800c188:	0710      	lsls	r0, r2, #28
 800c18a:	460c      	mov	r4, r1
 800c18c:	d458      	bmi.n	800c240 <__sflush_r+0xc0>
 800c18e:	684b      	ldr	r3, [r1, #4]
 800c190:	2b00      	cmp	r3, #0
 800c192:	dc05      	bgt.n	800c1a0 <__sflush_r+0x20>
 800c194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c196:	2b00      	cmp	r3, #0
 800c198:	dc02      	bgt.n	800c1a0 <__sflush_r+0x20>
 800c19a:	2000      	movs	r0, #0
 800c19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1a2:	2e00      	cmp	r6, #0
 800c1a4:	d0f9      	beq.n	800c19a <__sflush_r+0x1a>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1ac:	682f      	ldr	r7, [r5, #0]
 800c1ae:	6a21      	ldr	r1, [r4, #32]
 800c1b0:	602b      	str	r3, [r5, #0]
 800c1b2:	d032      	beq.n	800c21a <__sflush_r+0x9a>
 800c1b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	075a      	lsls	r2, r3, #29
 800c1ba:	d505      	bpl.n	800c1c8 <__sflush_r+0x48>
 800c1bc:	6863      	ldr	r3, [r4, #4]
 800c1be:	1ac0      	subs	r0, r0, r3
 800c1c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1c2:	b10b      	cbz	r3, 800c1c8 <__sflush_r+0x48>
 800c1c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1c6:	1ac0      	subs	r0, r0, r3
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1ce:	6a21      	ldr	r1, [r4, #32]
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	47b0      	blx	r6
 800c1d4:	1c43      	adds	r3, r0, #1
 800c1d6:	89a3      	ldrh	r3, [r4, #12]
 800c1d8:	d106      	bne.n	800c1e8 <__sflush_r+0x68>
 800c1da:	6829      	ldr	r1, [r5, #0]
 800c1dc:	291d      	cmp	r1, #29
 800c1de:	d848      	bhi.n	800c272 <__sflush_r+0xf2>
 800c1e0:	4a29      	ldr	r2, [pc, #164]	; (800c288 <__sflush_r+0x108>)
 800c1e2:	40ca      	lsrs	r2, r1
 800c1e4:	07d6      	lsls	r6, r2, #31
 800c1e6:	d544      	bpl.n	800c272 <__sflush_r+0xf2>
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	6062      	str	r2, [r4, #4]
 800c1ec:	04d9      	lsls	r1, r3, #19
 800c1ee:	6922      	ldr	r2, [r4, #16]
 800c1f0:	6022      	str	r2, [r4, #0]
 800c1f2:	d504      	bpl.n	800c1fe <__sflush_r+0x7e>
 800c1f4:	1c42      	adds	r2, r0, #1
 800c1f6:	d101      	bne.n	800c1fc <__sflush_r+0x7c>
 800c1f8:	682b      	ldr	r3, [r5, #0]
 800c1fa:	b903      	cbnz	r3, 800c1fe <__sflush_r+0x7e>
 800c1fc:	6560      	str	r0, [r4, #84]	; 0x54
 800c1fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c200:	602f      	str	r7, [r5, #0]
 800c202:	2900      	cmp	r1, #0
 800c204:	d0c9      	beq.n	800c19a <__sflush_r+0x1a>
 800c206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c20a:	4299      	cmp	r1, r3
 800c20c:	d002      	beq.n	800c214 <__sflush_r+0x94>
 800c20e:	4628      	mov	r0, r5
 800c210:	f7fb ff86 	bl	8008120 <_free_r>
 800c214:	2000      	movs	r0, #0
 800c216:	6360      	str	r0, [r4, #52]	; 0x34
 800c218:	e7c0      	b.n	800c19c <__sflush_r+0x1c>
 800c21a:	2301      	movs	r3, #1
 800c21c:	4628      	mov	r0, r5
 800c21e:	47b0      	blx	r6
 800c220:	1c41      	adds	r1, r0, #1
 800c222:	d1c8      	bne.n	800c1b6 <__sflush_r+0x36>
 800c224:	682b      	ldr	r3, [r5, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d0c5      	beq.n	800c1b6 <__sflush_r+0x36>
 800c22a:	2b1d      	cmp	r3, #29
 800c22c:	d001      	beq.n	800c232 <__sflush_r+0xb2>
 800c22e:	2b16      	cmp	r3, #22
 800c230:	d101      	bne.n	800c236 <__sflush_r+0xb6>
 800c232:	602f      	str	r7, [r5, #0]
 800c234:	e7b1      	b.n	800c19a <__sflush_r+0x1a>
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c23c:	81a3      	strh	r3, [r4, #12]
 800c23e:	e7ad      	b.n	800c19c <__sflush_r+0x1c>
 800c240:	690f      	ldr	r7, [r1, #16]
 800c242:	2f00      	cmp	r7, #0
 800c244:	d0a9      	beq.n	800c19a <__sflush_r+0x1a>
 800c246:	0793      	lsls	r3, r2, #30
 800c248:	680e      	ldr	r6, [r1, #0]
 800c24a:	bf08      	it	eq
 800c24c:	694b      	ldreq	r3, [r1, #20]
 800c24e:	600f      	str	r7, [r1, #0]
 800c250:	bf18      	it	ne
 800c252:	2300      	movne	r3, #0
 800c254:	eba6 0807 	sub.w	r8, r6, r7
 800c258:	608b      	str	r3, [r1, #8]
 800c25a:	f1b8 0f00 	cmp.w	r8, #0
 800c25e:	dd9c      	ble.n	800c19a <__sflush_r+0x1a>
 800c260:	4643      	mov	r3, r8
 800c262:	463a      	mov	r2, r7
 800c264:	6a21      	ldr	r1, [r4, #32]
 800c266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c268:	4628      	mov	r0, r5
 800c26a:	47b0      	blx	r6
 800c26c:	2800      	cmp	r0, #0
 800c26e:	dc06      	bgt.n	800c27e <__sflush_r+0xfe>
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c276:	81a3      	strh	r3, [r4, #12]
 800c278:	f04f 30ff 	mov.w	r0, #4294967295
 800c27c:	e78e      	b.n	800c19c <__sflush_r+0x1c>
 800c27e:	4407      	add	r7, r0
 800c280:	eba8 0800 	sub.w	r8, r8, r0
 800c284:	e7e9      	b.n	800c25a <__sflush_r+0xda>
 800c286:	bf00      	nop
 800c288:	20400001 	.word	0x20400001

0800c28c <_fflush_r>:
 800c28c:	b538      	push	{r3, r4, r5, lr}
 800c28e:	690b      	ldr	r3, [r1, #16]
 800c290:	4605      	mov	r5, r0
 800c292:	460c      	mov	r4, r1
 800c294:	b1db      	cbz	r3, 800c2ce <_fflush_r+0x42>
 800c296:	b118      	cbz	r0, 800c2a0 <_fflush_r+0x14>
 800c298:	6983      	ldr	r3, [r0, #24]
 800c29a:	b90b      	cbnz	r3, 800c2a0 <_fflush_r+0x14>
 800c29c:	f7fe fba8 	bl	800a9f0 <__sinit>
 800c2a0:	4b0c      	ldr	r3, [pc, #48]	; (800c2d4 <_fflush_r+0x48>)
 800c2a2:	429c      	cmp	r4, r3
 800c2a4:	d109      	bne.n	800c2ba <_fflush_r+0x2e>
 800c2a6:	686c      	ldr	r4, [r5, #4]
 800c2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ac:	b17b      	cbz	r3, 800c2ce <_fflush_r+0x42>
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2b6:	f7ff bf63 	b.w	800c180 <__sflush_r>
 800c2ba:	4b07      	ldr	r3, [pc, #28]	; (800c2d8 <_fflush_r+0x4c>)
 800c2bc:	429c      	cmp	r4, r3
 800c2be:	d101      	bne.n	800c2c4 <_fflush_r+0x38>
 800c2c0:	68ac      	ldr	r4, [r5, #8]
 800c2c2:	e7f1      	b.n	800c2a8 <_fflush_r+0x1c>
 800c2c4:	4b05      	ldr	r3, [pc, #20]	; (800c2dc <_fflush_r+0x50>)
 800c2c6:	429c      	cmp	r4, r3
 800c2c8:	bf08      	it	eq
 800c2ca:	68ec      	ldreq	r4, [r5, #12]
 800c2cc:	e7ec      	b.n	800c2a8 <_fflush_r+0x1c>
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	bd38      	pop	{r3, r4, r5, pc}
 800c2d2:	bf00      	nop
 800c2d4:	0800c628 	.word	0x0800c628
 800c2d8:	0800c648 	.word	0x0800c648
 800c2dc:	0800c608 	.word	0x0800c608

0800c2e0 <_lseek_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	4c07      	ldr	r4, [pc, #28]	; (800c300 <_lseek_r+0x20>)
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	4608      	mov	r0, r1
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	6022      	str	r2, [r4, #0]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	f7fb f94e 	bl	8007590 <_lseek>
 800c2f4:	1c43      	adds	r3, r0, #1
 800c2f6:	d102      	bne.n	800c2fe <_lseek_r+0x1e>
 800c2f8:	6823      	ldr	r3, [r4, #0]
 800c2fa:	b103      	cbz	r3, 800c2fe <_lseek_r+0x1e>
 800c2fc:	602b      	str	r3, [r5, #0]
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	200020a8 	.word	0x200020a8

0800c304 <__swhatbuf_r>:
 800c304:	b570      	push	{r4, r5, r6, lr}
 800c306:	460e      	mov	r6, r1
 800c308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c30c:	2900      	cmp	r1, #0
 800c30e:	b096      	sub	sp, #88	; 0x58
 800c310:	4614      	mov	r4, r2
 800c312:	461d      	mov	r5, r3
 800c314:	da07      	bge.n	800c326 <__swhatbuf_r+0x22>
 800c316:	2300      	movs	r3, #0
 800c318:	602b      	str	r3, [r5, #0]
 800c31a:	89b3      	ldrh	r3, [r6, #12]
 800c31c:	061a      	lsls	r2, r3, #24
 800c31e:	d410      	bmi.n	800c342 <__swhatbuf_r+0x3e>
 800c320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c324:	e00e      	b.n	800c344 <__swhatbuf_r+0x40>
 800c326:	466a      	mov	r2, sp
 800c328:	f000 f8a2 	bl	800c470 <_fstat_r>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	dbf2      	blt.n	800c316 <__swhatbuf_r+0x12>
 800c330:	9a01      	ldr	r2, [sp, #4]
 800c332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c336:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c33a:	425a      	negs	r2, r3
 800c33c:	415a      	adcs	r2, r3
 800c33e:	602a      	str	r2, [r5, #0]
 800c340:	e7ee      	b.n	800c320 <__swhatbuf_r+0x1c>
 800c342:	2340      	movs	r3, #64	; 0x40
 800c344:	2000      	movs	r0, #0
 800c346:	6023      	str	r3, [r4, #0]
 800c348:	b016      	add	sp, #88	; 0x58
 800c34a:	bd70      	pop	{r4, r5, r6, pc}

0800c34c <__smakebuf_r>:
 800c34c:	898b      	ldrh	r3, [r1, #12]
 800c34e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c350:	079d      	lsls	r5, r3, #30
 800c352:	4606      	mov	r6, r0
 800c354:	460c      	mov	r4, r1
 800c356:	d507      	bpl.n	800c368 <__smakebuf_r+0x1c>
 800c358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	6123      	str	r3, [r4, #16]
 800c360:	2301      	movs	r3, #1
 800c362:	6163      	str	r3, [r4, #20]
 800c364:	b002      	add	sp, #8
 800c366:	bd70      	pop	{r4, r5, r6, pc}
 800c368:	ab01      	add	r3, sp, #4
 800c36a:	466a      	mov	r2, sp
 800c36c:	f7ff ffca 	bl	800c304 <__swhatbuf_r>
 800c370:	9900      	ldr	r1, [sp, #0]
 800c372:	4605      	mov	r5, r0
 800c374:	4630      	mov	r0, r6
 800c376:	f7fb ff21 	bl	80081bc <_malloc_r>
 800c37a:	b948      	cbnz	r0, 800c390 <__smakebuf_r+0x44>
 800c37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c380:	059a      	lsls	r2, r3, #22
 800c382:	d4ef      	bmi.n	800c364 <__smakebuf_r+0x18>
 800c384:	f023 0303 	bic.w	r3, r3, #3
 800c388:	f043 0302 	orr.w	r3, r3, #2
 800c38c:	81a3      	strh	r3, [r4, #12]
 800c38e:	e7e3      	b.n	800c358 <__smakebuf_r+0xc>
 800c390:	4b0d      	ldr	r3, [pc, #52]	; (800c3c8 <__smakebuf_r+0x7c>)
 800c392:	62b3      	str	r3, [r6, #40]	; 0x28
 800c394:	89a3      	ldrh	r3, [r4, #12]
 800c396:	6020      	str	r0, [r4, #0]
 800c398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c39c:	81a3      	strh	r3, [r4, #12]
 800c39e:	9b00      	ldr	r3, [sp, #0]
 800c3a0:	6163      	str	r3, [r4, #20]
 800c3a2:	9b01      	ldr	r3, [sp, #4]
 800c3a4:	6120      	str	r0, [r4, #16]
 800c3a6:	b15b      	cbz	r3, 800c3c0 <__smakebuf_r+0x74>
 800c3a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	f000 f871 	bl	800c494 <_isatty_r>
 800c3b2:	b128      	cbz	r0, 800c3c0 <__smakebuf_r+0x74>
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	f023 0303 	bic.w	r3, r3, #3
 800c3ba:	f043 0301 	orr.w	r3, r3, #1
 800c3be:	81a3      	strh	r3, [r4, #12]
 800c3c0:	89a3      	ldrh	r3, [r4, #12]
 800c3c2:	431d      	orrs	r5, r3
 800c3c4:	81a5      	strh	r5, [r4, #12]
 800c3c6:	e7cd      	b.n	800c364 <__smakebuf_r+0x18>
 800c3c8:	0800a9b9 	.word	0x0800a9b9

0800c3cc <memmove>:
 800c3cc:	4288      	cmp	r0, r1
 800c3ce:	b510      	push	{r4, lr}
 800c3d0:	eb01 0302 	add.w	r3, r1, r2
 800c3d4:	d807      	bhi.n	800c3e6 <memmove+0x1a>
 800c3d6:	1e42      	subs	r2, r0, #1
 800c3d8:	4299      	cmp	r1, r3
 800c3da:	d00a      	beq.n	800c3f2 <memmove+0x26>
 800c3dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c3e4:	e7f8      	b.n	800c3d8 <memmove+0xc>
 800c3e6:	4283      	cmp	r3, r0
 800c3e8:	d9f5      	bls.n	800c3d6 <memmove+0xa>
 800c3ea:	1881      	adds	r1, r0, r2
 800c3ec:	1ad2      	subs	r2, r2, r3
 800c3ee:	42d3      	cmn	r3, r2
 800c3f0:	d100      	bne.n	800c3f4 <memmove+0x28>
 800c3f2:	bd10      	pop	{r4, pc}
 800c3f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c3fc:	e7f7      	b.n	800c3ee <memmove+0x22>

0800c3fe <_realloc_r>:
 800c3fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c400:	4607      	mov	r7, r0
 800c402:	4614      	mov	r4, r2
 800c404:	460e      	mov	r6, r1
 800c406:	b921      	cbnz	r1, 800c412 <_realloc_r+0x14>
 800c408:	4611      	mov	r1, r2
 800c40a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c40e:	f7fb bed5 	b.w	80081bc <_malloc_r>
 800c412:	b922      	cbnz	r2, 800c41e <_realloc_r+0x20>
 800c414:	f7fb fe84 	bl	8008120 <_free_r>
 800c418:	4625      	mov	r5, r4
 800c41a:	4628      	mov	r0, r5
 800c41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c41e:	f000 f849 	bl	800c4b4 <_malloc_usable_size_r>
 800c422:	42a0      	cmp	r0, r4
 800c424:	d20f      	bcs.n	800c446 <_realloc_r+0x48>
 800c426:	4621      	mov	r1, r4
 800c428:	4638      	mov	r0, r7
 800c42a:	f7fb fec7 	bl	80081bc <_malloc_r>
 800c42e:	4605      	mov	r5, r0
 800c430:	2800      	cmp	r0, #0
 800c432:	d0f2      	beq.n	800c41a <_realloc_r+0x1c>
 800c434:	4631      	mov	r1, r6
 800c436:	4622      	mov	r2, r4
 800c438:	f7fe feb0 	bl	800b19c <memcpy>
 800c43c:	4631      	mov	r1, r6
 800c43e:	4638      	mov	r0, r7
 800c440:	f7fb fe6e 	bl	8008120 <_free_r>
 800c444:	e7e9      	b.n	800c41a <_realloc_r+0x1c>
 800c446:	4635      	mov	r5, r6
 800c448:	e7e7      	b.n	800c41a <_realloc_r+0x1c>
	...

0800c44c <_read_r>:
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4c07      	ldr	r4, [pc, #28]	; (800c46c <_read_r+0x20>)
 800c450:	4605      	mov	r5, r0
 800c452:	4608      	mov	r0, r1
 800c454:	4611      	mov	r1, r2
 800c456:	2200      	movs	r2, #0
 800c458:	6022      	str	r2, [r4, #0]
 800c45a:	461a      	mov	r2, r3
 800c45c:	f7fb f854 	bl	8007508 <_read>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_read_r+0x1e>
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	b103      	cbz	r3, 800c46a <_read_r+0x1e>
 800c468:	602b      	str	r3, [r5, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	200020a8 	.word	0x200020a8

0800c470 <_fstat_r>:
 800c470:	b538      	push	{r3, r4, r5, lr}
 800c472:	4c07      	ldr	r4, [pc, #28]	; (800c490 <_fstat_r+0x20>)
 800c474:	2300      	movs	r3, #0
 800c476:	4605      	mov	r5, r0
 800c478:	4608      	mov	r0, r1
 800c47a:	4611      	mov	r1, r2
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	f7fb f86c 	bl	800755a <_fstat>
 800c482:	1c43      	adds	r3, r0, #1
 800c484:	d102      	bne.n	800c48c <_fstat_r+0x1c>
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	b103      	cbz	r3, 800c48c <_fstat_r+0x1c>
 800c48a:	602b      	str	r3, [r5, #0]
 800c48c:	bd38      	pop	{r3, r4, r5, pc}
 800c48e:	bf00      	nop
 800c490:	200020a8 	.word	0x200020a8

0800c494 <_isatty_r>:
 800c494:	b538      	push	{r3, r4, r5, lr}
 800c496:	4c06      	ldr	r4, [pc, #24]	; (800c4b0 <_isatty_r+0x1c>)
 800c498:	2300      	movs	r3, #0
 800c49a:	4605      	mov	r5, r0
 800c49c:	4608      	mov	r0, r1
 800c49e:	6023      	str	r3, [r4, #0]
 800c4a0:	f7fb f86b 	bl	800757a <_isatty>
 800c4a4:	1c43      	adds	r3, r0, #1
 800c4a6:	d102      	bne.n	800c4ae <_isatty_r+0x1a>
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	b103      	cbz	r3, 800c4ae <_isatty_r+0x1a>
 800c4ac:	602b      	str	r3, [r5, #0]
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
 800c4b0:	200020a8 	.word	0x200020a8

0800c4b4 <_malloc_usable_size_r>:
 800c4b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4b8:	1f18      	subs	r0, r3, #4
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	bfbc      	itt	lt
 800c4be:	580b      	ldrlt	r3, [r1, r0]
 800c4c0:	18c0      	addlt	r0, r0, r3
 800c4c2:	4770      	bx	lr

0800c4c4 <_init>:
 800c4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c6:	bf00      	nop
 800c4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ca:	bc08      	pop	{r3}
 800c4cc:	469e      	mov	lr, r3
 800c4ce:	4770      	bx	lr

0800c4d0 <_fini>:
 800c4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d2:	bf00      	nop
 800c4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4d6:	bc08      	pop	{r3}
 800c4d8:	469e      	mov	lr, r3
 800c4da:	4770      	bx	lr
